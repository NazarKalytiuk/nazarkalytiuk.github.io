{"version":3,"sources":["webpack:///app.37643c0079459f1ec4f0.js","webpack:///./app/main.ts","webpack:///./app/app.module.js","webpack:///./~/angular2-in-memory-web-api/index.js","webpack:///./~/angular2-in-memory-web-api/http-status-codes.js","webpack:///./~/angular2-in-memory-web-api/in-memory-backend.service.js","webpack:///./app/components/app/app.js","webpack:///./app/components/login/login.js","webpack:///./app/services/autentification/authentication.js","webpack:///./app/components/header/header.js","webpack:///./app/components/header/header.service.js","webpack:///./app/components/navigation-drawer/navigation-drawer.js","webpack:///./app/components/overlay/overlay.js","webpack:///./~/@angular2-material/button/button.umd.js","webpack:///./~/@angular2-material/core/core.umd.js","webpack:///./~/@angular2-material/card/card.umd.js","webpack:///./app/components/app/app.routing.js","webpack:///./~/@angular/forms/bundles/forms.umd.js"],"names":["webpackJsonp","0","module","exports","__webpack_require__","platform_browser_dynamic_1","app_module_1","core_1","platform","platformBrowserDynamic","enableProdMode","bootstrapModule","AppModule","23","__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","platform_browser_1","http_1","angular2_in_memory_web_api_1","app_1","login_1","header_1","navigation_drawer_1","overlay_1","button_1","card_1","app_routing_1","forms_1","NgModule","imports","BrowserModule","MdButtonModule","MdCardModule","FormsModule","HttpModule","InMemoryWebApiModule","routing","declarations","AppComponent","LoginComponent","HeaderComponent","OverlayComponent","NavDrawerComponent","bootstrap","25","__export","m","p","hasOwnProperty","in_memory_backend_service_2","forRoot","dbCreator","options","providers","provide","XHRBackend","useClass","InMemoryBackendService","SEED_DATA","push","InMemoryBackendConfig","useValue","ngModule","26","STATUS","CONTINUE","SWITCHING_PROTOCOLS","OK","CREATED","ACCEPTED","NON_AUTHORITATIVE_INFORMATION","NO_CONTENT","RESET_CONTENT","PARTIAL_CONTENT","MULTIPLE_CHOICES","MOVED_PERMANTENTLY","FOUND","SEE_OTHER","NOT_MODIFIED","USE_PROXY","TEMPORARY_REDIRECT","BAD_REQUEST","UNAUTHORIZED","PAYMENT_REQUIRED","FORBIDDEN","NOT_FOUND","METHOD_NOT_ALLOWED","NOT_ACCEPTABLE","PROXY_AUTHENTICATION_REQUIRED","REQUEST_TIMEOUT","CONFLICT","GONE","LENGTH_REQUIRED","PRECONDITION_FAILED","PAYLOAD_TO_LARGE","URI_TOO_LONG","UNSUPPORTED_MEDIA_TYPE","RANGE_NOT_SATISFIABLE","EXPECTATION_FAILED","IM_A_TEAPOT","UPGRADE_REQUIRED","INTERNAL_SERVER_ERROR","NOT_IMPLEMENTED","BAD_GATEWAY","SERVICE_UNAVAILABLE","GATEWAY_TIMEOUT","HTTP_VERSION_NOT_SUPPORTED","PROCESSING","MULTI_STATUS","IM_USED","PERMANENT_REDIRECT","UNPROCESSABLE_ENTRY","LOCKED","FAILED_DEPENDENCY","PRECONDITION_REQUIRED","TOO_MANY_REQUESTS","REQUEST_HEADER_FIELDS_TOO_LARGE","UNAVAILABLE_FOR_LEGAL_REASONS","VARIANT_ALSO_NEGOTIATES","INSUFFICIENT_STORAGE","NETWORK_AUTHENTICATION_REQUIRED","STATUS_CODE_INFO","100","code","text","description","spec_title","spec_href","101","200","201","202","203","204","205","206","300","301","302","303","304","305","307","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","426","500","501","502","503","504","505","102","207","226","308","422","423","424","428","429","431","451","506","507","511","27","__param","paramIndex","decorator","Observable_1","http_status_codes_1","OpaqueToken","config","assign","defaultResponseOptions","BaseResponseOptions","delay","delete404","isSuccess","status","seedData","resetDb","loc","getLocation","host","rootPath","pathname","prototype","createConnection","req","res","handleRequest","response","Observable","responseObserver","next","complete","error","readyState","ReadyState","Done","request","_a","parseUrl","url","base","collectionName","id","resourceUrl","query","collection","db","reqInfo","headers","Headers","Content-Type","parseId","toLowerCase","commands","method","RequestMethod","Get","get","Post","post","Put","put","Delete","createErrorResponse","err","message","setStatusText","merge","Response","applyQuery","conditions","paramsMap","forEach","value","name","rx","RegExp","decodeURI","len","filter","row","ok","cond","test","clone","data","JSON","parse","stringify","command","ResponseOptions","body","exists","removeById","findById","find","item","genId","maxId","reduce","prev","Math","max","href","l","document","createElement","indexOf","findIndex","isNumberId","idNum","parseFloat","isNaN","drop","urlRoot","protocol","path","substring","split","search","URLSearchParams","substr","msg","Error","existingIx","set","ix","splice","createDb","statusCode","statusText","Inject","Optional","37","Component","selector","templateUrl","styleUrls","38","authentication_1","_service","user","User","errorMsg","login","AuthenticationService","39","router_1","Login","Password","users","_router","logout","localStorage","removeItem","navigate","authenticatedUser","u","setItem","toString","checkCredentials","getItem","Injectable","Router","69","header_service_1","hs","ngOnInit","getName","then","console","log","element","Title","HeaderService","70","http","heroesUrl","toPromise","json","Data","handleError","Promise","reject","Http","74","_this","handleTouchMove","event","diff","parseInt","style","left","window","getComputedStyle","width","posx","changedTouches","clientX","touchStartPosX","offsetWidth","isMenuOpen","overlay","classList","add","opacity","isTouchWasOnDrawer","handleTouchStart","remove","transitionDuration","touchStartTime","timeStamp","handleTouchEnd","getElementsByClassName","addEventListener","75","76","global","factory","_angular_core","_angular_common","_angular2Material_core","__extends","b","__","constructor","create","MdButton","_elementRef","_renderer","_isKeyboardFocused","_isMouseDown","disableRipple","_color","_updateColor","enumerable","configurable","_setMousedown","setTimeout","newColor","_setElementColor","color","isAdd","setElementClass","nativeElement","_setKeyboardFocus","_removeKeyboardFocus","focus","getHostElement","isRoundButton","el","hasAttribute","isRippleEnabled","Input","BooleanFieldValue","Boolean","inputs","[class.md-button-focus]","(mousedown)","(focus)","(blur)","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer","MdAnchor","_super","elementRef","renderer","call","_disabled","disabled","_haltDisabledEvents","preventDefault","stopImmediatePropagation","HostBinding","Number","String","(click)","CommonModule","MdRippleModule","77","_angular_platformBrowser","applyCssTransform$1","transformValue","trim","transform","webkitTransform","booleanFieldValueFactory","defaultValue","localKey","ForegroundRippleState","__decorate$1","__metadata$1","MdLine","Directive","MdLineSetter","_lines","_element","_setLineClass","changes","subscribe","count","_resetClasses","_setClass","className","bool","MdLineModule","__decorate$2","__metadata$2","Dir","_dir","dirChange","EventEmitter","old","emit","dir","Output","exportAs","RtlModule","ForegroundRipple","rippleElement","state","NEW","RIPPLE_SPEED_PX_PER_SECOND","MIN_RIPPLE_FILL_TIME_SECONDS","MAX_RIPPLE_FILL_TIME_SECONDS","distanceToFurthestCorner","x","y","rect","distX","abs","right","distY","top","bottom","sqrt","RippleRenderer","_eventHandlers","_rippleElement","_backgroundDiv","appendChild","setTriggerElement","newTrigger","_triggerElement","eventHandler","eventName","removeEventListener","setTriggerElementToHost","clearTriggerElement","createForegroundRipple","rippleOriginLeft","rippleOriginTop","centered","radius","speedFactor","transitionEndCallback","parentRect","getBoundingClientRect","startX","startY","height","offsetX","offsetY","maxRadius","rippleDiv","backgroundColor","fadeInSeconds","min","ripple","EXPANDING","fadeOutForegroundRipple","removeRippleFromDom","parentElement","removeChild","fadeInRippleBackground","fadeOutRippleBackground","__decorate$3","__metadata$3","MdRipple","eventHandlers","Map","_mouseDown","_click","_mouseLeave","_rippleRenderer","trigger","ngOnDestroy","ngOnChanges","changedInputs","keys","start","end","forceCenter","e","_rippleTransitionEnded","propertyName","FADING_OUT","button","isKeyEvent","screenX","screenY","pageX","pageY","__extends$3","MdError","__extends$2","MdComponentPortalAttachedToDomWithoutOriginError","MdNullPortalError","MdPortalAlreadyAttachedError","MdPortalHostAlreadyDisposedError","MdUnknownPortalTypeError","MdNullPortalHostError","MdNoPortalAttachedError","__extends$1","Portal","attach","hasAttached","_attachedHost","detach","setAttachedHost","ComponentPortal","component","viewContainerRef","injector","TemplatePortal","locals","templateRef","BasePortalHost","_isDisposed","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_disposeFn","dispose","setDisposeFn","fn","__decorate$4","__metadata$4","TemplatePortalDirective","TemplateRef","ViewContainerRef","PortalHostDirective","_componentFactoryResolver","_viewContainerRef","_portal","_replaceAttachedPortal","componentFactory","resolveComponentFactory","ref","createComponent","parentInjector","destroy","createEmbeddedView","clear","ComponentFactoryResolver","PortalModule","OverlayState","__extends$4","DomPortalHost","_hostDomElement","hostView","rootNodes","viewContainer","viewRef","rootNode","index","parentNode","OverlayRef","_portalHost","_pane","_state","attachResult","updatePosition","getState","positionStrategy","apply","__decorate$8","__metadata$8","ViewportRuler","getViewportRect","documentRect","documentElement","scrollPosition","getViewportScrollPosition","innerHeight","innerWidth","scrollTop","scrollLeft","ConnectionPositionPair","origin","originX","originY","overlayX","overlayY","ConnectedPositionStrategy","_connectedTo","_originPos","_overlayPos","_viewportRuler","_isRtl","_preferredPositions","_origin","withFallbackPosition","originRect","overlayRect","viewportRect","firstOverlayPoint","_i","pos","originPoint","_getOriginConnectionPoint","overlayPoint","_getOverlayPoint","_willOverlayFitWithinViewport","_setElementPosition","resolve","originPos","overlayPos","_getStartX","_getEndX","originStartX","originEndX","overlayStartX","overlayStartY","scrollPos","applyCssTransform","GlobalPositionStrategy","_cssPosition","_top","_bottom","_left","_right","_translateX","_translateY","fixed","absolute","centerHorizontally","offset","centerVertically","position","tranlateX","_reduceTranslateValues","translateY","translateFn","values","map","t","join","__decorate$7","__metadata$7","OverlayPositionBuilder","connectedTo","OverlayContainer","getContainerElement","_containerElement","_createContainer","container","__decorate$6","__metadata$6","nextUniqueId","defaultState","Overlay","_overlayContainer","_positionBuilder","_createOverlayRef","_createPaneElement","pane","_createPortalHost","OVERLAY_PROVIDERS","__decorate$5","__metadata$5","defaultPositionList","OverlayOrigin","ConnectedOverlayDirective","_overlay","_templatePortal","_overlayRef","_createOverlay","_destroyOverlay","positions","overlayConfig","Array","OverlayModule","__decorate$9","__metadata$9","LIVE_ANNOUNCER_ELEMENT_TOKEN","MdLiveAnnouncer","elementToken","_liveElement","_createLiveElement","announce","politeness","textContent","setAttribute","liveEl","__extends$5","__decorate$10","__metadata$10","MdGestureConfig","events","buildHammer","mc","Hammer","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","drag","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","__decorate$11","__metadata$11","MdUniqueSelectionDispatcher","_listeners","notify","listener","listen","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ENTER","TAB","MdCoreModule","78","MdCardContent","MdCardTitle","MdCardSubtitle","MdCardActions","MdCard","MdCardHeader","MdCardTitleGroup","79","appRoutes","RouterModule","80","rxjs_operator_toPromise","rxjs_Subject","rxjs_Observable","rxjs_observable_fromPromise","isPresent","obj","undefined","isBlank","isString","isFunction","isStringMap","isPromise","isArray","looseIdentical","a","normalizeBool","isJsObject","o","isPrimitive","hasConstructor","type","_flattenArray","source","_convertToPromise","_executeValidators","control","validators","_executeAsyncValidators","_mergeErrors","arrayOfErrors","errors","StringMapWrapper","isEmpty","normalizeValidator","validator","validate","normalizeAsyncValidator","unimplemented","_buildValueString","StringWrapper","slice","_extractId","valueString","_buildValueString$1","_extractId$1","controlPath","parent","ListWrapper","setUpControl","_throwError","valueAccessor","Validators","compose","asyncValidator","composeAsync","writeValue","registerOnChange","newValue","viewToModelUpdate","markAsDirty","setValue","emitModelToViewChange","registerOnTouched","markAsTouched","emitModelEvent","setDisabledState","registerOnDisabledChange","isDisabled","_rawValidators","registerOnValidatorChange","updateValueAndValidity","_rawAsyncValidators","cleanUpControl","_noControlError","_clearChangeFns","setUpFormContainer","messageEnd","composeValidators","composeAsyncValidators","isPropertyUpdated","viewModel","contains","change","isFirstChange","currentValue","isBuiltInAccessor","CheckboxControlValueAccessor","NumberValueAccessor","SelectControlValueAccessor","SelectMultipleControlValueAccessor","RadioControlValueAccessor","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","DefaultValueAccessor","_find","delimiter","FormGroup","controls","FormArray","at","toObservable","fromPromise","coerceToValidator","coerceToAsyncValidator","_hasInvalidParent","FormGroupName","FormGroupDirective","FormArrayName","globalScope","WorkerGlobalScope","self","global$1","assert","condition","fromCharCode","charCodeAt","s","regExp","equals","s2","stripLeft","charVal","stripRight","replace","from","replaceAll","to","replaceAllMapped","cb","matches","compare","AbstractControlDirective","NumberWrapper","toFixed","n","fractionDigits","equal","parseIntAutoRadix","result","radix","NaN","isNumeric","isInteger","valid","invalid","pending","pristine","dirty","touched","untouched","enabled","statusChanges","valueChanges","reset","ControlContainer","Map$1","Set","createMapFromPairs","size","pairs","pair","createMapFromMap","_clearValues","keyIterator","_arrayFromMap","getValues","createFixedSize","MapWrapper","createFromStringMap","stringMap","prop","toStringMap","createFromPairs","clearValues","iterable","callback","m1","m2","_b","_c","k1","k2","createGrowableSize","array","forEachWithIndex","first","last","startIndex","list","reversed","reverse","concat","insert","removeAt","removeAll","items","fill","sort","compareFn","toJSON","maximum","predicate","solution","maxValue","Infinity","candidate","candidateValue","flatten","addAll","NG_VALIDATORS","lst","NG_ASYNC_VALIDATORS","required","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","regex","requiredPattern","actualValue","nullValidator","presentValidators","promises","all","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","useExisting","forwardRef","multi","onChange","_","onTouched","setElementProperty","args","(change)","ctorParameters","DEFAULT_VALUE_ACCESSOR","normalizedValue","(input)","NUMBER_VALUE_ACCESSOR","NgControl","_parent","RADIO_VALUE_ACCESSOR","RadioControlRegistry","_accessors","accessor","indexToRemove","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","_checkName","_fn","formControlName","_throwNameError","Injector","propDecorators","SELECT_VALUE_ACCESSOR","_optionMap","_idCounter","_getOptionId","_getOptionValue","_registerOption","NgSelectOption","_select","_setElementValue","Host","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","ids","opt","_setSelected","selected","selectedOptions","val","_value","NgSelectMultipleOption","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","NgControlStatus","Self","NgControlStatusGroup","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","Subject","__extends$6","VALID","INVALID","PENDING","DISABLED","AbstractControl","_onCollectionChange","_pristine","_touched","_status","_errors","_valueChanges","_statusChanges","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsPristine","_updatePristine","markAsPending","disable","emitEvent","_updateValue","_updateAncestors","_onDisabledChange","enable","setParent","_setInitialStatus","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_cancelExistingSubscription","obs","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","getError","errorCode","hasError","_initObservables","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_registerOnCollectionChange","FormControl","_onChange","_applyFormState","emitViewToModelChange","changeFn","patchValue","_setUpControls","registerControl","addControl","removeControl","setControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","_reduceValue","initValue","_registerControl","some","formDirectiveProvider","NgForm","resolvedPromise","asyncValidators","_submitted","ngSubmit","form","_findContainer","getControl","group","updateModel","onSubmit","onReset","resetForm","pop","(submit)","(reset)","outputs","Examples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","__extends$8","modelGroupProvider","NgModelGroup","SkipSelf","__extends$7","formControlBinding","NgModel","resolvedPromise$1","_registered","update","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","disabledValue","ReactiveErrors","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","warn","__extends$9","formControlBinding$1","FormControlDirective","_isControlChanged","__extends$11","formDirectiveProvider$1","directives","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","addFormArray","removeFormArray","getFormArray","newCtrl","_oldForm","sync","async","__extends$12","formGroupNameProvider","formArrayNameProvider","__extends$10","controlNameBinding","FormControlName","_added","REQUIRED_VALIDATOR","RequiredValidator","_required","[attr.required]","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","FormBuilder","controlsConfig","extra","_reduceControls","_createControl","controlConfig","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","InternalFormsSharedModule","ReactiveFormsModule"],"mappings":"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","file":"app.37643c0079459f1ec4f0.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar platform_browser_dynamic_1 = __webpack_require__(1);\r\n\tvar app_module_1 = __webpack_require__(23);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar platform = platform_browser_dynamic_1.platformBrowserDynamic();\r\n\tif (true) {\r\n\t    core_1.enableProdMode();\r\n\t}\r\n\tplatform.bootstrapModule(app_module_1.AppModule);\r\n\n\n/***/ },\n\n/***/ 23:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar platform_browser_1 = __webpack_require__(21);\r\n\tvar http_1 = __webpack_require__(24);\r\n\t// Imports for loading & configuring the in-memory web api\r\n\tvar angular2_in_memory_web_api_1 = __webpack_require__(25);\r\n\tvar app_1 = __webpack_require__(37);\r\n\tvar login_1 = __webpack_require__(38);\r\n\tvar header_1 = __webpack_require__(69);\r\n\tvar navigation_drawer_1 = __webpack_require__(74);\r\n\tvar overlay_1 = __webpack_require__(75);\r\n\tvar button_1 = __webpack_require__(76);\r\n\tvar card_1 = __webpack_require__(78);\r\n\tvar app_routing_1 = __webpack_require__(79);\r\n\tvar forms_1 = __webpack_require__(80);\r\n\tvar AppModule = (function () {\r\n\t    function AppModule() {\r\n\t    }\r\n\t    AppModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            imports: [platform_browser_1.BrowserModule, button_1.MdButtonModule, card_1.MdCardModule, forms_1.FormsModule, http_1.HttpModule, angular2_in_memory_web_api_1.InMemoryWebApiModule, app_routing_1.routing],\r\n\t            declarations: [app_1.AppComponent, login_1.LoginComponent, header_1.HeaderComponent, header_1.HeaderComponent, overlay_1.OverlayComponent, navigation_drawer_1.NavDrawerComponent],\r\n\t            bootstrap: [app_1.AppComponent]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], AppModule);\r\n\t    return AppModule;\r\n\t}());\r\n\texports.AppModule = AppModule;\r\n\t//# sourceMappingURL=app.module.js.map\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(27));\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(24);\r\n\tvar in_memory_backend_service_2 = __webpack_require__(27);\r\n\tvar InMemoryWebApiModule = (function () {\r\n\t    function InMemoryWebApiModule() {\r\n\t    }\r\n\t    /**\r\n\t    *  Prepare in-memory-web-api in the root/boot application module\r\n\t    *  with class that implements InMemoryDbService and creates an in-memory database.\r\n\t    *\r\n\t    * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\r\n\t    * @param {InMemoryBackendConfigArgs} [options]\r\n\t    *\r\n\t    * @example\r\n\t    * InMemoryWebApiModule.forRoot(dbCreator);\r\n\t    * InMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n\t    */\r\n\t    InMemoryWebApiModule.forRoot = function (dbCreator, options) {\r\n\t        var providers = [\r\n\t            { provide: http_1.XHRBackend, useClass: in_memory_backend_service_2.InMemoryBackendService },\r\n\t            { provide: in_memory_backend_service_2.SEED_DATA, useClass: dbCreator }\r\n\t        ];\r\n\t        if (options) {\r\n\t            providers.push({ provide: in_memory_backend_service_2.InMemoryBackendConfig, useValue: options });\r\n\t        }\r\n\t        return {\r\n\t            ngModule: InMemoryWebApiModule,\r\n\t            providers: providers\r\n\t        };\r\n\t    };\r\n\t    InMemoryWebApiModule = __decorate([\r\n\t        core_1.NgModule({}), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], InMemoryWebApiModule);\r\n\t    return InMemoryWebApiModule;\r\n\t}());\r\n\texports.InMemoryWebApiModule = InMemoryWebApiModule;\r\n\t//# sourceMappingURL=index.js.map\n\n/***/ },\n\n/***/ 26:\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\texports.STATUS = {\r\n\t    CONTINUE: 100,\r\n\t    SWITCHING_PROTOCOLS: 101,\r\n\t    OK: 200,\r\n\t    CREATED: 201,\r\n\t    ACCEPTED: 202,\r\n\t    NON_AUTHORITATIVE_INFORMATION: 203,\r\n\t    NO_CONTENT: 204,\r\n\t    RESET_CONTENT: 205,\r\n\t    PARTIAL_CONTENT: 206,\r\n\t    MULTIPLE_CHOICES: 300,\r\n\t    MOVED_PERMANTENTLY: 301,\r\n\t    FOUND: 302,\r\n\t    SEE_OTHER: 303,\r\n\t    NOT_MODIFIED: 304,\r\n\t    USE_PROXY: 305,\r\n\t    TEMPORARY_REDIRECT: 307,\r\n\t    BAD_REQUEST: 400,\r\n\t    UNAUTHORIZED: 401,\r\n\t    PAYMENT_REQUIRED: 402,\r\n\t    FORBIDDEN: 403,\r\n\t    NOT_FOUND: 404,\r\n\t    METHOD_NOT_ALLOWED: 405,\r\n\t    NOT_ACCEPTABLE: 406,\r\n\t    PROXY_AUTHENTICATION_REQUIRED: 407,\r\n\t    REQUEST_TIMEOUT: 408,\r\n\t    CONFLICT: 409,\r\n\t    GONE: 410,\r\n\t    LENGTH_REQUIRED: 411,\r\n\t    PRECONDITION_FAILED: 412,\r\n\t    PAYLOAD_TO_LARGE: 413,\r\n\t    URI_TOO_LONG: 414,\r\n\t    UNSUPPORTED_MEDIA_TYPE: 415,\r\n\t    RANGE_NOT_SATISFIABLE: 416,\r\n\t    EXPECTATION_FAILED: 417,\r\n\t    IM_A_TEAPOT: 418,\r\n\t    UPGRADE_REQUIRED: 426,\r\n\t    INTERNAL_SERVER_ERROR: 500,\r\n\t    NOT_IMPLEMENTED: 501,\r\n\t    BAD_GATEWAY: 502,\r\n\t    SERVICE_UNAVAILABLE: 503,\r\n\t    GATEWAY_TIMEOUT: 504,\r\n\t    HTTP_VERSION_NOT_SUPPORTED: 505,\r\n\t    PROCESSING: 102,\r\n\t    MULTI_STATUS: 207,\r\n\t    IM_USED: 226,\r\n\t    PERMANENT_REDIRECT: 308,\r\n\t    UNPROCESSABLE_ENTRY: 422,\r\n\t    LOCKED: 423,\r\n\t    FAILED_DEPENDENCY: 424,\r\n\t    PRECONDITION_REQUIRED: 428,\r\n\t    TOO_MANY_REQUESTS: 429,\r\n\t    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\r\n\t    UNAVAILABLE_FOR_LEGAL_REASONS: 451,\r\n\t    VARIANT_ALSO_NEGOTIATES: 506,\r\n\t    INSUFFICIENT_STORAGE: 507,\r\n\t    NETWORK_AUTHENTICATION_REQUIRED: 511\r\n\t};\r\n\t/*tslint:disable:quotemark max-line-length one-line */\r\n\texports.STATUS_CODE_INFO = {\r\n\t    \"100\": {\r\n\t        \"code\": 100,\r\n\t        \"text\": \"Continue\",\r\n\t        \"description\": \"\\\"The initial part of a request has been received and has not yet been rejected by the server.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.2.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.1\"\r\n\t    },\r\n\t    \"101\": {\r\n\t        \"code\": 101,\r\n\t        \"text\": \"Switching Protocols\",\r\n\t        \"description\": \"\\\"The server understands and is willing to comply with the client's request, via the Upgrade header field, for a change in the application protocol being used on this connection.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.2.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.2\"\r\n\t    },\r\n\t    \"200\": {\r\n\t        \"code\": 200,\r\n\t        \"text\": \"OK\",\r\n\t        \"description\": \"\\\"The request has succeeded.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.1\"\r\n\t    },\r\n\t    \"201\": {\r\n\t        \"code\": 201,\r\n\t        \"text\": \"Created\",\r\n\t        \"description\": \"\\\"The request has been fulfilled and has resulted in one or more new resources being created.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n\t    },\r\n\t    \"202\": {\r\n\t        \"code\": 202,\r\n\t        \"text\": \"Accepted\",\r\n\t        \"description\": \"\\\"The request has been accepted for processing, but the processing has not been completed.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.3\"\r\n\t    },\r\n\t    \"203\": {\r\n\t        \"code\": 203,\r\n\t        \"text\": \"Non-Authoritative Information\",\r\n\t        \"description\": \"\\\"The request was successful but the enclosed payload has been modified from that of the origin server's 200 (OK) response by a transforming proxy.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.4\"\r\n\t    },\r\n\t    \"204\": {\r\n\t        \"code\": 204,\r\n\t        \"text\": \"No Content\",\r\n\t        \"description\": \"\\\"The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.5\"\r\n\t    },\r\n\t    \"205\": {\r\n\t        \"code\": 205,\r\n\t        \"text\": \"Reset Content\",\r\n\t        \"description\": \"\\\"The server has fulfilled the request and desires that the user agent reset the \\\"document view\\\", which caused the request to be sent, to its original state as received from the origin server.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.6\"\r\n\t    },\r\n\t    \"206\": {\r\n\t        \"code\": 206,\r\n\t        \"text\": \"Partial Content\",\r\n\t        \"description\": \"\\\"The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the requests's Range header field.\\\"\",\r\n\t        \"spec_title\": \"RFC7233#4.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.1\"\r\n\t    },\r\n\t    \"300\": {\r\n\t        \"code\": 300,\r\n\t        \"text\": \"Multiple Choices\",\r\n\t        \"description\": \"\\\"The target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.1\"\r\n\t    },\r\n\t    \"301\": {\r\n\t        \"code\": 301,\r\n\t        \"text\": \"Moved Permanently\",\r\n\t        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.2\"\r\n\t    },\r\n\t    \"302\": {\r\n\t        \"code\": 302,\r\n\t        \"text\": \"Found\",\r\n\t        \"description\": \"\\\"The target resource resides temporarily under a different URI.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.3\"\r\n\t    },\r\n\t    \"303\": {\r\n\t        \"code\": 303,\r\n\t        \"text\": \"See Other\",\r\n\t        \"description\": \"\\\"The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, that is intended to provide an indirect response to the original request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.4\"\r\n\t    },\r\n\t    \"304\": {\r\n\t        \"code\": 304,\r\n\t        \"text\": \"Not Modified\",\r\n\t        \"description\": \"\\\"A conditional GET request has been received and would have resulted in a 200 (OK) response if it were not for the fact that the condition has evaluated to false.\\\"\",\r\n\t        \"spec_title\": \"RFC7232#4.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.1\"\r\n\t    },\r\n\t    \"305\": {\r\n\t        \"code\": 305,\r\n\t        \"text\": \"Use Proxy\",\r\n\t        \"description\": \"*deprecated*\",\r\n\t        \"spec_title\": \"RFC7231#6.4.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.5\"\r\n\t    },\r\n\t    \"307\": {\r\n\t        \"code\": 307,\r\n\t        \"text\": \"Temporary Redirect\",\r\n\t        \"description\": \"\\\"The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.7\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.7\"\r\n\t    },\r\n\t    \"400\": {\r\n\t        \"code\": 400,\r\n\t        \"text\": \"Bad Request\",\r\n\t        \"description\": \"\\\"The server cannot or will not process the request because the received syntax is invalid, nonsensical, or exceeds some limitation on what the server is willing to process.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.1\"\r\n\t    },\r\n\t    \"401\": {\r\n\t        \"code\": 401,\r\n\t        \"text\": \"Unauthorized\",\r\n\t        \"description\": \"\\\"The request has not been applied because it lacks valid authentication credentials for the target resource.\\\"\",\r\n\t        \"spec_title\": \"RFC7235#6.3.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7235#section-3.1\"\r\n\t    },\r\n\t    \"402\": {\r\n\t        \"code\": 402,\r\n\t        \"text\": \"Payment Required\",\r\n\t        \"description\": \"*reserved*\",\r\n\t        \"spec_title\": \"RFC7231#6.5.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.2\"\r\n\t    },\r\n\t    \"403\": {\r\n\t        \"code\": 403,\r\n\t        \"text\": \"Forbidden\",\r\n\t        \"description\": \"\\\"The server understood the request but refuses to authorize it.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.3\"\r\n\t    },\r\n\t    \"404\": {\r\n\t        \"code\": 404,\r\n\t        \"text\": \"Not Found\",\r\n\t        \"description\": \"\\\"The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.4\"\r\n\t    },\r\n\t    \"405\": {\r\n\t        \"code\": 405,\r\n\t        \"text\": \"Method Not Allowed\",\r\n\t        \"description\": \"\\\"The method specified in the request-line is known by the origin server but not supported by the target resource.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.5\"\r\n\t    },\r\n\t    \"406\": {\r\n\t        \"code\": 406,\r\n\t        \"text\": \"Not Acceptable\",\r\n\t        \"description\": \"\\\"The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.6\"\r\n\t    },\r\n\t    \"407\": {\r\n\t        \"code\": 407,\r\n\t        \"text\": \"Proxy Authentication Required\",\r\n\t        \"description\": \"\\\"The client needs to authenticate itself in order to use a proxy.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n\t    },\r\n\t    \"408\": {\r\n\t        \"code\": 408,\r\n\t        \"text\": \"Request Timeout\",\r\n\t        \"description\": \"\\\"The server did not receive a complete request message within the time that it was prepared to wait.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.7\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.7\"\r\n\t    },\r\n\t    \"409\": {\r\n\t        \"code\": 409,\r\n\t        \"text\": \"Conflict\",\r\n\t        \"description\": \"\\\"The request could not be completed due to a conflict with the current state of the resource.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.8\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.8\"\r\n\t    },\r\n\t    \"410\": {\r\n\t        \"code\": 410,\r\n\t        \"text\": \"Gone\",\r\n\t        \"description\": \"\\\"Access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.9\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.9\"\r\n\t    },\r\n\t    \"411\": {\r\n\t        \"code\": 411,\r\n\t        \"text\": \"Length Required\",\r\n\t        \"description\": \"\\\"The server refuses to accept the request without a defined Content-Length.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.10\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.10\"\r\n\t    },\r\n\t    \"412\": {\r\n\t        \"code\": 412,\r\n\t        \"text\": \"Precondition Failed\",\r\n\t        \"description\": \"\\\"One or more preconditions given in the request header fields evaluated to false when tested on the server.\\\"\",\r\n\t        \"spec_title\": \"RFC7232#4.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.2\"\r\n\t    },\r\n\t    \"413\": {\r\n\t        \"code\": 413,\r\n\t        \"text\": \"Payload Too Large\",\r\n\t        \"description\": \"\\\"The server is refusing to process a request because the request payload is larger than the server is willing or able to process.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.11\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.11\"\r\n\t    },\r\n\t    \"414\": {\r\n\t        \"code\": 414,\r\n\t        \"text\": \"URI Too Long\",\r\n\t        \"description\": \"\\\"The server is refusing to service the request because the request-target is longer than the server is willing to interpret.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.12\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.12\"\r\n\t    },\r\n\t    \"415\": {\r\n\t        \"code\": 415,\r\n\t        \"text\": \"Unsupported Media Type\",\r\n\t        \"description\": \"\\\"The origin server is refusing to service the request because the payload is in a format not supported by the target resource for this method.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.13\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.13\"\r\n\t    },\r\n\t    \"416\": {\r\n\t        \"code\": 416,\r\n\t        \"text\": \"Range Not Satisfiable\",\r\n\t        \"description\": \"\\\"None of the ranges in the request's Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\\\"\",\r\n\t        \"spec_title\": \"RFC7233#4.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.4\"\r\n\t    },\r\n\t    \"417\": {\r\n\t        \"code\": 417,\r\n\t        \"text\": \"Expectation Failed\",\r\n\t        \"description\": \"\\\"The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.14\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.14\"\r\n\t    },\r\n\t    \"418\": {\r\n\t        \"code\": 418,\r\n\t        \"text\": \"I'm a teapot\",\r\n\t        \"description\": \"\\\"1988 April Fools Joke. Returned by tea pots requested to brew coffee.\\\"\",\r\n\t        \"spec_title\": \"RFC 2324\",\r\n\t        \"spec_href\": \"https://tools.ietf.org/html/rfc2324\"\r\n\t    },\r\n\t    \"426\": {\r\n\t        \"code\": 426,\r\n\t        \"text\": \"Upgrade Required\",\r\n\t        \"description\": \"\\\"The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.15\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.15\"\r\n\t    },\r\n\t    \"500\": {\r\n\t        \"code\": 500,\r\n\t        \"text\": \"Internal Server Error\",\r\n\t        \"description\": \"\\\"The server encountered an unexpected condition that prevented it from fulfilling the request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.1\"\r\n\t    },\r\n\t    \"501\": {\r\n\t        \"code\": 501,\r\n\t        \"text\": \"Not Implemented\",\r\n\t        \"description\": \"\\\"The server does not support the functionality required to fulfill the request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.2\"\r\n\t    },\r\n\t    \"502\": {\r\n\t        \"code\": 502,\r\n\t        \"text\": \"Bad Gateway\",\r\n\t        \"description\": \"\\\"The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.3\"\r\n\t    },\r\n\t    \"503\": {\r\n\t        \"code\": 503,\r\n\t        \"text\": \"Service Unavailable\",\r\n\t        \"description\": \"\\\"The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.4\"\r\n\t    },\r\n\t    \"504\": {\r\n\t        \"code\": 504,\r\n\t        \"text\": \"Gateway Time-out\",\r\n\t        \"description\": \"\\\"The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.5\"\r\n\t    },\r\n\t    \"505\": {\r\n\t        \"code\": 505,\r\n\t        \"text\": \"HTTP Version Not Supported\",\r\n\t        \"description\": \"\\\"The server does not support, or refuses to support, the protocol version that was used in the request message.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.6\"\r\n\t    },\r\n\t    \"102\": {\r\n\t        \"code\": 102,\r\n\t        \"text\": \"Processing\",\r\n\t        \"description\": \"\\\"An interim response to inform the client that the server has accepted the complete request, but has not yet completed it.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.1\"\r\n\t    },\r\n\t    \"207\": {\r\n\t        \"code\": 207,\r\n\t        \"text\": \"Multi-Status\",\r\n\t        \"description\": \"\\\"Status for multiple independent operations.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.2\"\r\n\t    },\r\n\t    \"226\": {\r\n\t        \"code\": 226,\r\n\t        \"text\": \"IM Used\",\r\n\t        \"description\": \"\\\"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\\\"\",\r\n\t        \"spec_title\": \"RFC3229#10.4.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc3229#section-10.4.1\"\r\n\t    },\r\n\t    \"308\": {\r\n\t        \"code\": 308,\r\n\t        \"text\": \"Permanent Redirect\",\r\n\t        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. [...] This status code is similar to 301 Moved Permanently (Section 7.3.2 of rfc7231), except that it does not allow rewriting the request method from POST to GET.\\\"\",\r\n\t        \"spec_title\": \"RFC7238\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7238\"\r\n\t    },\r\n\t    \"422\": {\r\n\t        \"code\": 422,\r\n\t        \"text\": \"Unprocessable Entity\",\r\n\t        \"description\": \"\\\"The server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.3\"\r\n\t    },\r\n\t    \"423\": {\r\n\t        \"code\": 423,\r\n\t        \"text\": \"Locked\",\r\n\t        \"description\": \"\\\"The source or destination resource of a method is locked.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.4\"\r\n\t    },\r\n\t    \"424\": {\r\n\t        \"code\": 424,\r\n\t        \"text\": \"Failed Dependency\",\r\n\t        \"description\": \"\\\"The method could not be performed on the resource because the requested action depended on another action and that action failed.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.5\"\r\n\t    },\r\n\t    \"428\": {\r\n\t        \"code\": 428,\r\n\t        \"text\": \"Precondition Required\",\r\n\t        \"description\": \"\\\"The origin server requires the request to be conditional.\\\"\",\r\n\t        \"spec_title\": \"RFC6585#3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-3\"\r\n\t    },\r\n\t    \"429\": {\r\n\t        \"code\": 429,\r\n\t        \"text\": \"Too Many Requests\",\r\n\t        \"description\": \"\\\"The user has sent too many requests in a given amount of time (\\\"rate limiting\\\").\\\"\",\r\n\t        \"spec_title\": \"RFC6585#4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-4\"\r\n\t    },\r\n\t    \"431\": {\r\n\t        \"code\": 431,\r\n\t        \"text\": \"Request Header Fields Too Large\",\r\n\t        \"description\": \"\\\"The server is unwilling to process the request because its header fields are too large.\\\"\",\r\n\t        \"spec_title\": \"RFC6585#5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-5\"\r\n\t    },\r\n\t    \"451\": {\r\n\t        \"code\": 451,\r\n\t        \"text\": \"Unavailable For Legal Reasons\",\r\n\t        \"description\": \"\\\"The server is denying access to the resource in response to a legal demand.\\\"\",\r\n\t        \"spec_title\": \"draft-ietf-httpbis-legally-restricted-status\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/draft-ietf-httpbis-legally-restricted-status\"\r\n\t    },\r\n\t    \"506\": {\r\n\t        \"code\": 506,\r\n\t        \"text\": \"Variant Also Negotiates\",\r\n\t        \"description\": \"\\\"The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.\\\"\",\r\n\t        \"spec_title\": \"RFC2295#8.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2295#section-8.1\"\r\n\t    },\r\n\t    \"507\": {\r\n\t        \"code\": 507,\r\n\t        \"text\": \"Insufficient Storage\",\r\n\t        \"description\": \"\\The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.6\"\r\n\t    },\r\n\t    \"511\": {\r\n\t        \"code\": 511,\r\n\t        \"text\": \"Network Authentication Required\",\r\n\t        \"description\": \"\\\"The client needs to authenticate to gain network access.\\\"\",\r\n\t        \"spec_title\": \"RFC6585#6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-6\"\r\n\t    }\r\n\t};\r\n\t//# sourceMappingURL=http-status-codes.js.map\n\n/***/ },\n\n/***/ 27:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n\t    return function (target, key) { decorator(target, key, paramIndex); }\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(24);\r\n\tvar Observable_1 = __webpack_require__(5);\r\n\t__webpack_require__(28);\r\n\tvar http_status_codes_1 = __webpack_require__(26);\r\n\t/**\r\n\t* Class that creates seed data for in-memory database\r\n\t* Must implement InMemoryDbService.\r\n\t*/\r\n\texports.SEED_DATA = new core_1.OpaqueToken('seedData');\r\n\t/**\r\n\t*  InMemoryBackendService configuration options\r\n\t*  Usage:\r\n\t*    provide(InMemoryBackendConfig, {useValue: {delay:600}}),\r\n\t*/\r\n\tvar InMemoryBackendConfig = (function () {\r\n\t    function InMemoryBackendConfig(config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        Object.assign(this, {\r\n\t            defaultResponseOptions: new http_1.BaseResponseOptions(),\r\n\t            delay: 500,\r\n\t            delete404: false\r\n\t        }, config);\r\n\t    }\r\n\t    return InMemoryBackendConfig;\r\n\t}());\r\n\texports.InMemoryBackendConfig = InMemoryBackendConfig;\r\n\texports.isSuccess = function (status) { return (status >= 200 && status < 300); };\r\n\t/**\r\n\t * Simulate the behavior of a RESTy web api\r\n\t * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\r\n\t * Conforms mostly to behavior described here:\r\n\t * http://www.restapitutorial.com/lessons/httpmethods.html\r\n\t *\r\n\t * ### Usage\r\n\t *\r\n\t * Create InMemoryDataService class the implements InMemoryDataService.\r\n\t * Register both this service and the seed data as in:\r\n\t * ```\r\n\t * // other imports\r\n\t * import { HTTPPROVIDERS, XHRBackend } from 'angular2/http';\r\n\t * import { InMemoryBackendConfig, InMemoryBackendService, SEEDDATA } from '../in-memory-backend/in-memory-backend.service';\r\n\t * import { InMemoryStoryService } from '../api/in-memory-story.service';\r\n\t *\r\n\t * @Component({\r\n\t *   selector: ...,\r\n\t *   templateUrl: ...,\r\n\t *   providers: [\r\n\t *     HTTPPROVIDERS,\r\n\t *     provide(XHRBackend, { useClass: InMemoryBackendService }),\r\n\t *     provide(SEEDDATA, { useClass: InMemoryStoryService }),\r\n\t *     provide(InMemoryBackendConfig, { useValue: { delay: 600 } }),\r\n\t *   ]\r\n\t * })\r\n\t * export class AppComponent { ... }\r\n\t * ```\r\n\t */\r\n\tvar InMemoryBackendService = (function () {\r\n\t    function InMemoryBackendService(seedData, config) {\r\n\t        this.seedData = seedData;\r\n\t        this.config = new InMemoryBackendConfig();\r\n\t        this.resetDb();\r\n\t        var loc = this.getLocation('./');\r\n\t        this.config.host = loc.host;\r\n\t        this.config.rootPath = loc.pathname;\r\n\t        Object.assign(this.config, config);\r\n\t    }\r\n\t    InMemoryBackendService.prototype.createConnection = function (req) {\r\n\t        var res = this.handleRequest(req);\r\n\t        var response = new Observable_1.Observable(function (responseObserver) {\r\n\t            if (exports.isSuccess(res.status)) {\r\n\t                responseObserver.next(res);\r\n\t                responseObserver.complete();\r\n\t            }\r\n\t            else {\r\n\t                responseObserver.error(res);\r\n\t            }\r\n\t            return function () { }; // unsubscribe function\r\n\t        });\r\n\t        response = response.delay(this.config.delay || 500);\r\n\t        return {\r\n\t            readyState: http_1.ReadyState.Done,\r\n\t            request: req,\r\n\t            response: response\r\n\t        };\r\n\t    };\r\n\t    ////  protected /////\r\n\t    /**\r\n\t     * Process Request and return an Http Response object\r\n\t     * in the manner of a RESTy web api.\r\n\t     *\r\n\t     * Expect URI pattern in the form :base/:collectionName/:id?\r\n\t     * Examples:\r\n\t     *   // for store with a 'characters' collection\r\n\t     *   GET api/characters          // all characters\r\n\t     *   GET api/characters/42       // the character with id=42\r\n\t     *   GET api/characters?name=^j  // 'j' is a regex; returns characters whose name contains 'j' or 'J'\r\n\t     *   GET api/characters.json/42  // ignores the \".json\"\r\n\t     *\r\n\t     *   POST commands/resetDb  // resets the \"database\"\r\n\t     */\r\n\t    InMemoryBackendService.prototype.handleRequest = function (req) {\r\n\t        var _a = this.parseUrl(req.url), base = _a.base, collectionName = _a.collectionName, id = _a.id, resourceUrl = _a.resourceUrl, query = _a.query;\r\n\t        var collection = this.db[collectionName];\r\n\t        var reqInfo = {\r\n\t            req: req,\r\n\t            base: base,\r\n\t            collection: collection,\r\n\t            collectionName: collectionName,\r\n\t            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n\t            id: this.parseId(collection, id),\r\n\t            query: query,\r\n\t            resourceUrl: resourceUrl\r\n\t        };\r\n\t        var options;\r\n\t        try {\r\n\t            if ('commands' === reqInfo.base.toLowerCase()) {\r\n\t                options = this.commands(reqInfo);\r\n\t            }\r\n\t            else if (reqInfo.collection) {\r\n\t                switch (req.method) {\r\n\t                    case http_1.RequestMethod.Get:\r\n\t                        options = this.get(reqInfo);\r\n\t                        break;\r\n\t                    case http_1.RequestMethod.Post:\r\n\t                        options = this.post(reqInfo);\r\n\t                        break;\r\n\t                    case http_1.RequestMethod.Put:\r\n\t                        options = this.put(reqInfo);\r\n\t                        break;\r\n\t                    case http_1.RequestMethod.Delete:\r\n\t                        options = this.delete(reqInfo);\r\n\t                        break;\r\n\t                    default:\r\n\t                        options = this.createErrorResponse(http_status_codes_1.STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n\t                        break;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                options = this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n\t            }\r\n\t        }\r\n\t        catch (error) {\r\n\t            var err = error.message || error;\r\n\t            options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n\t        }\r\n\t        options = this.setStatusText(options);\r\n\t        if (this.config.defaultResponseOptions) {\r\n\t            options = this.config.defaultResponseOptions.merge(options);\r\n\t        }\r\n\t        return new http_1.Response(options);\r\n\t    };\r\n\t    /**\r\n\t     * Apply query/search parameters as a filter over the collection\r\n\t     * This impl only supports RegExp queries on string properties of the collection\r\n\t     * ANDs the conditions together\r\n\t     */\r\n\t    InMemoryBackendService.prototype.applyQuery = function (collection, query) {\r\n\t        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n\t        var conditions = [];\r\n\t        query.paramsMap.forEach(function (value, name) {\r\n\t            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), 'i') }); });\r\n\t        });\r\n\t        var len = conditions.length;\r\n\t        if (!len) {\r\n\t            return collection;\r\n\t        }\r\n\t        // AND the RegExp conditions\r\n\t        return collection.filter(function (row) {\r\n\t            var ok = true;\r\n\t            var i = len;\r\n\t            while (ok && i) {\r\n\t                i -= 1;\r\n\t                var cond = conditions[i];\r\n\t                ok = cond.rx.test(row[cond.name]);\r\n\t            }\r\n\t            return ok;\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.clone = function (data) {\r\n\t        return JSON.parse(JSON.stringify(data));\r\n\t    };\r\n\t    /**\r\n\t     * When the `base`=\"commands\", the `collectionName` is the command\r\n\t     * Example URLs:\r\n\t     *   commands/resetdb   // Reset the \"database\" to its original state\r\n\t     *   commands/config (GET) // Return this service's config object\r\n\t     *   commands/config (!GET) // Update the config (e.g. delay)\r\n\t     *\r\n\t     * Usage:\r\n\t     *   http.post('commands/resetdb', null);\r\n\t     *   http.get('commands/config');\r\n\t     *   http.post('commands/config', '{\"delay\":1000}');\r\n\t     */\r\n\t    InMemoryBackendService.prototype.commands = function (reqInfo) {\r\n\t        var command = reqInfo.collectionName.toLowerCase();\r\n\t        var method = reqInfo.req.method;\r\n\t        var options;\r\n\t        switch (command) {\r\n\t            case 'resetdb':\r\n\t                this.resetDb();\r\n\t                options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.OK });\r\n\t                break;\r\n\t            case 'config':\r\n\t                if (method === http_1.RequestMethod.Get) {\r\n\t                    options = new http_1.ResponseOptions({\r\n\t                        body: this.clone(this.config),\r\n\t                        status: http_status_codes_1.STATUS.OK\r\n\t                    });\r\n\t                }\r\n\t                else {\r\n\t                    // Be nice ... any other method is a config update\r\n\t                    var body = JSON.parse(reqInfo.req.text() || '{}');\r\n\t                    Object.assign(this.config, body);\r\n\t                    options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.NO_CONTENT });\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n\t        }\r\n\t        return options;\r\n\t    };\r\n\t    InMemoryBackendService.prototype.createErrorResponse = function (status, message) {\r\n\t        return new http_1.ResponseOptions({\r\n\t            body: { 'error': \"\" + message },\r\n\t            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n\t            status: status\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.delete = function (_a) {\r\n\t        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n\t        if (!id) {\r\n\t            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n\t        }\r\n\t        var exists = this.removeById(collection, id);\r\n\t        return new http_1.ResponseOptions({\r\n\t            headers: headers,\r\n\t            status: (exists || !this.config.delete404) ? http_status_codes_1.STATUS.NO_CONTENT : http_status_codes_1.STATUS.NOT_FOUND\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.findById = function (collection, id) {\r\n\t        return collection.find(function (item) { return item.id === id; });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.genId = function (collection) {\r\n\t        // assumes numeric ids\r\n\t        var maxId = 0;\r\n\t        collection.reduce(function (prev, item) {\r\n\t            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n\t        }, null);\r\n\t        return maxId + 1;\r\n\t    };\r\n\t    InMemoryBackendService.prototype.get = function (_a) {\r\n\t        var id = _a.id, query = _a.query, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n\t        var data = collection;\r\n\t        if (id) {\r\n\t            data = this.findById(collection, id);\r\n\t        }\r\n\t        else if (query) {\r\n\t            data = this.applyQuery(collection, query);\r\n\t        }\r\n\t        if (!data) {\r\n\t            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n\t        }\r\n\t        return new http_1.ResponseOptions({\r\n\t            body: { data: this.clone(data) },\r\n\t            headers: headers,\r\n\t            status: http_status_codes_1.STATUS.OK\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.getLocation = function (href) {\r\n\t        var l = document.createElement('a');\r\n\t        l.href = href;\r\n\t        return l;\r\n\t    };\r\n\t    ;\r\n\t    InMemoryBackendService.prototype.indexOf = function (collection, id) {\r\n\t        return collection.findIndex(function (item) { return item.id === id; });\r\n\t    };\r\n\t    // tries to parse id as number if collection item.id is a number.\r\n\t    // returns the original param id otherwise.\r\n\t    InMemoryBackendService.prototype.parseId = function (collection, id) {\r\n\t        if (!id) {\r\n\t            return null;\r\n\t        }\r\n\t        var isNumberId = collection[0] && typeof collection[0].id === 'number';\r\n\t        if (isNumberId) {\r\n\t            var idNum = parseFloat(id);\r\n\t            return isNaN(idNum) ? id : idNum;\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    InMemoryBackendService.prototype.parseUrl = function (url) {\r\n\t        try {\r\n\t            var loc = this.getLocation(url);\r\n\t            var drop = this.config.rootPath.length;\r\n\t            var urlRoot = '';\r\n\t            if (loc.host !== this.config.host) {\r\n\t                // url for a server on a different host!\r\n\t                // assume it's collection is actually here too.\r\n\t                drop = 1; // the leading slash\r\n\t                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n\t            }\r\n\t            var path = loc.pathname.substring(drop);\r\n\t            var _a = path.split('/'), base = _a[0], collectionName = _a[1], id = _a[2];\r\n\t            var resourceUrl = urlRoot + base + '/' + collectionName + '/';\r\n\t            collectionName = collectionName.split('.')[0]; // ignore anything after the '.', e.g., '.json'\r\n\t            var query = loc.search && new http_1.URLSearchParams(loc.search.substr(1));\r\n\t            return { base: base, id: id, collectionName: collectionName, resourceUrl: resourceUrl, query: query };\r\n\t        }\r\n\t        catch (err) {\r\n\t            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n\t            throw new Error(msg);\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.post = function (_a) {\r\n\t        var collection = _a.collection, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl;\r\n\t        var item = JSON.parse(req.text());\r\n\t        if (!item.id) {\r\n\t            item.id = id || this.genId(collection);\r\n\t        }\r\n\t        // ignore the request id, if any. Alternatively,\r\n\t        // could reject request if id differs from item.id\r\n\t        id = item.id;\r\n\t        var existingIx = this.indexOf(collection, id);\r\n\t        if (existingIx > -1) {\r\n\t            collection[existingIx] = item;\r\n\t            return new http_1.ResponseOptions({\r\n\t                headers: headers,\r\n\t                status: http_status_codes_1.STATUS.NO_CONTENT\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            collection.push(item);\r\n\t            headers.set('Location', resourceUrl + '/' + id);\r\n\t            return new http_1.ResponseOptions({\r\n\t                headers: headers,\r\n\t                body: { data: this.clone(item) },\r\n\t                status: http_status_codes_1.STATUS.CREATED\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.put = function (_a) {\r\n\t        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n\t        var item = JSON.parse(req.text());\r\n\t        if (!id) {\r\n\t            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n\t        }\r\n\t        if (id !== item.id) {\r\n\t            return this.createErrorResponse(http_status_codes_1.STATUS.BAD_REQUEST, \"\\\"\" + collectionName + \"\\\" id does not match item.id\");\r\n\t        }\r\n\t        var existingIx = this.indexOf(collection, id);\r\n\t        if (existingIx > -1) {\r\n\t            collection[existingIx] = item;\r\n\t            return new http_1.ResponseOptions({\r\n\t                headers: headers,\r\n\t                status: http_status_codes_1.STATUS.NO_CONTENT // successful; no content\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            collection.push(item);\r\n\t            return new http_1.ResponseOptions({\r\n\t                body: { data: this.clone(item) },\r\n\t                headers: headers,\r\n\t                status: http_status_codes_1.STATUS.CREATED\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.removeById = function (collection, id) {\r\n\t        var ix = this.indexOf(collection, id);\r\n\t        if (ix > -1) {\r\n\t            collection.splice(ix, 1);\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * Reset the \"database\" to its original state\r\n\t     */\r\n\t    InMemoryBackendService.prototype.resetDb = function () {\r\n\t        this.db = this.seedData.createDb();\r\n\t    };\r\n\t    InMemoryBackendService.prototype.setStatusText = function (options) {\r\n\t        try {\r\n\t            var statusCode = http_status_codes_1.STATUS_CODE_INFO[options.status];\r\n\t            options['statusText'] = statusCode ? statusCode.text : 'Unknown Status';\r\n\t            return options;\r\n\t        }\r\n\t        catch (err) {\r\n\t            return new http_1.ResponseOptions({\r\n\t                status: http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR,\r\n\t                statusText: 'Invalid Server Operation'\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService = __decorate([\r\n\t        __param(0, core_1.Inject(exports.SEED_DATA)),\r\n\t        __param(1, core_1.Inject(InMemoryBackendConfig)),\r\n\t        __param(1, core_1.Optional()), \r\n\t        __metadata('design:paramtypes', [Object, Object])\r\n\t    ], InMemoryBackendService);\r\n\t    return InMemoryBackendService;\r\n\t}());\r\n\texports.InMemoryBackendService = InMemoryBackendService;\r\n\t//# sourceMappingURL=in-memory-backend.service.js.map\n\n/***/ },\n\n/***/ 37:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar AppComponent = (function () {\r\n\t    function AppComponent() {\r\n\t    }\r\n\t    AppComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'my-app',\r\n\t            templateUrl: './app/components/app/app.html',\r\n\t            styleUrls: ['./app/components/app/app.css'],\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], AppComponent);\r\n\t    return AppComponent;\r\n\t}());\r\n\texports.AppComponent = AppComponent;\r\n\t//# sourceMappingURL=app.js.map\n\n/***/ },\n\n/***/ 38:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar authentication_1 = __webpack_require__(39);\r\n\tvar LoginComponent = (function () {\r\n\t    function LoginComponent(_service) {\r\n\t        this._service = _service;\r\n\t        this.user = new authentication_1.User('', '');\r\n\t        this.errorMsg = '';\r\n\t    }\r\n\t    LoginComponent.prototype.login = function () {\r\n\t        if (!this._service.login(this.user)) {\r\n\t            this.errorMsg = 'Failed to login';\r\n\t        }\r\n\t    };\r\n\t    LoginComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'login-form',\r\n\t            providers: [authentication_1.AuthenticationService],\r\n\t            templateUrl: './app/components/login/login.html'\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [authentication_1.AuthenticationService])\r\n\t    ], LoginComponent);\r\n\t    return LoginComponent;\r\n\t}());\r\n\texports.LoginComponent = LoginComponent;\r\n\t//# sourceMappingURL=login.js.map\n\n/***/ },\n\n/***/ 39:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(40);\r\n\tvar User = (function () {\r\n\t    function User(Login, Password) {\r\n\t        this.Login = Login;\r\n\t        this.Password = Password;\r\n\t    }\r\n\t    return User;\r\n\t}());\r\n\texports.User = User;\r\n\tvar users = [\r\n\t    new User('admin@admin.com', 'adm9'),\r\n\t    new User('user1@gmail.com', 'a23')\r\n\t];\r\n\tvar AuthenticationService = (function () {\r\n\t    function AuthenticationService(_router) {\r\n\t        this._router = _router;\r\n\t    }\r\n\t    AuthenticationService.prototype.logout = function () {\r\n\t        localStorage.removeItem(\"user\");\r\n\t        this._router.navigate(['login']);\r\n\t    };\r\n\t    AuthenticationService.prototype.login = function (user) {\r\n\t        var authenticatedUser = users.find(function (u) { return u.Login === user.Login; });\r\n\t        if (authenticatedUser && authenticatedUser.Password === user.Password) {\r\n\t            localStorage.setItem(\"user\", authenticatedUser.toString());\r\n\t            this._router.navigate(['']);\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    AuthenticationService.prototype.checkCredentials = function () {\r\n\t        if (localStorage.getItem(\"user\") === null) {\r\n\t            this._router.navigate(['']);\r\n\t        }\r\n\t    };\r\n\t    AuthenticationService = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [router_1.Router])\r\n\t    ], AuthenticationService);\r\n\t    return AuthenticationService;\r\n\t}());\r\n\texports.AuthenticationService = AuthenticationService;\r\n\t//# sourceMappingURL=authentication.js.map\n\n/***/ },\n\n/***/ 69:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar header_service_1 = __webpack_require__(70);\r\n\t__webpack_require__(73);\r\n\tvar HeaderComponent = (function () {\r\n\t    function HeaderComponent(hs) {\r\n\t        this.hs = hs;\r\n\t    }\r\n\t    HeaderComponent.prototype.ngOnInit = function () {\r\n\t        this.hs.getName().then(function (data) {\r\n\t            console.log(data);\r\n\t            data.forEach(function (element) {\r\n\t                console.log(element.Title);\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    HeaderComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'nk-header',\r\n\t            providers: [header_service_1.HeaderService],\r\n\t            templateUrl: './app/components/header/header.html'\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [header_service_1.HeaderService])\r\n\t    ], HeaderComponent);\r\n\t    return HeaderComponent;\r\n\t}());\r\n\texports.HeaderComponent = HeaderComponent;\r\n\t//# sourceMappingURL=header.js.map\n\n/***/ },\n\n/***/ 70:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(24);\r\n\t__webpack_require__(71);\r\n\tvar HeaderService = (function () {\r\n\t    function HeaderService(http) {\r\n\t        this.http = http;\r\n\t        this.heroesUrl = 'https://api.campus.kpi.ua/Directory/GetFaculties'; // URL to web api\r\n\t    }\r\n\t    HeaderService.prototype.getName = function () {\r\n\t        return this.http.get(this.heroesUrl)\r\n\t            .toPromise()\r\n\t            .then(function (response) { return response.json().Data; })\r\n\t            .catch(this.handleError);\r\n\t    };\r\n\t    HeaderService.prototype.handleError = function (error) {\r\n\t        console.error('An error occurred', error); // for demo purposes only\r\n\t        return Promise.reject(error.message || error);\r\n\t    };\r\n\t    HeaderService = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [http_1.Http])\r\n\t    ], HeaderService);\r\n\t    return HeaderService;\r\n\t}());\r\n\texports.HeaderService = HeaderService;\r\n\t//# sourceMappingURL=header.service.js.map\n\n/***/ },\n\n/***/ 74:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar NavDrawerComponent = (function () {\r\n\t    function NavDrawerComponent() {\r\n\t        var _this = this;\r\n\t        this.handleTouchMove = function (event) {\r\n\t            var diff = parseInt(_this.element.style.left) + parseInt(window.getComputedStyle(_this.element).width);\r\n\t            var posx = parseInt(event.changedTouches[0].clientX);\r\n\t            // console.log(`diff - ${diff}`);\r\n\t            // console.log(`posx - ${posx}`);\r\n\t            /// onOpening \r\n\t            if (_this.touchStartPosX < 50 && posx < _this.element.offsetWidth && _this.isMenuOpen == false && posx > _this.touchStartPosX && parseInt(_this.element.style.left) < 0) {\r\n\t                _this.element.style.left = \"\" + (event.changedTouches[0].clientX - _this.element.offsetWidth - _this.touchStartPosX);\r\n\t                _this.overlay.classList.add('visible');\r\n\t                _this.overlay.style.opacity = \"\" + diff / (parseInt(window.getComputedStyle(_this.element).width) * 2);\r\n\t                console.log(_this.element.style.left);\r\n\t                console.log(\"onOpening\");\r\n\t                _this.isTouchWasOnDrawer = true;\r\n\t            }\r\n\t            ///onClosing\r\n\t            if (posx < parseInt(window.getComputedStyle(_this.element).width) + 10 && _this.isMenuOpen && parseInt(_this.element.style.left) <= 0) {\r\n\t                if (_this.touchStartPosX > parseInt(window.getComputedStyle(_this.element).width)) {\r\n\t                    console.log(\"thth\");\r\n\t                    _this.element.style.left = \"\" + (event.changedTouches[0].clientX - parseInt(window.getComputedStyle(_this.element).width));\r\n\t                }\r\n\t                else {\r\n\t                    _this.element.style.left = \"\" + (-_this.touchStartPosX + event.changedTouches[0].clientX);\r\n\t                }\r\n\t                _this.isTouchWasOnDrawer = true;\r\n\t            }\r\n\t            if (parseInt(_this.element.style.left) > 0) {\r\n\t                _this.element.style.left = '0px';\r\n\t            }\r\n\t        };\r\n\t        this.handleTouchStart = function (event) {\r\n\t            _this.isTouchWasOnDrawer = false;\r\n\t            console.log(_this.element);\r\n\t            _this.element.classList.remove('opened');\r\n\t            _this.element.classList.remove('closed');\r\n\t            _this.element.style.transitionDuration = '';\r\n\t            _this.touchStartPosX = event.changedTouches[0].clientX;\r\n\t            var diff = parseInt(_this.element.style.left) + parseInt(window.getComputedStyle(_this.element).width);\r\n\t            var posx = parseInt(event.changedTouches[0].clientX);\r\n\t            _this.touchStartTime = event.timeStamp;\r\n\t            if (posx < 20) {\r\n\t                _this.element.classList.add('touched');\r\n\t            }\r\n\t        };\r\n\t        this.handleTouchEnd = function (event) {\r\n\t            if (parseInt(_this.element.style.left) > -parseInt(window.getComputedStyle(_this.element).width) / 2) {\r\n\t                _this.element.style.left = \"0px\";\r\n\t                _this.element.classList.add('opened');\r\n\t                _this.element.classList.remove('closed');\r\n\t                _this.isMenuOpen = true;\r\n\t            }\r\n\t            else {\r\n\t                _this.element.style.left = \"\" + -parseInt(window.getComputedStyle(_this.element).width);\r\n\t                _this.element.classList.remove('opened');\r\n\t                _this.element.classList.add('closed');\r\n\t                _this.element.classList.remove('touched');\r\n\t                _this.overlay.classList.remove('visible');\r\n\t                _this.isMenuOpen = false;\r\n\t            }\r\n\t            var diff = parseInt(_this.element.style.left) + parseInt(window.getComputedStyle(_this.element).width);\r\n\t            _this.overlay.style.opacity = \"\" + diff / (parseInt(window.getComputedStyle(_this.element).width) * 2);\r\n\t            console.log(event.timeStamp - _this.touchStartTime);\r\n\t            if (_this.touchStartTime + 100 > event.timeStamp && event.changedTouches[0].clientX > _this.touchStartPosX) {\r\n\t                _this.element.classList.remove('closed');\r\n\t                _this.element.classList.add('opened');\r\n\t                _this.element.style.transitionDuration = \"0.1s\";\r\n\t                _this.element.style.left = '0px';\r\n\t                _this.isMenuOpen = true;\r\n\t            }\r\n\t            if (_this.touchStartTime + 100 > event.timeStamp && event.changedTouches[0].clientX < _this.touchStartPosX) {\r\n\t                _this.element.classList.remove('opened');\r\n\t                _this.element.classList.add('closed');\r\n\t                console.log('closed event');\r\n\t                _this.element.style.transitionDuration = \"0.1s\";\r\n\t                _this.element.style.left = \"\" + -parseInt(window.getComputedStyle(_this.element).width);\r\n\t                _this.isMenuOpen = false;\r\n\t            }\r\n\t            if (_this.touchStartPosX > parseInt(window.getComputedStyle(_this.element).width)\r\n\t                && event.changedTouches[0].clientX > parseInt(window.getComputedStyle(_this.element).width)\r\n\t                && !_this.isTouchWasOnDrawer) {\r\n\t                _this.element.style.left = \"\" + -parseInt(window.getComputedStyle(_this.element).width);\r\n\t                _this.element.classList.remove('opened');\r\n\t                _this.element.classList.add('closed');\r\n\t                _this.element.classList.remove('touched');\r\n\t                _this.overlay.classList.remove('visible');\r\n\t                _this.isMenuOpen = false;\r\n\t            }\r\n\t        };\r\n\t        this.element = document.getElementsByClassName('nav-drawer').item(0);\r\n\t        this.overlay = document.getElementsByClassName('overlay').item(0);\r\n\t    }\r\n\t    NavDrawerComponent.prototype.ngOnInit = function () {\r\n\t        document.addEventListener('touchmove', this.handleTouchMove, false);\r\n\t        document.addEventListener('touchstart', this.handleTouchStart, false);\r\n\t        document.addEventListener('touchend', this.handleTouchEnd, false);\r\n\t    };\r\n\t    NavDrawerComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'nav-drawer',\r\n\t            templateUrl: './app/components/navigation-drawer/navigation-drawer.html',\r\n\t            styleUrls: ['./app/components/navigation-drawer/navigation-drawer.css'],\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], NavDrawerComponent);\r\n\t    return NavDrawerComponent;\r\n\t}());\r\n\texports.NavDrawerComponent = NavDrawerComponent;\r\n\t//# sourceMappingURL=navigation-drawer.js.map\n\n/***/ },\n\n/***/ 75:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar OverlayComponent = (function () {\r\n\t    function OverlayComponent() {\r\n\t    }\r\n\t    OverlayComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'overlay',\r\n\t            templateUrl: './app/components/overlay/overlay.html',\r\n\t            styleUrls: ['./app/components/overlay/overlay.css'],\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], OverlayComponent);\r\n\t    return OverlayComponent;\r\n\t}());\r\n\texports.OverlayComponent = OverlayComponent;\r\n\t//# sourceMappingURL=overlay.js.map\n\n/***/ },\n\n/***/ 76:\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(3), __webpack_require__(22), __webpack_require__(77)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular2-material/core'], factory) :\n\t    (factory((global.md = global.md || {}, global.md.button = global.md.button || {}),global.ng.core,global.ng.common,global.md.core));\n\t}(this, (function (exports,_angular_core,_angular_common,_angular2Material_core) { 'use strict';\n\t\n\tvar __extends = (window && window.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t// TODO(jelbourn): Make the `isMouseDown` stuff done with one global listener.\n\t// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\tvar MdButton = (function () {\n\t    function MdButton(_elementRef, _renderer) {\n\t        this._elementRef = _elementRef;\n\t        this._renderer = _renderer;\n\t        /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */\n\t        this._isKeyboardFocused = false;\n\t        /** Whether a mousedown has occurred on this element in the last 100ms. */\n\t        this._isMouseDown = false;\n\t        /** Whether the ripple effect on click should be disabled. */\n\t        this.disableRipple = false;\n\t    }\n\t    Object.defineProperty(MdButton.prototype, \"color\", {\n\t        get: function () {\n\t            return this._color;\n\t        },\n\t        set: function (value) {\n\t            this._updateColor(value);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    MdButton.prototype._setMousedown = function () {\n\t        var _this = this;\n\t        // We only *show* the focus style when focus has come to the button via the keyboard.\n\t        // The Material Design spec is silent on this topic, and without doing this, the\n\t        // button continues to look :active after clicking.\n\t        // @see http://marcysutton.com/button-focus-hell/\n\t        this._isMouseDown = true;\n\t        setTimeout(function () { _this._isMouseDown = false; }, 100);\n\t    };\n\t    MdButton.prototype._updateColor = function (newColor) {\n\t        this._setElementColor(this._color, false);\n\t        this._setElementColor(newColor, true);\n\t        this._color = newColor;\n\t    };\n\t    MdButton.prototype._setElementColor = function (color, isAdd) {\n\t        if (color != null && color != '') {\n\t            this._renderer.setElementClass(this._elementRef.nativeElement, \"md-\" + color, isAdd);\n\t        }\n\t    };\n\t    MdButton.prototype._setKeyboardFocus = function () {\n\t        this._isKeyboardFocused = !this._isMouseDown;\n\t    };\n\t    MdButton.prototype._removeKeyboardFocus = function () {\n\t        this._isKeyboardFocused = false;\n\t    };\n\t    /** TODO(hansl): e2e test this function. */\n\t    MdButton.prototype.focus = function () {\n\t        this._elementRef.nativeElement.focus();\n\t    };\n\t    MdButton.prototype.getHostElement = function () {\n\t        return this._elementRef.nativeElement;\n\t    };\n\t    MdButton.prototype.isRoundButton = function () {\n\t        var el = this._elementRef.nativeElement;\n\t        return el.hasAttribute('md-icon-button') ||\n\t            el.hasAttribute('md-fab') ||\n\t            el.hasAttribute('md-mini-fab');\n\t    };\n\t    MdButton.prototype.isRippleEnabled = function () {\n\t        return !this.disableRipple;\n\t    };\n\t    __decorate([\n\t        _angular_core.Input(),\n\t        _angular2Material_core.BooleanFieldValue(), \n\t        __metadata('design:type', Boolean)\n\t    ], MdButton.prototype, \"disableRipple\", void 0);\n\t    MdButton = __decorate([\n\t        _angular_core.Component({selector: 'button[md-button], button[md-raised-button], button[md-icon-button], ' +\n\t                'button[md-fab], button[md-mini-fab]',\n\t            inputs: ['color'],\n\t            host: {\n\t                '[class.md-button-focus]': '_isKeyboardFocused',\n\t                '(mousedown)': '_setMousedown()',\n\t                '(focus)': '_setKeyboardFocus()',\n\t                '(blur)': '_removeKeyboardFocus()',\n\t            },\n\t            template: \"<span class=\\\"md-button-wrapper\\\"><ng-content></ng-content></span> \",\n\t            styles: [\"/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\\\"external-card\\\" class=\\\"md-elevation-z2\\\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ /** * This mixin overrides default button styles like the gray background, * the border, and the outline. */ /** Applies a property to an md-button element for each of the supported palettes. */ /** Applies a focus style to an md-button element for each of the supported palettes. */ [md-raised-button], [md-fab], [md-mini-fab], [md-button], [md-icon-button] { box-sizing: border-box; position: relative; background: transparent; cursor: pointer; user-select: none; outline: none; border: none; display: inline-block; white-space: nowrap; text-decoration: none; vertical-align: baseline; font-size: 14px; font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif; font-weight: 500; color: currentColor; text-align: center; margin: 0; min-width: 88px; line-height: 36px; padding: 0 16px; border-radius: 3px; } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab], .md-primary[md-button], .md-primary[md-icon-button] { color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab], .md-accent[md-button], .md-accent[md-icon-button] { color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab], .md-warn[md-button], .md-warn[md-icon-button] { color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-primary[disabled][md-button], .md-primary[disabled][md-icon-button], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-accent[disabled][md-button], .md-accent[disabled][md-icon-button], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], .md-warn[disabled][md-button], .md-warn[disabled][md-icon-button], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab], [disabled][disabled][md-button], [disabled][disabled][md-icon-button] { color: rgba(0, 0, 0, 0.38); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab], [disabled][md-button], [disabled][md-icon-button] { cursor: default; } .md-button-focus[md-raised-button]::after, .md-button-focus[md-fab]::after, .md-button-focus[md-mini-fab]::after, .md-button-focus[md-button]::after, .md-button-focus[md-icon-button]::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } .md-button-focus.md-primary[md-raised-button]::after, .md-button-focus.md-primary[md-fab]::after, .md-button-focus.md-primary[md-mini-fab]::after, .md-button-focus.md-primary[md-button]::after, .md-button-focus.md-primary[md-icon-button]::after { background-color: rgba(0, 150, 136, 0.12); } .md-button-focus.md-accent[md-raised-button]::after, .md-button-focus.md-accent[md-fab]::after, .md-button-focus.md-accent[md-mini-fab]::after, .md-button-focus.md-accent[md-button]::after, .md-button-focus.md-accent[md-icon-button]::after { background-color: rgba(156, 39, 176, 0.12); } .md-button-focus.md-warn[md-raised-button]::after, .md-button-focus.md-warn[md-fab]::after, .md-button-focus.md-warn[md-mini-fab]::after, .md-button-focus.md-warn[md-button]::after, .md-button-focus.md-warn[md-icon-button]::after { background-color: rgba(244, 67, 54, 0.12); } [md-raised-button], [md-fab], [md-mini-fab] { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); background-color: #fafafa; transform: translate3d(0, 0, 0); transition: background 400ms cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { color: white; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { color: rgba(255, 255, 255, 0.870588); } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { color: white; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { color: rgba(0, 0, 0, 0.38); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { background-color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { background-color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { background-color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } [md-raised-button]:active, [md-fab]:active, [md-mini-fab]:active { box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab] { box-shadow: none; } [md-button]:hover::after, [md-icon-button]:hover::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } [md-button]:hover.md-primary::after, [md-icon-button]:hover.md-primary::after { background-color: rgba(0, 150, 136, 0.12); } [md-button]:hover.md-accent::after, [md-icon-button]:hover.md-accent::after { background-color: rgba(156, 39, 176, 0.12); } [md-button]:hover.md-warn::after, [md-icon-button]:hover.md-warn::after { background-color: rgba(244, 67, 54, 0.12); } [md-button][disabled]:hover.md-primary, [md-button][disabled]:hover.md-accent, [md-button][disabled]:hover.md-warn, [md-button][disabled]:hover::after, [md-icon-button][disabled]:hover.md-primary, [md-icon-button][disabled]:hover.md-accent, [md-icon-button][disabled]:hover.md-warn, [md-icon-button][disabled]:hover::after { background-color: transparent; } [md-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 56px; height: 56px; padding: 0; } [md-fab] i, [md-fab] md-icon { padding: 16px 0; } [md-mini-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 40px; height: 40px; padding: 0; } [md-mini-fab] i, [md-mini-fab] md-icon { padding: 8px 0; } [md-icon-button] { min-width: 0; padding: 0; width: 40px; height: 40px; line-height: 24px; border-radius: 50%; } [md-icon-button] .md-button-wrapper > * { vertical-align: middle; } .md-button-ripple { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } .md-button-ripple-round { border-radius: 50%; z-index: 1; } @media screen and (-ms-high-contrast: active) { .md-raised-button, .md-fab, .md-mini-fab { border: 1px solid #fff; } } /*# sourceMappingURL=button.css.map */ \"],\n\t            encapsulation: _angular_core.ViewEncapsulation.None,\n\t            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,\n\t        }), \n\t        __metadata('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])\n\t    ], MdButton);\n\t    return MdButton;\n\t}());\n\tvar MdAnchor = (function (_super) {\n\t    __extends(MdAnchor, _super);\n\t    function MdAnchor(elementRef, renderer) {\n\t        _super.call(this, elementRef, renderer);\n\t        this._disabled = null;\n\t    }\n\t    Object.defineProperty(MdAnchor.prototype, \"tabIndex\", {\n\t        get: function () {\n\t            return this.disabled ? -1 : 0;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(MdAnchor.prototype, \"isAriaDisabled\", {\n\t        get: function () {\n\t            return this.disabled ? 'true' : 'false';\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(MdAnchor.prototype, \"disabled\", {\n\t        get: function () { return this._disabled; },\n\t        set: function (value) {\n\t            // The presence of *any* disabled value makes the component disabled, *except* for false.\n\t            this._disabled = (value != null && value != false) ? true : null;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    MdAnchor.prototype._haltDisabledEvents = function (event) {\n\t        // A disabled button shouldn't apply any actions\n\t        if (this.disabled) {\n\t            event.preventDefault();\n\t            event.stopImmediatePropagation();\n\t        }\n\t    };\n\t    __decorate([\n\t        _angular_core.HostBinding('tabIndex'), \n\t        __metadata('design:type', Number)\n\t    ], MdAnchor.prototype, \"tabIndex\", null);\n\t    __decorate([\n\t        _angular_core.HostBinding('attr.aria-disabled'), \n\t        __metadata('design:type', String)\n\t    ], MdAnchor.prototype, \"isAriaDisabled\", null);\n\t    __decorate([\n\t        _angular_core.HostBinding('attr.disabled'),\n\t        _angular_core.Input('disabled'), \n\t        __metadata('design:type', Object)\n\t    ], MdAnchor.prototype, \"disabled\", null);\n\t    MdAnchor = __decorate([\n\t        _angular_core.Component({selector: 'a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',\n\t            inputs: ['color'],\n\t            host: {\n\t                '[class.md-button-focus]': '_isKeyboardFocused',\n\t                '(mousedown)': '_setMousedown()',\n\t                '(focus)': '_setKeyboardFocus()',\n\t                '(blur)': '_removeKeyboardFocus()',\n\t                '(click)': '_haltDisabledEvents($event)',\n\t            },\n\t            template: \"<span class=\\\"md-button-wrapper\\\"><ng-content></ng-content></span> \",\n\t            styles: [\"/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\\\"external-card\\\" class=\\\"md-elevation-z2\\\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ /** * This mixin overrides default button styles like the gray background, * the border, and the outline. */ /** Applies a property to an md-button element for each of the supported palettes. */ /** Applies a focus style to an md-button element for each of the supported palettes. */ [md-raised-button], [md-fab], [md-mini-fab], [md-button], [md-icon-button] { box-sizing: border-box; position: relative; background: transparent; cursor: pointer; user-select: none; outline: none; border: none; display: inline-block; white-space: nowrap; text-decoration: none; vertical-align: baseline; font-size: 14px; font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif; font-weight: 500; color: currentColor; text-align: center; margin: 0; min-width: 88px; line-height: 36px; padding: 0 16px; border-radius: 3px; } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab], .md-primary[md-button], .md-primary[md-icon-button] { color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab], .md-accent[md-button], .md-accent[md-icon-button] { color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab], .md-warn[md-button], .md-warn[md-icon-button] { color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-primary[disabled][md-button], .md-primary[disabled][md-icon-button], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-accent[disabled][md-button], .md-accent[disabled][md-icon-button], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], .md-warn[disabled][md-button], .md-warn[disabled][md-icon-button], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab], [disabled][disabled][md-button], [disabled][disabled][md-icon-button] { color: rgba(0, 0, 0, 0.38); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab], [disabled][md-button], [disabled][md-icon-button] { cursor: default; } .md-button-focus[md-raised-button]::after, .md-button-focus[md-fab]::after, .md-button-focus[md-mini-fab]::after, .md-button-focus[md-button]::after, .md-button-focus[md-icon-button]::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } .md-button-focus.md-primary[md-raised-button]::after, .md-button-focus.md-primary[md-fab]::after, .md-button-focus.md-primary[md-mini-fab]::after, .md-button-focus.md-primary[md-button]::after, .md-button-focus.md-primary[md-icon-button]::after { background-color: rgba(0, 150, 136, 0.12); } .md-button-focus.md-accent[md-raised-button]::after, .md-button-focus.md-accent[md-fab]::after, .md-button-focus.md-accent[md-mini-fab]::after, .md-button-focus.md-accent[md-button]::after, .md-button-focus.md-accent[md-icon-button]::after { background-color: rgba(156, 39, 176, 0.12); } .md-button-focus.md-warn[md-raised-button]::after, .md-button-focus.md-warn[md-fab]::after, .md-button-focus.md-warn[md-mini-fab]::after, .md-button-focus.md-warn[md-button]::after, .md-button-focus.md-warn[md-icon-button]::after { background-color: rgba(244, 67, 54, 0.12); } [md-raised-button], [md-fab], [md-mini-fab] { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); background-color: #fafafa; transform: translate3d(0, 0, 0); transition: background 400ms cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { color: white; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { color: rgba(255, 255, 255, 0.870588); } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { color: white; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { color: rgba(0, 0, 0, 0.38); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { background-color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { background-color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { background-color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } [md-raised-button]:active, [md-fab]:active, [md-mini-fab]:active { box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab] { box-shadow: none; } [md-button]:hover::after, [md-icon-button]:hover::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } [md-button]:hover.md-primary::after, [md-icon-button]:hover.md-primary::after { background-color: rgba(0, 150, 136, 0.12); } [md-button]:hover.md-accent::after, [md-icon-button]:hover.md-accent::after { background-color: rgba(156, 39, 176, 0.12); } [md-button]:hover.md-warn::after, [md-icon-button]:hover.md-warn::after { background-color: rgba(244, 67, 54, 0.12); } [md-button][disabled]:hover.md-primary, [md-button][disabled]:hover.md-accent, [md-button][disabled]:hover.md-warn, [md-button][disabled]:hover::after, [md-icon-button][disabled]:hover.md-primary, [md-icon-button][disabled]:hover.md-accent, [md-icon-button][disabled]:hover.md-warn, [md-icon-button][disabled]:hover::after { background-color: transparent; } [md-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 56px; height: 56px; padding: 0; } [md-fab] i, [md-fab] md-icon { padding: 16px 0; } [md-mini-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 40px; height: 40px; padding: 0; } [md-mini-fab] i, [md-mini-fab] md-icon { padding: 8px 0; } [md-icon-button] { min-width: 0; padding: 0; width: 40px; height: 40px; line-height: 24px; border-radius: 50%; } [md-icon-button] .md-button-wrapper > * { vertical-align: middle; } .md-button-ripple { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } .md-button-ripple-round { border-radius: 50%; z-index: 1; } @media screen and (-ms-high-contrast: active) { .md-raised-button, .md-fab, .md-mini-fab { border: 1px solid #fff; } } /*# sourceMappingURL=button.css.map */ \"],\n\t            encapsulation: _angular_core.ViewEncapsulation.None\n\t        }), \n\t        __metadata('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])\n\t    ], MdAnchor);\n\t    return MdAnchor;\n\t}(MdButton));\n\tvar MdButtonModule = (function () {\n\t    function MdButtonModule() {\n\t    }\n\t    MdButtonModule.forRoot = function () {\n\t        return {\n\t            ngModule: MdButtonModule,\n\t            providers: []\n\t        };\n\t    };\n\t    MdButtonModule = __decorate([\n\t        _angular_core.NgModule({\n\t            imports: [_angular_common.CommonModule, _angular2Material_core.MdRippleModule],\n\t            exports: [MdButton, MdAnchor],\n\t            declarations: [MdButton, MdAnchor],\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdButtonModule);\n\t    return MdButtonModule;\n\t}());\n\t\n\texports.MdButton = MdButton;\n\texports.MdAnchor = MdAnchor;\n\texports.MdButtonModule = MdButtonModule;\n\t\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n/***/ },\n\n/***/ 77:\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(3), __webpack_require__(77), __webpack_require__(21)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular2-material/core', '@angular/platform-browser'], factory) :\n\t    (factory((global.md = global.md || {}, global.md.core = global.md.core || {}),global.ng.core,global.md.core,global.ng.platformBrowser));\n\t}(this, (function (exports,_angular_core,_angular2Material_core,_angular_platformBrowser) { 'use strict';\n\t\n\tvar __decorate$1 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$1 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/**\n\t * Shared directive to count lines inside a text area, such as a list item.\n\t * Line elements can be extracted with a @ContentChildren(MdLine) query, then\n\t * counted by checking the query list's length.\n\t */\n\tvar MdLine = (function () {\n\t    function MdLine() {\n\t    }\n\t    MdLine = __decorate$1([\n\t        _angular_core.Directive({ selector: '[md-line]' }), \n\t        __metadata$1('design:paramtypes', [])\n\t    ], MdLine);\n\t    return MdLine;\n\t}());\n\t/* Helper that takes a query list of lines and sets the correct class on the host */\n\tvar MdLineSetter = (function () {\n\t    function MdLineSetter(_lines, _renderer, _element) {\n\t        var _this = this;\n\t        this._lines = _lines;\n\t        this._renderer = _renderer;\n\t        this._element = _element;\n\t        this._setLineClass(this._lines.length);\n\t        this._lines.changes.subscribe(function () {\n\t            _this._setLineClass(_this._lines.length);\n\t        });\n\t    }\n\t    MdLineSetter.prototype._setLineClass = function (count) {\n\t        this._resetClasses();\n\t        if (count === 2 || count === 3) {\n\t            this._setClass(\"md-\" + count + \"-line\", true);\n\t        }\n\t    };\n\t    MdLineSetter.prototype._resetClasses = function () {\n\t        this._setClass('md-2-line', false);\n\t        this._setClass('md-3-line', false);\n\t    };\n\t    MdLineSetter.prototype._setClass = function (className, bool) {\n\t        this._renderer.setElementClass(this._element.nativeElement, className, bool);\n\t    };\n\t    return MdLineSetter;\n\t}());\n\tvar MdLineModule = (function () {\n\t    function MdLineModule() {\n\t    }\n\t    MdLineModule = __decorate$1([\n\t        _angular_core.NgModule({\n\t            exports: [MdLine],\n\t            declarations: [MdLine],\n\t        }), \n\t        __metadata$1('design:paramtypes', [])\n\t    ], MdLineModule);\n\t    return MdLineModule;\n\t}());\n\t\n\tvar __decorate$2 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$2 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/**\n\t * Directive to listen to changes of direction of part of the DOM.\n\t *\n\t * Applications should use this directive instead of the native attribute so that Material\n\t * components can listen on changes of direction.\n\t */\n\tvar Dir = (function () {\n\t    function Dir() {\n\t        this._dir = 'ltr';\n\t        this.dirChange = new _angular_core.EventEmitter();\n\t    }\n\t    Object.defineProperty(Dir.prototype, \"dir\", {\n\t        get: function () {\n\t            return this._dir;\n\t        },\n\t        set: function (v) {\n\t            var old = this._dir;\n\t            this._dir = v;\n\t            if (old != this._dir) {\n\t                this.dirChange.emit(null);\n\t            }\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Dir.prototype, \"value\", {\n\t        get: function () { return this.dir; },\n\t        set: function (v) { this.dir = v; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    __decorate$2([\n\t        _angular_core.Input('dir'), \n\t        __metadata$2('design:type', String)\n\t    ], Dir.prototype, \"_dir\", void 0);\n\t    __decorate$2([\n\t        _angular_core.Output(), \n\t        __metadata$2('design:type', Object)\n\t    ], Dir.prototype, \"dirChange\", void 0);\n\t    __decorate$2([\n\t        _angular_core.HostBinding('attr.dir'), \n\t        __metadata$2('design:type', String)\n\t    ], Dir.prototype, \"dir\", null);\n\t    Dir = __decorate$2([\n\t        _angular_core.Directive({\n\t            selector: '[dir]',\n\t            // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n\t            exportAs: '$implicit'\n\t        }), \n\t        __metadata$2('design:paramtypes', [])\n\t    ], Dir);\n\t    return Dir;\n\t}());\n\tvar RtlModule = (function () {\n\t    function RtlModule() {\n\t    }\n\t    RtlModule.forRoot = function () {\n\t        return {\n\t            ngModule: RtlModule,\n\t            providers: []\n\t        };\n\t    };\n\t    RtlModule = __decorate$2([\n\t        _angular_core.NgModule({\n\t            exports: [Dir],\n\t            declarations: [Dir]\n\t        }), \n\t        __metadata$2('design:paramtypes', [])\n\t    ], RtlModule);\n\t    return RtlModule;\n\t}());\n\t\n\t/** TODO: internal */\n\tvar ForegroundRippleState;\n\t(function (ForegroundRippleState) {\n\t    ForegroundRippleState[ForegroundRippleState[\"NEW\"] = 0] = \"NEW\";\n\t    ForegroundRippleState[ForegroundRippleState[\"EXPANDING\"] = 1] = \"EXPANDING\";\n\t    ForegroundRippleState[ForegroundRippleState[\"FADING_OUT\"] = 2] = \"FADING_OUT\";\n\t})(ForegroundRippleState || (ForegroundRippleState = {}));\n\t/**\n\t * Wrapper for a foreground ripple DOM element and its animation state.\n\t * TODO: internal\n\t */\n\tvar ForegroundRipple = (function () {\n\t    function ForegroundRipple(rippleElement) {\n\t        this.rippleElement = rippleElement;\n\t        this.state = ForegroundRippleState.NEW;\n\t    }\n\t    return ForegroundRipple;\n\t}());\n\tvar RIPPLE_SPEED_PX_PER_SECOND = 1000;\n\tvar MIN_RIPPLE_FILL_TIME_SECONDS = 0.1;\n\tvar MAX_RIPPLE_FILL_TIME_SECONDS = 0.3;\n\t/**\n\t * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n\t */\n\tvar distanceToFurthestCorner = function (x, y, rect) {\n\t    var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n\t    var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n\t    return Math.sqrt(distX * distX + distY * distY);\n\t};\n\t/**\n\t * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n\t * The constructor takes a reference to the ripple directive's host element and a map of DOM\n\t * event handlers to be installed on the element that triggers ripple animations.\n\t * This will eventually become a custom renderer once Angular support exists.\n\t * TODO: internal\n\t */\n\tvar RippleRenderer = (function () {\n\t    function RippleRenderer(_elementRef, _eventHandlers) {\n\t        this._eventHandlers = _eventHandlers;\n\t        this._rippleElement = _elementRef.nativeElement;\n\t        // It might be nice to delay creating the background until it's needed, but doing this in\n\t        // fadeInRippleBackground causes the first click event to not be handled reliably.\n\t        this._backgroundDiv = document.createElement('div');\n\t        this._backgroundDiv.classList.add('md-ripple-background');\n\t        this._rippleElement.appendChild(this._backgroundDiv);\n\t    }\n\t    /**\n\t     * Installs event handlers on the given trigger element, and removes event handlers from the\n\t     * previous trigger if needed.\n\t     */\n\t    RippleRenderer.prototype.setTriggerElement = function (newTrigger) {\n\t        var _this = this;\n\t        if (this._triggerElement !== newTrigger) {\n\t            if (this._triggerElement) {\n\t                this._eventHandlers.forEach(function (eventHandler, eventName) {\n\t                    _this._triggerElement.removeEventListener(eventName, eventHandler);\n\t                });\n\t            }\n\t            this._triggerElement = newTrigger;\n\t            if (this._triggerElement) {\n\t                this._eventHandlers.forEach(function (eventHandler, eventName) {\n\t                    _this._triggerElement.addEventListener(eventName, eventHandler);\n\t                });\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Installs event handlers on the host element of the md-ripple directive.\n\t     */\n\t    RippleRenderer.prototype.setTriggerElementToHost = function () {\n\t        this.setTriggerElement(this._rippleElement);\n\t    };\n\t    /**\n\t     * Removes event handlers from the current trigger element if needed.\n\t     */\n\t    RippleRenderer.prototype.clearTriggerElement = function () {\n\t        this.setTriggerElement(null);\n\t    };\n\t    /**\n\t     * Creates a foreground ripple and sets its animation to expand and fade in from the position\n\t     * given by rippleOriginLeft and rippleOriginTop (or from the center of the <md-ripple>\n\t     * bounding rect if centered is true).\n\t     */\n\t    RippleRenderer.prototype.createForegroundRipple = function (rippleOriginLeft, rippleOriginTop, color, centered, radius, speedFactor, transitionEndCallback) {\n\t        var parentRect = this._rippleElement.getBoundingClientRect();\n\t        // Create a foreground ripple div with the size and position of the fully expanded ripple.\n\t        // When the div is created, it's given a transform style that causes the ripple to be displayed\n\t        // small and centered on the event location (or the center of the bounding rect if the centered\n\t        // argument is true). Removing that transform causes the ripple to animate to its natural size.\n\t        var startX = centered ? (parentRect.left + parentRect.width / 2) : rippleOriginLeft;\n\t        var startY = centered ? (parentRect.top + parentRect.height / 2) : rippleOriginTop;\n\t        var offsetX = startX - parentRect.left;\n\t        var offsetY = startY - parentRect.top;\n\t        var maxRadius = radius > 0 ? radius : distanceToFurthestCorner(startX, startY, parentRect);\n\t        var rippleDiv = document.createElement('div');\n\t        this._rippleElement.appendChild(rippleDiv);\n\t        rippleDiv.classList.add('md-ripple-foreground');\n\t        rippleDiv.style.left = (offsetX - maxRadius) + \"px\";\n\t        rippleDiv.style.top = (offsetY - maxRadius) + \"px\";\n\t        rippleDiv.style.width = 2 * maxRadius + \"px\";\n\t        rippleDiv.style.height = rippleDiv.style.width;\n\t        // If color input is not set, this will default to the background color defined in CSS.\n\t        rippleDiv.style.backgroundColor = color;\n\t        // Start the ripple tiny.\n\t        rippleDiv.style.transform = \"scale(0.001)\";\n\t        var fadeInSeconds = (1 / (speedFactor || 1)) * Math.max(MIN_RIPPLE_FILL_TIME_SECONDS, Math.min(MAX_RIPPLE_FILL_TIME_SECONDS, maxRadius / RIPPLE_SPEED_PX_PER_SECOND));\n\t        rippleDiv.style.transitionDuration = fadeInSeconds + \"s\";\n\t        // https://timtaubert.de/blog/2012/09/css-transitions-for-dynamically-created-dom-elements/\n\t        window.getComputedStyle(rippleDiv).opacity;\n\t        rippleDiv.classList.add('md-ripple-fade-in');\n\t        // Clearing the transform property causes the ripple to animate to its full size.\n\t        rippleDiv.style.transform = '';\n\t        var ripple = new ForegroundRipple(rippleDiv);\n\t        ripple.state = ForegroundRippleState.EXPANDING;\n\t        rippleDiv.addEventListener('transitionend', function (event) { return transitionEndCallback(ripple, event); });\n\t    };\n\t    /**\n\t     * Fades out a foreground ripple after it has fully expanded and faded in.\n\t     */\n\t    RippleRenderer.prototype.fadeOutForegroundRipple = function (ripple) {\n\t        ripple.classList.remove('md-ripple-fade-in');\n\t        ripple.classList.add('md-ripple-fade-out');\n\t    };\n\t    /**\n\t     * Removes a foreground ripple from the DOM after it has faded out.\n\t     */\n\t    RippleRenderer.prototype.removeRippleFromDom = function (ripple) {\n\t        ripple.parentElement.removeChild(ripple);\n\t    };\n\t    /**\n\t     * Fades in the ripple background.\n\t     */\n\t    RippleRenderer.prototype.fadeInRippleBackground = function (color) {\n\t        this._backgroundDiv.classList.add('md-ripple-active');\n\t        // If color is not set, this will default to the background color defined in CSS.\n\t        this._backgroundDiv.style.backgroundColor = color;\n\t    };\n\t    /**\n\t     * Fades out the ripple background.\n\t     */\n\t    RippleRenderer.prototype.fadeOutRippleBackground = function () {\n\t        if (this._backgroundDiv) {\n\t            this._backgroundDiv.classList.remove('md-ripple-active');\n\t        }\n\t    };\n\t    return RippleRenderer;\n\t}());\n\t\n\tvar __decorate$3 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$3 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar MdRipple = (function () {\n\t    function MdRipple(_elementRef) {\n\t        var _this = this;\n\t        /**\n\t         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n\t         * will be the distance from the center of the ripple to the furthest corner of the host element's\n\t         * bounding rectangle.\n\t         */\n\t        this.maxRadius = 0;\n\t        /**\n\t         * If set, the normal duration of ripple animations is divided by this value. For example,\n\t         * setting it to 0.5 will cause the animations to take twice as long.\n\t         */\n\t        this.speedFactor = 1;\n\t        // These event handlers are attached to the element that triggers the ripple animations.\n\t        var eventHandlers = new Map();\n\t        eventHandlers.set('mousedown', function (event) { return _this._mouseDown(event); });\n\t        eventHandlers.set('click', function (event) { return _this._click(event); });\n\t        eventHandlers.set('mouseleave', function (event) { return _this._mouseLeave(event); });\n\t        this._rippleRenderer = new RippleRenderer(_elementRef, eventHandlers);\n\t    }\n\t    /** TODO: internal */\n\t    MdRipple.prototype.ngOnInit = function () {\n\t        // If no trigger element was explicity set, use the host element\n\t        if (!this.trigger) {\n\t            this._rippleRenderer.setTriggerElementToHost();\n\t        }\n\t    };\n\t    /** TODO: internal */\n\t    MdRipple.prototype.ngOnDestroy = function () {\n\t        // Remove event listeners on the trigger element.\n\t        this._rippleRenderer.clearTriggerElement();\n\t    };\n\t    /** TODO: internal */\n\t    MdRipple.prototype.ngOnChanges = function (changes) {\n\t        // If the trigger element changed (or is being initially set), add event listeners to it.\n\t        var changedInputs = Object.keys(changes);\n\t        if (changedInputs.indexOf('trigger') !== -1) {\n\t            this._rippleRenderer.setTriggerElement(this.trigger);\n\t        }\n\t    };\n\t    /**\n\t     * Responds to the start of a ripple animation trigger by fading the background in.\n\t     */\n\t    MdRipple.prototype.start = function () {\n\t        this._rippleRenderer.fadeInRippleBackground(this.backgroundColor);\n\t    };\n\t    /**\n\t     * Responds to the end of a ripple animation trigger by fading the background out, and creating a\n\t     * foreground ripple that expands from the event location (or from the center of the element if\n\t     * the \"centered\" property is set or forceCenter is true).\n\t     */\n\t    MdRipple.prototype.end = function (left, top, forceCenter) {\n\t        var _this = this;\n\t        if (forceCenter === void 0) { forceCenter = true; }\n\t        this._rippleRenderer.createForegroundRipple(left, top, this.color, this.centered || forceCenter, this.maxRadius, this.speedFactor, function (ripple, e) { return _this._rippleTransitionEnded(ripple, e); });\n\t        this._rippleRenderer.fadeOutRippleBackground();\n\t    };\n\t    MdRipple.prototype._rippleTransitionEnded = function (ripple, event) {\n\t        if (event.propertyName === 'opacity') {\n\t            // If the ripple finished expanding, start fading it out. If it finished fading out,\n\t            // remove it from the DOM.\n\t            switch (ripple.state) {\n\t                case ForegroundRippleState.EXPANDING:\n\t                    this._rippleRenderer.fadeOutForegroundRipple(ripple.rippleElement);\n\t                    ripple.state = ForegroundRippleState.FADING_OUT;\n\t                    break;\n\t                case ForegroundRippleState.FADING_OUT:\n\t                    this._rippleRenderer.removeRippleFromDom(ripple.rippleElement);\n\t                    break;\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Called when the trigger element receives a mousedown event. Starts the ripple animation by\n\t     * fading in the background.\n\t     */\n\t    MdRipple.prototype._mouseDown = function (event) {\n\t        if (!this.disabled && event.button === 0) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t     * Called when the trigger element receives a click event. Creates a foreground ripple and\n\t     * runs its animation.\n\t     */\n\t    MdRipple.prototype._click = function (event) {\n\t        if (!this.disabled && event.button === 0) {\n\t            // If screen and page positions are all 0, this was probably triggered by a keypress.\n\t            // In that case, use the center of the bounding rect as the ripple origin.\n\t            // FIXME: This fails on IE11, which still sets pageX/Y and screenX/Y on keyboard clicks.\n\t            var isKeyEvent = (event.screenX === 0 && event.screenY === 0 && event.pageX === 0 && event.pageY === 0);\n\t            this.end(event.pageX, event.pageY, isKeyEvent);\n\t        }\n\t    };\n\t    /**\n\t     * Called when the trigger element receives a mouseleave event. Fades out the background.\n\t     */\n\t    MdRipple.prototype._mouseLeave = function (event) {\n\t        // We can always fade out the background here; It's a no-op if it was already inactive.\n\t        this._rippleRenderer.fadeOutRippleBackground();\n\t    };\n\t    __decorate$3([\n\t        _angular_core.Input('md-ripple-trigger'), \n\t        __metadata$3('design:type', Object)\n\t    ], MdRipple.prototype, \"trigger\", void 0);\n\t    __decorate$3([\n\t        _angular_core.Input('md-ripple-centered'), \n\t        __metadata$3('design:type', Boolean)\n\t    ], MdRipple.prototype, \"centered\", void 0);\n\t    __decorate$3([\n\t        _angular_core.Input('md-ripple-disabled'), \n\t        __metadata$3('design:type', Boolean)\n\t    ], MdRipple.prototype, \"disabled\", void 0);\n\t    __decorate$3([\n\t        _angular_core.Input('md-ripple-max-radius'), \n\t        __metadata$3('design:type', Number)\n\t    ], MdRipple.prototype, \"maxRadius\", void 0);\n\t    __decorate$3([\n\t        _angular_core.Input('md-ripple-speed-factor'), \n\t        __metadata$3('design:type', Number)\n\t    ], MdRipple.prototype, \"speedFactor\", void 0);\n\t    __decorate$3([\n\t        _angular_core.Input('md-ripple-color'), \n\t        __metadata$3('design:type', String)\n\t    ], MdRipple.prototype, \"color\", void 0);\n\t    __decorate$3([\n\t        _angular_core.Input('md-ripple-background-color'), \n\t        __metadata$3('design:type', String)\n\t    ], MdRipple.prototype, \"backgroundColor\", void 0);\n\t    __decorate$3([\n\t        _angular_core.HostBinding('class.md-ripple-focused'),\n\t        _angular_core.Input('md-ripple-focused'), \n\t        __metadata$3('design:type', Boolean)\n\t    ], MdRipple.prototype, \"focused\", void 0);\n\t    __decorate$3([\n\t        _angular_core.HostBinding('class.md-ripple-unbounded'),\n\t        _angular_core.Input('md-ripple-unbounded'), \n\t        __metadata$3('design:type', Boolean)\n\t    ], MdRipple.prototype, \"unbounded\", void 0);\n\t    MdRipple = __decorate$3([\n\t        _angular_core.Directive({\n\t            selector: '[md-ripple]',\n\t        }), \n\t        __metadata$3('design:paramtypes', [_angular_core.ElementRef])\n\t    ], MdRipple);\n\t    return MdRipple;\n\t}());\n\tvar MdRippleModule = (function () {\n\t    function MdRippleModule() {\n\t    }\n\t    MdRippleModule.forRoot = function () {\n\t        return {\n\t            ngModule: MdRippleModule,\n\t            providers: []\n\t        };\n\t    };\n\t    MdRippleModule = __decorate$3([\n\t        _angular_core.NgModule({\n\t            exports: [MdRipple],\n\t            declarations: [MdRipple],\n\t        }), \n\t        __metadata$3('design:paramtypes', [])\n\t    ], MdRippleModule);\n\t    return MdRippleModule;\n\t}());\n\t\n\t// TODO(kara): Revisit why error messages are not being properly set.\n\tvar __extends$3 = (window && window.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * Wrapper around Error that sets the error message.\n\t */\n\tvar MdError = (function (_super) {\n\t    __extends$3(MdError, _super);\n\t    function MdError(value) {\n\t        _super.call(this);\n\t        this.message = value;\n\t    }\n\t    return MdError;\n\t}(Error));\n\t\n\tvar __extends$2 = (window && window.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/** Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin. */\n\tvar MdComponentPortalAttachedToDomWithoutOriginError = (function (_super) {\n\t    __extends$2(MdComponentPortalAttachedToDomWithoutOriginError, _super);\n\t    function MdComponentPortalAttachedToDomWithoutOriginError() {\n\t        _super.call(this, 'A ComponentPortal must have an origin set when attached to a DomPortalHost ' +\n\t            'because the DOM element is not part of the Angular application context.');\n\t    }\n\t    return MdComponentPortalAttachedToDomWithoutOriginError;\n\t}(MdError));\n\t/** Exception thrown when attempting to attach a null portal to a host. */\n\tvar MdNullPortalError = (function (_super) {\n\t    __extends$2(MdNullPortalError, _super);\n\t    function MdNullPortalError() {\n\t        _super.call(this, 'Must provide a portal to attach');\n\t    }\n\t    return MdNullPortalError;\n\t}(MdError));\n\t/** Exception thrown when attempting to attach a portal to a host that is already attached. */\n\tvar MdPortalAlreadyAttachedError = (function (_super) {\n\t    __extends$2(MdPortalAlreadyAttachedError, _super);\n\t    function MdPortalAlreadyAttachedError() {\n\t        _super.call(this, 'Host already has a portal attached');\n\t    }\n\t    return MdPortalAlreadyAttachedError;\n\t}(MdError));\n\t/** Exception thrown when attempting to attach a portal to an already-disposed host. */\n\tvar MdPortalHostAlreadyDisposedError = (function (_super) {\n\t    __extends$2(MdPortalHostAlreadyDisposedError, _super);\n\t    function MdPortalHostAlreadyDisposedError() {\n\t        _super.call(this, 'This PortalHost has already been disposed');\n\t    }\n\t    return MdPortalHostAlreadyDisposedError;\n\t}(MdError));\n\t/** Exception thrown when attempting to attach an unknown portal type. */\n\tvar MdUnknownPortalTypeError = (function (_super) {\n\t    __extends$2(MdUnknownPortalTypeError, _super);\n\t    function MdUnknownPortalTypeError() {\n\t        _super.call(this, 'Attempting to attach an unknown Portal type. ' +\n\t            'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');\n\t    }\n\t    return MdUnknownPortalTypeError;\n\t}(MdError));\n\t/** Exception thrown when attempting to attach a portal to a null host. */\n\tvar MdNullPortalHostError = (function (_super) {\n\t    __extends$2(MdNullPortalHostError, _super);\n\t    function MdNullPortalHostError() {\n\t        _super.call(this, 'Attempting to attach a portal to a null PortalHost');\n\t    }\n\t    return MdNullPortalHostError;\n\t}(MdError));\n\t/** Exception thrown when attempting to detach a portal that is not attached. */\n\tvar MdNoPortalAttachedError = (function (_super) {\n\t    __extends$2(MdNoPortalAttachedError, _super);\n\t    function MdNoPortalAttachedError() {\n\t        _super.call(this, 'Attempting to detach a portal that is not attached to a host');\n\t    }\n\t    return MdNoPortalAttachedError;\n\t}(MdError));\n\t\n\tvar __extends$1 = (window && window.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * A `Portal` is something that you want to render somewhere else.\n\t * It can be attach to / detached from a `PortalHost`.\n\t */\n\tvar Portal = (function () {\n\t    function Portal() {\n\t    }\n\t    /** Attach this portal to a host. */\n\t    Portal.prototype.attach = function (host) {\n\t        if (host == null) {\n\t            throw new MdNullPortalHostError();\n\t        }\n\t        if (host.hasAttached()) {\n\t            throw new MdPortalAlreadyAttachedError();\n\t        }\n\t        this._attachedHost = host;\n\t        return host.attach(this);\n\t    };\n\t    /** Detach this portal from its host */\n\t    Portal.prototype.detach = function () {\n\t        var host = this._attachedHost;\n\t        if (host == null) {\n\t            throw new MdNoPortalAttachedError();\n\t        }\n\t        this._attachedHost = null;\n\t        return host.detach();\n\t    };\n\t    Object.defineProperty(Portal.prototype, \"isAttached\", {\n\t        /** Whether this portal is attached to a host. */\n\t        get: function () {\n\t            return this._attachedHost != null;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n\t     * the PortalHost when it is performing an `attach()` or `detatch()`.\n\t     */\n\t    Portal.prototype.setAttachedHost = function (host) {\n\t        this._attachedHost = host;\n\t    };\n\t    return Portal;\n\t}());\n\t/**\n\t * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n\t */\n\tvar ComponentPortal = (function (_super) {\n\t    __extends$1(ComponentPortal, _super);\n\t    function ComponentPortal(component, viewContainerRef, injector) {\n\t        if (viewContainerRef === void 0) { viewContainerRef = null; }\n\t        if (injector === void 0) { injector = null; }\n\t        _super.call(this);\n\t        this.component = component;\n\t        this.viewContainerRef = viewContainerRef;\n\t        this.injector = injector;\n\t    }\n\t    return ComponentPortal;\n\t}(Portal));\n\t/**\n\t * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n\t */\n\tvar TemplatePortal = (function (_super) {\n\t    __extends$1(TemplatePortal, _super);\n\t    function TemplatePortal(template, viewContainerRef) {\n\t        _super.call(this);\n\t        /**\n\t         * Additional locals for the instantiated embedded view.\n\t         * These locals can be seen as \"exports\" for the template, such as how ngFor has\n\t         * index / event / odd.\n\t         * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n\t         */\n\t        this.locals = new Map();\n\t        this.templateRef = template;\n\t        this.viewContainerRef = viewContainerRef;\n\t    }\n\t    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n\t        get: function () {\n\t            return this.templateRef.elementRef;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    TemplatePortal.prototype.attach = function (host, locals) {\n\t        this.locals = locals == null ? new Map() : locals;\n\t        return _super.prototype.attach.call(this, host);\n\t    };\n\t    TemplatePortal.prototype.detach = function () {\n\t        this.locals = new Map();\n\t        return _super.prototype.detach.call(this);\n\t    };\n\t    return TemplatePortal;\n\t}(Portal));\n\t/**\n\t * Partial implementation of PortalHost that only deals with attaching either a\n\t * ComponentPortal or a TemplatePortal.\n\t */\n\tvar BasePortalHost = (function () {\n\t    function BasePortalHost() {\n\t        /** Whether this host has already been permanently disposed. */\n\t        this._isDisposed = false;\n\t    }\n\t    /** Whether this host has an attached portal. */\n\t    BasePortalHost.prototype.hasAttached = function () {\n\t        return this._attachedPortal != null;\n\t    };\n\t    BasePortalHost.prototype.attach = function (portal) {\n\t        if (portal == null) {\n\t            throw new MdNullPortalError();\n\t        }\n\t        if (this.hasAttached()) {\n\t            throw new MdPortalAlreadyAttachedError();\n\t        }\n\t        if (this._isDisposed) {\n\t            throw new MdPortalHostAlreadyDisposedError();\n\t        }\n\t        if (portal instanceof ComponentPortal) {\n\t            this._attachedPortal = portal;\n\t            return this.attachComponentPortal(portal);\n\t        }\n\t        else if (portal instanceof TemplatePortal) {\n\t            this._attachedPortal = portal;\n\t            return this.attachTemplatePortal(portal);\n\t        }\n\t        throw new MdUnknownPortalTypeError();\n\t    };\n\t    BasePortalHost.prototype.detach = function () {\n\t        if (this._attachedPortal) {\n\t            this._attachedPortal.setAttachedHost(null);\n\t        }\n\t        this._attachedPortal = null;\n\t        if (this._disposeFn != null) {\n\t            this._disposeFn();\n\t            this._disposeFn = null;\n\t        }\n\t    };\n\t    BasePortalHost.prototype.dispose = function () {\n\t        if (this.hasAttached()) {\n\t            this.detach();\n\t        }\n\t        this._isDisposed = true;\n\t    };\n\t    BasePortalHost.prototype.setDisposeFn = function (fn) {\n\t        this._disposeFn = fn;\n\t    };\n\t    return BasePortalHost;\n\t}());\n\t\n\tvar __extends = (window && window.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar __decorate$4 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$4 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/**\n\t * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n\t * the directive instance itself can be attached to a host, enabling declarative use of portals.\n\t *\n\t * Usage:\n\t * <template portal #greeting>\n\t *   <p> Hello {{name}} </p>\n\t * </template>\n\t */\n\tvar TemplatePortalDirective = (function (_super) {\n\t    __extends(TemplatePortalDirective, _super);\n\t    function TemplatePortalDirective(templateRef, viewContainerRef) {\n\t        _super.call(this, templateRef, viewContainerRef);\n\t    }\n\t    TemplatePortalDirective = __decorate$4([\n\t        _angular_core.Directive({\n\t            selector: '[portal]',\n\t            exportAs: 'portal',\n\t        }), \n\t        __metadata$4('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])\n\t    ], TemplatePortalDirective);\n\t    return TemplatePortalDirective;\n\t}(TemplatePortal));\n\t/**\n\t * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n\t * directly attached to it, enabling declarative use.\n\t *\n\t * Usage:\n\t * <template [portalHost]=\"greeting\"></template>\n\t */\n\tvar PortalHostDirective = (function (_super) {\n\t    __extends(PortalHostDirective, _super);\n\t    function PortalHostDirective(_componentFactoryResolver, _viewContainerRef) {\n\t        _super.call(this);\n\t        this._componentFactoryResolver = _componentFactoryResolver;\n\t        this._viewContainerRef = _viewContainerRef;\n\t    }\n\t    Object.defineProperty(PortalHostDirective.prototype, \"portal\", {\n\t        get: function () {\n\t            return this._portal;\n\t        },\n\t        set: function (p) {\n\t            this._replaceAttachedPortal(p);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /** Attach the given ComponentPortal to this PortlHost using the ComponentFactoryResolver. */\n\t    PortalHostDirective.prototype.attachComponentPortal = function (portal) {\n\t        portal.setAttachedHost(this);\n\t        // If the portal specifies an origin, use that as the logical location of the component\n\t        // in the application tree. Otherwise use the location of this PortalHost.\n\t        var viewContainerRef = portal.viewContainerRef != null ?\n\t            portal.viewContainerRef :\n\t            this._viewContainerRef;\n\t        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n\t        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);\n\t        this.setDisposeFn(function () { return ref.destroy(); });\n\t        return ref;\n\t    };\n\t    /** Attach the given TemplatePortal to this PortlHost as an embedded View. */\n\t    PortalHostDirective.prototype.attachTemplatePortal = function (portal) {\n\t        var _this = this;\n\t        portal.setAttachedHost(this);\n\t        this._viewContainerRef.createEmbeddedView(portal.templateRef);\n\t        this.setDisposeFn(function () { return _this._viewContainerRef.clear(); });\n\t        // TODO(jelbourn): return locals from view\n\t        return new Map();\n\t    };\n\t    /** Detatches the currently attached Portal (if there is one) and attaches the given Portal. */\n\t    PortalHostDirective.prototype._replaceAttachedPortal = function (p) {\n\t        if (this.hasAttached()) {\n\t            this.detach();\n\t        }\n\t        if (p) {\n\t            this.attach(p);\n\t            this._portal = p;\n\t        }\n\t    };\n\t    PortalHostDirective = __decorate$4([\n\t        _angular_core.Directive({\n\t            selector: '[portalHost]',\n\t            inputs: ['portal: portalHost']\n\t        }), \n\t        __metadata$4('design:paramtypes', [_angular_core.ComponentFactoryResolver, _angular_core.ViewContainerRef])\n\t    ], PortalHostDirective);\n\t    return PortalHostDirective;\n\t}(BasePortalHost));\n\tvar PortalModule = (function () {\n\t    function PortalModule() {\n\t    }\n\t    PortalModule.forRoot = function () {\n\t        return {\n\t            ngModule: PortalModule,\n\t            providers: []\n\t        };\n\t    };\n\t    PortalModule = __decorate$4([\n\t        _angular_core.NgModule({\n\t            exports: [TemplatePortalDirective, PortalHostDirective],\n\t            declarations: [TemplatePortalDirective, PortalHostDirective],\n\t        }), \n\t        __metadata$4('design:paramtypes', [])\n\t    ], PortalModule);\n\t    return PortalModule;\n\t}());\n\t\n\t/**\n\t * OverlayState is a bag of values for either the initial configuration or current state of an\n\t * overlay.\n\t */\n\tvar OverlayState = (function () {\n\t    function OverlayState() {\n\t    }\n\t    return OverlayState;\n\t}());\n\t\n\tvar __extends$4 = (window && window.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n\t * application context.\n\t *\n\t * This is the only part of the portal core that directly touches the DOM.\n\t */\n\tvar DomPortalHost = (function (_super) {\n\t    __extends$4(DomPortalHost, _super);\n\t    function DomPortalHost(_hostDomElement, _componentFactoryResolver) {\n\t        _super.call(this);\n\t        this._hostDomElement = _hostDomElement;\n\t        this._componentFactoryResolver = _componentFactoryResolver;\n\t    }\n\t    /** Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver. */\n\t    DomPortalHost.prototype.attachComponentPortal = function (portal) {\n\t        if (portal.viewContainerRef == null) {\n\t            throw new MdComponentPortalAttachedToDomWithoutOriginError();\n\t        }\n\t        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n\t        var ref = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);\n\t        var hostView = ref.hostView;\n\t        this._hostDomElement.appendChild(hostView.rootNodes[0]);\n\t        this.setDisposeFn(function () { return ref.destroy(); });\n\t        return ref;\n\t    };\n\t    DomPortalHost.prototype.attachTemplatePortal = function (portal) {\n\t        var _this = this;\n\t        var viewContainer = portal.viewContainerRef;\n\t        var viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n\t        viewRef.rootNodes.forEach(function (rootNode) { return _this._hostDomElement.appendChild(rootNode); });\n\t        this.setDisposeFn((function () {\n\t            var index = viewContainer.indexOf(viewRef);\n\t            if (index != -1) {\n\t                viewContainer.remove(index);\n\t            }\n\t        }));\n\t        // TODO(jelbourn): Return locals from view.\n\t        return new Map();\n\t    };\n\t    DomPortalHost.prototype.dispose = function () {\n\t        _super.prototype.dispose.call(this);\n\t        if (this._hostDomElement.parentNode != null) {\n\t            this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n\t        }\n\t    };\n\t    return DomPortalHost;\n\t}(BasePortalHost));\n\t\n\t/**\n\t * Reference to an overlay that has been created with the Overlay service.\n\t * Used to manipulate or dispose of said overlay.\n\t */\n\tvar OverlayRef = (function () {\n\t    function OverlayRef(_portalHost, _pane, _state) {\n\t        this._portalHost = _portalHost;\n\t        this._pane = _pane;\n\t        this._state = _state;\n\t    }\n\t    OverlayRef.prototype.attach = function (portal) {\n\t        var attachResult = this._portalHost.attach(portal);\n\t        this.updatePosition();\n\t        return attachResult;\n\t    };\n\t    OverlayRef.prototype.detach = function () {\n\t        return this._portalHost.detach();\n\t    };\n\t    OverlayRef.prototype.dispose = function () {\n\t        this._portalHost.dispose();\n\t    };\n\t    OverlayRef.prototype.hasAttached = function () {\n\t        return this._portalHost.hasAttached();\n\t    };\n\t    /** Gets the current state config of the overlay. */\n\t    OverlayRef.prototype.getState = function () {\n\t        return this._state;\n\t    };\n\t    /** Updates the position of the overlay based on the position strategy. */\n\t    OverlayRef.prototype.updatePosition = function () {\n\t        if (this._state.positionStrategy) {\n\t            this._state.positionStrategy.apply(this._pane);\n\t        }\n\t    };\n\t    return OverlayRef;\n\t}());\n\t\n\tvar __decorate$8 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$8 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/**\n\t * Simple utility for getting the bounds of the browser viewport.\n\t * TODO: internal\n\t */\n\tvar ViewportRuler = (function () {\n\t    function ViewportRuler() {\n\t    }\n\t    // TODO(jelbourn): cache the document's bounding rect and only update it when the window\n\t    // is resized (debounced).\n\t    /** Gets a ClientRect for the viewport's bounds. */\n\t    ViewportRuler.prototype.getViewportRect = function () {\n\t        // Use the document element's bounding rect rather than the window scroll properties\n\t        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n\t        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n\t        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n\t        // can disagree when the page is pinch-zoomed (on devices that support touch).\n\t        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n\t        // We use the documentElement instead of the body because, by default (without a css reset)\n\t        // browsers typically give the document body an 8px margin, which is not included in\n\t        // getBoundingClientRect().\n\t        var documentRect = document.documentElement.getBoundingClientRect();\n\t        var scrollPosition = this.getViewportScrollPosition(documentRect);\n\t        var height = window.innerHeight;\n\t        var width = window.innerWidth;\n\t        return {\n\t            top: scrollPosition.top,\n\t            left: scrollPosition.left,\n\t            bottom: scrollPosition.top + height,\n\t            right: scrollPosition.left + width,\n\t            height: height,\n\t            width: width,\n\t        };\n\t    };\n\t    /**\n\t     * Gets the (top, left) scroll position of the viewport.\n\t     * @param documentRect\n\t     */\n\t    ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {\n\t        if (documentRect === void 0) { documentRect = document.documentElement.getBoundingClientRect(); }\n\t        // The top-left-corner of the viewport is determined by the scroll position of the document\n\t        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n\t        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n\t        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n\t        // `document.documentElement` works consistently, where the `top` and `left` values will\n\t        // equal negative the scroll position.\n\t        var top = documentRect.top < 0 && document.body.scrollTop == 0 ?\n\t            -documentRect.top :\n\t            document.body.scrollTop;\n\t        var left = documentRect.left < 0 && document.body.scrollLeft == 0 ?\n\t            -documentRect.left :\n\t            document.body.scrollLeft;\n\t        return { top: top, left: left };\n\t    };\n\t    ViewportRuler = __decorate$8([\n\t        _angular_core.Injectable(), \n\t        __metadata$8('design:paramtypes', [])\n\t    ], ViewportRuler);\n\t    return ViewportRuler;\n\t}());\n\t\n\t/** The points of the origin element and the overlay element to connect. */\n\tvar ConnectionPositionPair = (function () {\n\t    function ConnectionPositionPair(origin, overlay) {\n\t        this.originX = origin.originX;\n\t        this.originY = origin.originY;\n\t        this.overlayX = overlay.overlayX;\n\t        this.overlayY = overlay.overlayY;\n\t    }\n\t    return ConnectionPositionPair;\n\t}());\n\t\n\t/**\n\t * A strategy for positioning overlays. Using this strategy, an overlay is given an\n\t * implict position relative some origin element. The relative position is defined in terms of\n\t * a point on the origin element that is connected to a point on the overlay element. For example,\n\t * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n\t * of the overlay.\n\t */\n\tvar ConnectedPositionStrategy = (function () {\n\t    function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {\n\t        this._connectedTo = _connectedTo;\n\t        this._originPos = _originPos;\n\t        this._overlayPos = _overlayPos;\n\t        this._viewportRuler = _viewportRuler;\n\t        // TODO(jelbourn): set RTL to the actual value from the app.\n\t        /** Whether the we're dealing with an RTL context */\n\t        this._isRtl = false;\n\t        /** Ordered list of preferred positions, from most to least desirable. */\n\t        this._preferredPositions = [];\n\t        this._origin = this._connectedTo.nativeElement;\n\t        this.withFallbackPosition(_originPos, _overlayPos);\n\t    }\n\t    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n\t        get: function () {\n\t            return this._preferredPositions;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Updates the position of the overlay element, using whichever preferred position relative\n\t     * to the origin fits on-screen.\n\t     * TODO: internal\n\t     */\n\t    ConnectedPositionStrategy.prototype.apply = function (element) {\n\t        // We need the bounding rects for the origin and the overlay to determine how to position\n\t        // the overlay relative to the origin.\n\t        var originRect = this._origin.getBoundingClientRect();\n\t        var overlayRect = element.getBoundingClientRect();\n\t        // We use the viewport rect to determine whether a position would go off-screen.\n\t        var viewportRect = this._viewportRuler.getViewportRect();\n\t        var firstOverlayPoint = null;\n\t        // We want to place the overlay in the first of the preferred positions such that the\n\t        // overlay fits on-screen.\n\t        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n\t            var pos = _a[_i];\n\t            // Get the (x, y) point of connection on the origin, and then use that to get the\n\t            // (top, left) coordinate for the overlay at `pos`.\n\t            var originPoint = this._getOriginConnectionPoint(originRect, pos);\n\t            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\t            firstOverlayPoint = firstOverlayPoint || overlayPoint;\n\t            // If the overlay in the calculated position fits on-screen, put it there and we're done.\n\t            if (this._willOverlayFitWithinViewport(overlayPoint, overlayRect, viewportRect)) {\n\t                this._setElementPosition(element, overlayPoint);\n\t                return Promise.resolve(null);\n\t            }\n\t        }\n\t        // TODO(jelbourn): fallback behavior for when none of the preferred positions fit on-screen.\n\t        // For now, just stick it in the first position and let it go off-screen.\n\t        this._setElementPosition(element, firstOverlayPoint);\n\t        return Promise.resolve(null);\n\t    };\n\t    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {\n\t        this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n\t        return this;\n\t    };\n\t    /**\n\t     * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n\t     * @param rect\n\t     */\n\t    ConnectedPositionStrategy.prototype._getStartX = function (rect) {\n\t        return this._isRtl ? rect.right : rect.left;\n\t    };\n\t    /**\n\t     * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n\t     * @param rect\n\t     */\n\t    ConnectedPositionStrategy.prototype._getEndX = function (rect) {\n\t        return this._isRtl ? rect.left : rect.right;\n\t    };\n\t    /**\n\t     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n\t     * @param originRect\n\t     * @param pos\n\t     */\n\t    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {\n\t        var originStartX = this._getStartX(originRect);\n\t        var originEndX = this._getEndX(originRect);\n\t        var x;\n\t        if (pos.originX == 'center') {\n\t            x = originStartX + (originRect.width / 2);\n\t        }\n\t        else {\n\t            x = pos.originX == 'start' ? originStartX : originEndX;\n\t        }\n\t        var y;\n\t        if (pos.originY == 'center') {\n\t            y = originRect.top + (originRect.height / 2);\n\t        }\n\t        else {\n\t            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n\t        }\n\t        return { x: x, y: y };\n\t    };\n\t    /**\n\t     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n\t     * origin point to which the overlay should be connected.\n\t     * @param originPoint\n\t     * @param overlayRect\n\t     * @param pos\n\t     */\n\t    ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {\n\t        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n\t        // relative to the origin point.\n\t        var overlayStartX;\n\t        if (pos.overlayX == 'center') {\n\t            overlayStartX = -overlayRect.width / 2;\n\t        }\n\t        else {\n\t            overlayStartX = pos.overlayX == 'start' ? 0 : -overlayRect.width;\n\t        }\n\t        var overlayStartY;\n\t        if (pos.overlayY == 'center') {\n\t            overlayStartY = -overlayRect.height / 2;\n\t        }\n\t        else {\n\t            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n\t        }\n\t        return {\n\t            x: originPoint.x + overlayStartX,\n\t            y: originPoint.y + overlayStartY\n\t        };\n\t    };\n\t    /**\n\t     * Gets whether the overlay positioned at the given point will fit on-screen.\n\t     * @param overlayPoint The top-left coordinate of the overlay.\n\t     * @param overlayRect Bounding rect of the overlay, used to get its size.\n\t     * @param viewportRect The bounding viewport.\n\t     */\n\t    ConnectedPositionStrategy.prototype._willOverlayFitWithinViewport = function (overlayPoint, overlayRect, viewportRect) {\n\t        // TODO(jelbourn): probably also want some space between overlay edge and viewport edge.\n\t        return overlayPoint.x >= viewportRect.left &&\n\t            overlayPoint.x + overlayRect.width <= viewportRect.right &&\n\t            overlayPoint.y >= viewportRect.top &&\n\t            overlayPoint.y + overlayRect.height <= viewportRect.bottom;\n\t    };\n\t    /**\n\t     * Physically positions the overlay element to the given coordinate.\n\t     * @param element\n\t     * @param overlayPoint\n\t     */\n\t    ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayPoint) {\n\t        var scrollPos = this._viewportRuler.getViewportScrollPosition();\n\t        var x = overlayPoint.x + scrollPos.left;\n\t        var y = overlayPoint.y + scrollPos.top;\n\t        // TODO(jelbourn): we don't want to always overwrite the transform property here,\n\t        // because it will need to be used for animations.\n\t        _angular2Material_core.applyCssTransform(element, \"translateX(\" + x + \"px) translateY(\" + y + \"px)\");\n\t    };\n\t    return ConnectedPositionStrategy;\n\t}());\n\t\n\t/**\n\t * A strategy for positioning overlays. Using this strategy, an overlay is given an\n\t * explicit position relative to the browser's viewport.\n\t */\n\tvar GlobalPositionStrategy = (function () {\n\t    function GlobalPositionStrategy() {\n\t        this._cssPosition = 'absolute';\n\t        this._top = '';\n\t        this._bottom = '';\n\t        this._left = '';\n\t        this._right = '';\n\t        /** Array of individual applications of translateX(). Currently only for centering. */\n\t        this._translateX = [];\n\t        /** Array of individual applications of translateY(). Currently only for centering. */\n\t        this._translateY = [];\n\t    }\n\t    /** Sets the element to usee CSS position: fixed */\n\t    GlobalPositionStrategy.prototype.fixed = function () {\n\t        this._cssPosition = 'fixed';\n\t        return this;\n\t    };\n\t    /** Sets the element to usee CSS position: absolute. This is the default. */\n\t    GlobalPositionStrategy.prototype.absolute = function () {\n\t        this._cssPosition = 'absolute';\n\t        return this;\n\t    };\n\t    /** Sets the top position of the overlay. Clears any previously set vertical position. */\n\t    GlobalPositionStrategy.prototype.top = function (value) {\n\t        this._bottom = '';\n\t        this._translateY = [];\n\t        this._top = value;\n\t        return this;\n\t    };\n\t    /** Sets the left position of the overlay. Clears any previously set horizontal position. */\n\t    GlobalPositionStrategy.prototype.left = function (value) {\n\t        this._right = '';\n\t        this._translateX = [];\n\t        this._left = value;\n\t        return this;\n\t    };\n\t    /** Sets the bottom position of the overlay. Clears any previously set vertical position. */\n\t    GlobalPositionStrategy.prototype.bottom = function (value) {\n\t        this._top = '';\n\t        this._translateY = [];\n\t        this._bottom = value;\n\t        return this;\n\t    };\n\t    /** Sets the right position of the overlay. Clears any previously set horizontal position. */\n\t    GlobalPositionStrategy.prototype.right = function (value) {\n\t        this._left = '';\n\t        this._translateX = [];\n\t        this._right = value;\n\t        return this;\n\t    };\n\t    /**\n\t     * Centers the overlay horizontally with an optional offset.\n\t     * Clears any previously set horizontal position.\n\t     */\n\t    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n\t        if (offset === void 0) { offset = '0px'; }\n\t        this._left = '50%';\n\t        this._right = '';\n\t        this._translateX = ['-50%', offset];\n\t        return this;\n\t    };\n\t    /**\n\t     * Centers the overlay vertically with an optional offset.\n\t     * Clears any previously set vertical position.\n\t     */\n\t    GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n\t        if (offset === void 0) { offset = '0px'; }\n\t        this._top = '50%';\n\t        this._bottom = '';\n\t        this._translateY = ['-50%', offset];\n\t        return this;\n\t    };\n\t    /**\n\t     * Apply the position to the element.\n\t     * TODO: internal\n\t     */\n\t    GlobalPositionStrategy.prototype.apply = function (element) {\n\t        element.style.position = this._cssPosition;\n\t        element.style.top = this._top;\n\t        element.style.left = this._left;\n\t        element.style.bottom = this._bottom;\n\t        element.style.right = this._right;\n\t        // TODO(jelbourn): we don't want to always overwrite the transform property here,\n\t        // because it will need to be used for animations.\n\t        var tranlateX = this._reduceTranslateValues('translateX', this._translateX);\n\t        var translateY = this._reduceTranslateValues('translateY', this._translateY);\n\t        _angular2Material_core.applyCssTransform(element, tranlateX + \" \" + translateY);\n\t        return Promise.resolve(null);\n\t    };\n\t    /** Reduce a list of translate values to a string that can be used in the transform property */\n\t    GlobalPositionStrategy.prototype._reduceTranslateValues = function (translateFn, values) {\n\t        return values.map(function (t) { return (translateFn + \"(\" + t + \")\"); }).join(' ');\n\t    };\n\t    return GlobalPositionStrategy;\n\t}());\n\t\n\tvar __decorate$7 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$7 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/** Builder for overlay position strategy. */\n\tvar OverlayPositionBuilder = (function () {\n\t    function OverlayPositionBuilder(_viewportRuler) {\n\t        this._viewportRuler = _viewportRuler;\n\t    }\n\t    /** Creates a global position strategy. */\n\t    OverlayPositionBuilder.prototype.global = function () {\n\t        return new GlobalPositionStrategy();\n\t    };\n\t    /** Creates a relative position strategy. */\n\t    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n\t        return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n\t    };\n\t    OverlayPositionBuilder = __decorate$7([\n\t        _angular_core.Injectable(), \n\t        __metadata$7('design:paramtypes', [ViewportRuler])\n\t    ], OverlayPositionBuilder);\n\t    return OverlayPositionBuilder;\n\t}());\n\t\n\t/**\n\t * The OverlayContainer is the container in which all overlays will load.\n\t * It should be provided in the root component to ensure it is properly shared.\n\t */\n\tvar OverlayContainer = (function () {\n\t    function OverlayContainer() {\n\t    }\n\t    /**\n\t     * This method returns the overlay container element.  It will lazily\n\t     * create the element the first time  it is called to facilitate using\n\t     * the container in non-browser environments.\n\t     * @returns {HTMLElement} the container element\n\t     */\n\t    OverlayContainer.prototype.getContainerElement = function () {\n\t        if (!this._containerElement) {\n\t            this._createContainer();\n\t        }\n\t        return this._containerElement;\n\t    };\n\t    /**\n\t     * Create the overlay container element, which is simply a div\n\t     * with the 'md-overlay-container' class on the document body.\n\t     */\n\t    OverlayContainer.prototype._createContainer = function () {\n\t        var container = document.createElement('div');\n\t        container.classList.add('md-overlay-container');\n\t        document.body.appendChild(container);\n\t        this._containerElement = container;\n\t    };\n\t    return OverlayContainer;\n\t}());\n\t\n\tvar __decorate$6 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$6 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/** Next overlay unique ID. */\n\tvar nextUniqueId = 0;\n\t/** The default state for newly created overlays. */\n\tvar defaultState = new OverlayState();\n\t/**\n\t * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n\t * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n\t * selects, etc. can all be built using overlays. The service should primarily be used by authors\n\t * of re-usable components rather than developers building end-user applications.\n\t *\n\t * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n\t */\n\tvar Overlay = (function () {\n\t    function Overlay(_overlayContainer, _componentFactoryResolver, _positionBuilder) {\n\t        this._overlayContainer = _overlayContainer;\n\t        this._componentFactoryResolver = _componentFactoryResolver;\n\t        this._positionBuilder = _positionBuilder;\n\t    }\n\t    /**\n\t     * Creates an overlay.\n\t     * @param state State to apply to the overlay.\n\t     * @returns A reference to the created overlay.\n\t     */\n\t    Overlay.prototype.create = function (state) {\n\t        if (state === void 0) { state = defaultState; }\n\t        return this._createOverlayRef(this._createPaneElement(), state);\n\t    };\n\t    /**\n\t     * Returns a position builder that can be used, via fluent API,\n\t     * to construct and configure a position strategy.\n\t     */\n\t    Overlay.prototype.position = function () {\n\t        return this._positionBuilder;\n\t    };\n\t    /**\n\t     * Creates the DOM element for an overlay and appends it to the overlay container.\n\t     * @returns Promise resolving to the created element.\n\t     */\n\t    Overlay.prototype._createPaneElement = function () {\n\t        var pane = document.createElement('div');\n\t        pane.id = \"md-overlay-\" + nextUniqueId++;\n\t        pane.classList.add('md-overlay-pane');\n\t        this._overlayContainer.getContainerElement().appendChild(pane);\n\t        return pane;\n\t    };\n\t    /**\n\t     * Create a DomPortalHost into which the overlay content can be loaded.\n\t     * @param pane The DOM element to turn into a portal host.\n\t     * @returns A portal host for the given DOM element.\n\t     */\n\t    Overlay.prototype._createPortalHost = function (pane) {\n\t        return new DomPortalHost(pane, this._componentFactoryResolver);\n\t    };\n\t    /**\n\t     * Creates an OverlayRef for an overlay in the given DOM element.\n\t     * @param pane DOM element for the overlay\n\t     * @param state\n\t     * @returns {OverlayRef}\n\t     */\n\t    Overlay.prototype._createOverlayRef = function (pane, state) {\n\t        return new OverlayRef(this._createPortalHost(pane), pane, state);\n\t    };\n\t    Overlay = __decorate$6([\n\t        _angular_core.Injectable(), \n\t        __metadata$6('design:paramtypes', [OverlayContainer, _angular_core.ComponentFactoryResolver, OverlayPositionBuilder])\n\t    ], Overlay);\n\t    return Overlay;\n\t}());\n\t/** Providers for Overlay and its related injectables. */\n\tvar OVERLAY_PROVIDERS = [\n\t    ViewportRuler,\n\t    OverlayPositionBuilder,\n\t    Overlay,\n\t    OverlayContainer,\n\t];\n\t\n\tvar __decorate$5 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$5 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n\tvar defaultPositionList = [\n\t    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n\t    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n\t];\n\t/**\n\t * Directive applied to an element to make it usable as an origin for an Overlay using a\n\t * ConnectedPositionStrategy.\n\t */\n\tvar OverlayOrigin = (function () {\n\t    function OverlayOrigin(_elementRef) {\n\t        this._elementRef = _elementRef;\n\t    }\n\t    Object.defineProperty(OverlayOrigin.prototype, \"elementRef\", {\n\t        get: function () {\n\t            return this._elementRef;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    OverlayOrigin = __decorate$5([\n\t        _angular_core.Directive({\n\t            selector: '[overlay-origin]',\n\t            exportAs: 'overlayOrigin',\n\t        }), \n\t        __metadata$5('design:paramtypes', [_angular_core.ElementRef])\n\t    ], OverlayOrigin);\n\t    return OverlayOrigin;\n\t}());\n\t/**\n\t * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n\t */\n\tvar ConnectedOverlayDirective = (function () {\n\t    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\t    function ConnectedOverlayDirective(_overlay, templateRef, viewContainerRef) {\n\t        this._overlay = _overlay;\n\t        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n\t    }\n\t    Object.defineProperty(ConnectedOverlayDirective.prototype, \"overlayRef\", {\n\t        get: function () {\n\t            return this._overlayRef;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /** TODO: internal */\n\t    ConnectedOverlayDirective.prototype.ngOnInit = function () {\n\t        this._createOverlay();\n\t    };\n\t    /** TODO: internal */\n\t    ConnectedOverlayDirective.prototype.ngOnDestroy = function () {\n\t        this._destroyOverlay();\n\t    };\n\t    /** Creates an overlay and attaches this directive's template to it. */\n\t    ConnectedOverlayDirective.prototype._createOverlay = function () {\n\t        if (!this.positions || !this.positions.length) {\n\t            this.positions = defaultPositionList;\n\t        }\n\t        var overlayConfig = new OverlayState();\n\t        overlayConfig.positionStrategy =\n\t            this._overlay.position().connectedTo(this.origin.elementRef, { originX: this.positions[0].overlayX, originY: this.positions[0].originY }, { overlayX: this.positions[0].overlayX, overlayY: this.positions[0].overlayY });\n\t        this._overlayRef = this._overlay.create(overlayConfig);\n\t        this._overlayRef.attach(this._templatePortal);\n\t    };\n\t    /** Destroys the overlay created by this directive. */\n\t    ConnectedOverlayDirective.prototype._destroyOverlay = function () {\n\t        this._overlayRef.dispose();\n\t    };\n\t    __decorate$5([\n\t        _angular_core.Input(), \n\t        __metadata$5('design:type', OverlayOrigin)\n\t    ], ConnectedOverlayDirective.prototype, \"origin\", void 0);\n\t    __decorate$5([\n\t        _angular_core.Input(), \n\t        __metadata$5('design:type', Array)\n\t    ], ConnectedOverlayDirective.prototype, \"positions\", void 0);\n\t    ConnectedOverlayDirective = __decorate$5([\n\t        _angular_core.Directive({\n\t            selector: '[connected-overlay]'\n\t        }), \n\t        __metadata$5('design:paramtypes', [Overlay, _angular_core.TemplateRef, _angular_core.ViewContainerRef])\n\t    ], ConnectedOverlayDirective);\n\t    return ConnectedOverlayDirective;\n\t}());\n\tvar OverlayModule = (function () {\n\t    function OverlayModule() {\n\t    }\n\t    OverlayModule.forRoot = function () {\n\t        return {\n\t            ngModule: OverlayModule,\n\t            providers: OVERLAY_PROVIDERS,\n\t        };\n\t    };\n\t    OverlayModule = __decorate$5([\n\t        _angular_core.NgModule({\n\t            imports: [PortalModule],\n\t            exports: [ConnectedOverlayDirective, OverlayOrigin],\n\t            declarations: [ConnectedOverlayDirective, OverlayOrigin],\n\t        }), \n\t        __metadata$5('design:paramtypes', [])\n\t    ], OverlayModule);\n\t    return OverlayModule;\n\t}());\n\t\n\tvar __decorate$9 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$9 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar __param = (window && window.__param) || function (paramIndex, decorator) {\n\t    return function (target, key) { decorator(target, key, paramIndex); }\n\t};\n\tvar LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core.OpaqueToken('mdLiveAnnouncerElement');\n\tvar MdLiveAnnouncer = (function () {\n\t    function MdLiveAnnouncer(elementToken) {\n\t        // We inject the live element as `any` because the constructor signature cannot reference\n\t        // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n\t        // causes TypeScript to preserve the constructor signature types.\n\t        this._liveElement = elementToken || this._createLiveElement();\n\t    }\n\t    /**\n\t     * @param message Message to be announced to the screenreader\n\t     * @param politeness The politeness of the announcer element.\n\t     */\n\t    MdLiveAnnouncer.prototype.announce = function (message, politeness) {\n\t        var _this = this;\n\t        if (politeness === void 0) { politeness = 'polite'; }\n\t        this._liveElement.textContent = '';\n\t        // TODO: ensure changing the politeness works on all environments we support.\n\t        this._liveElement.setAttribute('aria-live', politeness);\n\t        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n\t        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n\t        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n\t        //   second time without clearing and then using a non-zero delay.\n\t        // (using JAWS 17 at time of this writing).\n\t        setTimeout(function () { return _this._liveElement.textContent = message; }, 100);\n\t    };\n\t    MdLiveAnnouncer.prototype._createLiveElement = function () {\n\t        var liveEl = document.createElement('div');\n\t        liveEl.classList.add('md-live-announcer');\n\t        liveEl.setAttribute('aria-atomic', 'true');\n\t        liveEl.setAttribute('aria-live', 'polite');\n\t        document.body.appendChild(liveEl);\n\t        return liveEl;\n\t    };\n\t    MdLiveAnnouncer = __decorate$9([\n\t        _angular_core.Injectable(),\n\t        __param(0, _angular_core.Optional()),\n\t        __param(0, _angular_core.Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)), \n\t        __metadata$9('design:paramtypes', [Object])\n\t    ], MdLiveAnnouncer);\n\t    return MdLiveAnnouncer;\n\t}());\n\t\n\tvar __extends$5 = (window && window.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar __decorate$10 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$10 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/* Adjusts configuration of our gesture library, Hammer. */\n\tvar MdGestureConfig = (function (_super) {\n\t    __extends$5(MdGestureConfig, _super);\n\t    function MdGestureConfig() {\n\t        _super.apply(this, arguments);\n\t        /* List of new event names to add to the gesture support list */\n\t        this.events = [\n\t            'drag',\n\t            'dragstart',\n\t            'dragend',\n\t            'dragright',\n\t            'dragleft',\n\t            'longpress',\n\t            'slide',\n\t            'slidestart',\n\t            'slideend',\n\t            'slideright',\n\t            'slideleft'\n\t        ];\n\t    }\n\t    /*\n\t     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n\t     *\n\t     * Our gesture names come from the Material Design gestures spec:\n\t     * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n\t     *\n\t     * More information on default recognizers can be found in Hammer docs:\n\t     * http://hammerjs.github.io/recognizer-pan/\n\t     * http://hammerjs.github.io/recognizer-press/\n\t     *\n\t     * TODO: Confirm threshold numbers with Material Design UX Team\n\t     * */\n\t    MdGestureConfig.prototype.buildHammer = function (element) {\n\t        var mc = new Hammer(element);\n\t        // Default Hammer Recognizers.\n\t        var pan = new Hammer.Pan();\n\t        var swipe = new Hammer.Swipe();\n\t        var press = new Hammer.Press();\n\t        // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n\t        // Otherwise the previous `recognizeWith` will be dropped.\n\t        var slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);\n\t        var drag = this._createRecognizer(slide, { event: 'drag', threshold: 6 }, swipe);\n\t        var longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });\n\t        // Overwrite the default `pan` event to use the swipe event.\n\t        pan.recognizeWith(swipe);\n\t        // Add customized gestures to Hammer manager\n\t        mc.add([swipe, press, pan, drag, slide, longpress]);\n\t        return mc;\n\t    };\n\t    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n\t    MdGestureConfig.prototype._createRecognizer = function (base, options) {\n\t        var inheritances = [];\n\t        for (var _i = 2; _i < arguments.length; _i++) {\n\t            inheritances[_i - 2] = arguments[_i];\n\t        }\n\t        var recognizer = new base.constructor(options);\n\t        inheritances.push(base);\n\t        inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });\n\t        return recognizer;\n\t    };\n\t    MdGestureConfig = __decorate$10([\n\t        _angular_core.Injectable(), \n\t        __metadata$10('design:paramtypes', [])\n\t    ], MdGestureConfig);\n\t    return MdGestureConfig;\n\t}(_angular_platformBrowser.HammerGestureConfig));\n\t\n\tvar __decorate$11 = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata$11 = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/**\n\t * Class to coordinate unique selection based on name.\n\t * Intended to be consumed as an Angular service.\n\t * This service is needed because native radio change events are only fired on the item currently\n\t * being selected, and we still need to uncheck the previous selection.\n\t *\n\t * This service does not *store* any IDs and names because they may change at any time, so it is\n\t * less error-prone if they are simply passed through when the events occur.\n\t */\n\tvar MdUniqueSelectionDispatcher = (function () {\n\t    function MdUniqueSelectionDispatcher() {\n\t        this._listeners = [];\n\t    }\n\t    /** Notify other items that selection for the given name has been set. */\n\t    MdUniqueSelectionDispatcher.prototype.notify = function (id, name) {\n\t        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\n\t            var listener = _a[_i];\n\t            listener(id, name);\n\t        }\n\t    };\n\t    /** Listen for future changes to item selection. */\n\t    MdUniqueSelectionDispatcher.prototype.listen = function (listener) {\n\t        this._listeners.push(listener);\n\t    };\n\t    MdUniqueSelectionDispatcher = __decorate$11([\n\t        _angular_core.Injectable(), \n\t        __metadata$11('design:paramtypes', [])\n\t    ], MdUniqueSelectionDispatcher);\n\t    return MdUniqueSelectionDispatcher;\n\t}());\n\t\n\t/**\n\t * Applies a CSS transform to an element, including browser-prefixed properties.\n\t * @param element\n\t * @param transformValue\n\t */\n\tfunction applyCssTransform$1(element, transformValue) {\n\t    // It's important to trim the result, because the browser will ignore the set operation\n\t    // if the string contains only whitespace.\n\t    var value = transformValue.trim();\n\t    element.style.transform = value;\n\t    element.style.webkitTransform = value;\n\t}\n\t\n\t/**\n\t * Annotation Factory that allows HTML style boolean attributes. For example,\n\t * a field declared like this:\n\t\n\t * @Directive({ selector: 'component' }) class MyComponent {\n\t *   @Input() @BooleanFieldValueFactory() myField: boolean;\n\t * }\n\t *\n\t * You could set it up this way:\n\t *   <component myField>\n\t * or:\n\t *   <component myField=\"\">\n\t * @deprecated\n\t */\n\tfunction booleanFieldValueFactory() {\n\t    return function booleanFieldValueMetadata(target, key) {\n\t        var defaultValue = target[key];\n\t        var localKey = \"__md_private_symbol_\" + key;\n\t        target[localKey] = defaultValue;\n\t        Object.defineProperty(target, key, {\n\t            get: function () { return this[localKey]; },\n\t            set: function (value) {\n\t                this[localKey] = value != null && \"\" + value !== 'false';\n\t            }\n\t        });\n\t    };\n\t}\n\t\n\t// Due to a bug in the ChromeDriver, Angular 2 keyboard events are not triggered by `sendKeys`\n\t// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n\t// we are temporarily using a single (keydown) handler.\n\t// See: https://github.com/angular/angular/issues/9419\n\tvar UP_ARROW = 38;\n\tvar DOWN_ARROW = 40;\n\tvar RIGHT_ARROW = 39;\n\tvar LEFT_ARROW = 37;\n\tvar ENTER = 13;\n\tvar TAB = 9;\n\t\n\tvar __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar MdCoreModule = (function () {\n\t    function MdCoreModule() {\n\t    }\n\t    MdCoreModule.forRoot = function () {\n\t        return {\n\t            ngModule: MdCoreModule,\n\t            providers: [MdLiveAnnouncer]\n\t        };\n\t    };\n\t    MdCoreModule = __decorate([\n\t        _angular_core.NgModule({\n\t            imports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule],\n\t            exports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule],\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCoreModule);\n\t    return MdCoreModule;\n\t}());\n\t\n\texports.MdCoreModule = MdCoreModule;\n\texports.Dir = Dir;\n\texports.RtlModule = RtlModule;\n\texports.Portal = Portal;\n\texports.BasePortalHost = BasePortalHost;\n\texports.ComponentPortal = ComponentPortal;\n\texports.TemplatePortal = TemplatePortal;\n\texports.PortalHostDirective = PortalHostDirective;\n\texports.TemplatePortalDirective = TemplatePortalDirective;\n\texports.PortalModule = PortalModule;\n\texports.DomPortalHost = DomPortalHost;\n\texports.Overlay = Overlay;\n\texports.OVERLAY_PROVIDERS = OVERLAY_PROVIDERS;\n\texports.OverlayContainer = OverlayContainer;\n\texports.OverlayRef = OverlayRef;\n\texports.OverlayState = OverlayState;\n\texports.ConnectedOverlayDirective = ConnectedOverlayDirective;\n\texports.OverlayOrigin = OverlayOrigin;\n\texports.OverlayModule = OverlayModule;\n\texports.MdGestureConfig = MdGestureConfig;\n\texports.MdRipple = MdRipple;\n\texports.MdRippleModule = MdRippleModule;\n\texports.MdLiveAnnouncer = MdLiveAnnouncer;\n\texports.LIVE_ANNOUNCER_ELEMENT_TOKEN = LIVE_ANNOUNCER_ELEMENT_TOKEN;\n\texports.MdUniqueSelectionDispatcher = MdUniqueSelectionDispatcher;\n\texports.MdLineModule = MdLineModule;\n\texports.MdLine = MdLine;\n\texports.MdLineSetter = MdLineSetter;\n\texports.applyCssTransform = applyCssTransform$1;\n\texports.MdError = MdError;\n\texports.BooleanFieldValue = booleanFieldValueFactory;\n\texports.ConnectedPositionStrategy = ConnectedPositionStrategy;\n\texports.ConnectionPositionPair = ConnectionPositionPair;\n\texports.UP_ARROW = UP_ARROW;\n\texports.DOWN_ARROW = DOWN_ARROW;\n\texports.RIGHT_ARROW = RIGHT_ARROW;\n\texports.LEFT_ARROW = LEFT_ARROW;\n\texports.ENTER = ENTER;\n\texports.TAB = TAB;\n\t\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n/***/ },\n\n/***/ 78:\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(3)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :\n\t    (factory((global.md = global.md || {}, global.md.card = global.md.card || {}),global.ng.core));\n\t}(this, (function (exports,_angular_core) { 'use strict';\n\t\n\tvar __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (window && window.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\t/**\n\t * Content of a card, needed as it's used as a selector in the API.\n\t */\n\tvar MdCardContent = (function () {\n\t    function MdCardContent() {\n\t    }\n\t    MdCardContent = __decorate([\n\t        _angular_core.Directive({\n\t            selector: 'md-card-content'\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCardContent);\n\t    return MdCardContent;\n\t}());\n\t/**\n\t * Title of a card, needed as it's used as a selector in the API.\n\t */\n\tvar MdCardTitle = (function () {\n\t    function MdCardTitle() {\n\t    }\n\t    MdCardTitle = __decorate([\n\t        _angular_core.Directive({\n\t            selector: 'md-card-title'\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCardTitle);\n\t    return MdCardTitle;\n\t}());\n\t/**\n\t * Sub-title of a card, needed as it's used as a selector in the API.\n\t */\n\tvar MdCardSubtitle = (function () {\n\t    function MdCardSubtitle() {\n\t    }\n\t    MdCardSubtitle = __decorate([\n\t        _angular_core.Directive({\n\t            selector: 'md-card-subtitle'\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCardSubtitle);\n\t    return MdCardSubtitle;\n\t}());\n\t/**\n\t * Action section of a card, needed as it's used as a selector in the API.\n\t */\n\tvar MdCardActions = (function () {\n\t    function MdCardActions() {\n\t    }\n\t    MdCardActions = __decorate([\n\t        _angular_core.Directive({\n\t            selector: 'md-card-actions'\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCardActions);\n\t    return MdCardActions;\n\t}());\n\t/*\n\t\n\t<md-card> is a basic content container component that adds the styles of a material design card.\n\t\n\tWhile you can use this component alone,\n\tit also provides a number of preset styles for common card sections, including:\n\t - md-card-title\n\t - md-card-subtitle\n\t - md-card-content\n\t - md-card-actions\n\t - md-card-footer\n\t\n\t You can see some examples of cards here:\n\t http://embed.plnkr.co/s5O4YcyvbLhIApSrIhtj/\n\t\n\t TODO(kara): update link to demo site when it exists\n\t\n\t*/\n\tvar MdCard = (function () {\n\t    function MdCard() {\n\t    }\n\t    MdCard = __decorate([\n\t        _angular_core.Component({selector: 'md-card',\n\t            template: \"<ng-content></ng-content> \",\n\t            styles: [\"/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\\\"external-card\\\" class=\\\"md-elevation-z2\\\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ md-card { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); will-change: box-shadow; display: block; position: relative; padding: 24px; border-radius: 2px; font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif; background: white; color: black; } md-card:hover { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); } .md-card-flat { box-shadow: none; } md-card-title, md-card-subtitle, md-card-content, md-card-actions { display: block; margin-bottom: 16px; } md-card-title { font-size: 24px; font-weight: 400; } md-card-subtitle { font-size: 14px; color: rgba(0, 0, 0, 0.54); } md-card-content { font-size: 14px; } md-card-actions { margin-left: -16px; margin-right: -16px; padding: 8px 0; } md-card-actions[align='end'] { display: flex; justify-content: flex-end; } [md-card-image] { width: calc(100% + 48px); margin: 0 -24px 16px -24px; } [md-card-xl-image] { width: 240px; height: 240px; margin: -8px; } md-card-footer { position: absolute; bottom: 0; } md-card-actions [md-button], md-card-actions [md-raised-button] { margin: 0 4px; } /* HEADER STYLES */ md-card-header { display: flex; flex-direction: row; height: 40px; margin: -8px 0 16px 0; } .md-card-header-text { height: 40px; margin: 0 8px; } [md-card-avatar] { height: 40px; width: 40px; border-radius: 50%; } md-card-header md-card-title { font-size: 14px; } /* TITLE-GROUP STYLES */ [md-card-sm-image], [md-card-md-image], [md-card-lg-image] { margin: -8px 0; } md-card-title-group { display: flex; justify-content: space-between; margin: 0 -8px; } [md-card-sm-image] { width: 80px; height: 80px; } [md-card-md-image] { width: 112px; height: 112px; } [md-card-lg-image] { width: 152px; height: 152px; } /* MEDIA QUERIES */ @media (max-width: 600px) { md-card { padding: 24px 16px; } [md-card-image] { width: calc(100% + 32px); margin: 16px -16px; } md-card-title-group { margin: 0; } [md-card-xl-image] { margin-left: 0; margin-right: 0; } md-card-header { margin: -8px 0 0 0; } } /* FIRST/LAST CHILD ADJUSTMENTS */ md-card > :first-child, md-card-content > :first-child { margin-top: 0; } md-card > :last-child, md-card-content > :last-child { margin-bottom: 0; } [md-card-image]:first-child { margin-top: -24px; } md-card > md-card-actions:last-child { margin-bottom: -16px; padding-bottom: 0; } md-card-actions [md-button]:first-child, md-card-actions [md-raised-button]:first-child { margin-left: 0; margin-right: 0; } md-card-title:not(:first-child), md-card-subtitle:not(:first-child) { margin-top: -4px; } md-card-header md-card-subtitle:not(:first-child) { margin-top: -8px; } md-card > [md-card-xl-image]:first-child { margin-top: -8px; } md-card > [md-card-xl-image]:last-child { margin-bottom: -8px; } /*# sourceMappingURL=card.css.map */ \"],\n\t            encapsulation: _angular_core.ViewEncapsulation.None,\n\t            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCard);\n\t    return MdCard;\n\t}());\n\t/*  The following components don't have any behavior.\n\t They simply use content projection to wrap user content\n\t for flex layout purposes in <md-card> (and thus allow a cleaner, boilerplate-free API).\n\t\n\t\n\t<md-card-header> is a component intended to be used within the <md-card> component.\n\tIt adds styles for a preset header section (i.e. a title, subtitle, and avatar layout).\n\t\n\tYou can see an example of a card with a header here:\n\thttp://embed.plnkr.co/tvJl19z3gZTQd6WmwkIa/\n\t\n\tTODO(kara): update link to demo site when it exists\n\t*/\n\tvar MdCardHeader = (function () {\n\t    function MdCardHeader() {\n\t    }\n\t    MdCardHeader = __decorate([\n\t        _angular_core.Component({selector: 'md-card-header',\n\t            template: \"<ng-content select=\\\"[md-card-avatar]\\\"></ng-content> <div class=\\\"md-card-header-text\\\"> <ng-content select=\\\"md-card-title, md-card-subtitle\\\"></ng-content> </div> <ng-content></ng-content> \",\n\t            encapsulation: _angular_core.ViewEncapsulation.None,\n\t            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCardHeader);\n\t    return MdCardHeader;\n\t}());\n\t/*\n\t\n\t<md-card-title-group> is a component intended to be used within the <md-card> component.\n\tIt adds styles for a preset layout that groups an image with a title section.\n\t\n\tYou can see an example of a card with a title-group section here:\n\thttp://embed.plnkr.co/EDfgCF9eKcXjini1WODm/\n\t\n\tTODO(kara): update link to demo site when it exists\n\t*/\n\tvar MdCardTitleGroup = (function () {\n\t    function MdCardTitleGroup() {\n\t    }\n\t    MdCardTitleGroup = __decorate([\n\t        _angular_core.Component({selector: 'md-card-title-group',\n\t            template: \"<div> <ng-content select=\\\"md-card-title, md-card-subtitle\\\"></ng-content> </div> <ng-content select=\\\"img\\\"></ng-content> <ng-content></ng-content> \",\n\t            encapsulation: _angular_core.ViewEncapsulation.None,\n\t            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCardTitleGroup);\n\t    return MdCardTitleGroup;\n\t}());\n\tvar MdCardModule = (function () {\n\t    function MdCardModule() {\n\t    }\n\t    MdCardModule.forRoot = function () {\n\t        return {\n\t            ngModule: MdCardModule,\n\t            providers: []\n\t        };\n\t    };\n\t    MdCardModule = __decorate([\n\t        _angular_core.NgModule({\n\t            exports: [\n\t                MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n\t                MdCardActions\n\t            ],\n\t            declarations: [\n\t                MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n\t                MdCardActions\n\t            ],\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], MdCardModule);\n\t    return MdCardModule;\n\t}());\n\t\n\texports.MdCardContent = MdCardContent;\n\texports.MdCardTitle = MdCardTitle;\n\texports.MdCardSubtitle = MdCardSubtitle;\n\texports.MdCardActions = MdCardActions;\n\texports.MdCard = MdCard;\n\texports.MdCardHeader = MdCardHeader;\n\texports.MdCardTitleGroup = MdCardTitleGroup;\n\texports.MdCardModule = MdCardModule;\n\t\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n/***/ },\n\n/***/ 79:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar router_1 = __webpack_require__(40);\r\n\tvar login_1 = __webpack_require__(38);\r\n\tvar appRoutes = [\r\n\t    {\r\n\t        path: 'login',\r\n\t        component: login_1.LoginComponent\r\n\t    },\r\n\t    {\r\n\t        path: '',\r\n\t        component: login_1.LoginComponent\r\n\t    }\r\n\t];\r\n\texports.routing = router_1.RouterModule.forRoot(appRoutes);\r\n\t//# sourceMappingURL=app.routing.js.map\n\n/***/ },\n\n/***/ 80:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * @license Angular v2.0.0\n\t * (c) 2010-2016 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(3), __webpack_require__(72), __webpack_require__(4), __webpack_require__(5), __webpack_require__(66)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n\t}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var globalScope;\n\t    if (typeof window === 'undefined') {\n\t        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n\t            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n\t            globalScope = self;\n\t        }\n\t        else {\n\t            globalScope = global;\n\t        }\n\t    }\n\t    else {\n\t        globalScope = window;\n\t    }\n\t    // Need to declare a new variable for global here since TypeScript\n\t    // exports the original value of the symbol.\n\t    var global$1 = globalScope;\n\t    // TODO: remove calls to assert in production environment\n\t    // Note: Can't just export this and import in in other files\n\t    // as `assert` is a reserved keyword in Dart\n\t    global$1.assert = function assert(condition) {\n\t        // TODO: to be fixed properly via #2830, noop for now\n\t    };\n\t    function isPresent(obj) {\n\t        return obj !== undefined && obj !== null;\n\t    }\n\t    function isBlank(obj) {\n\t        return obj === undefined || obj === null;\n\t    }\n\t    function isString(obj) {\n\t        return typeof obj === 'string';\n\t    }\n\t    function isFunction(obj) {\n\t        return typeof obj === 'function';\n\t    }\n\t    function isStringMap(obj) {\n\t        return typeof obj === 'object' && obj !== null;\n\t    }\n\t    function isPromise(obj) {\n\t        // allow any Promise/A+ compliant thenable.\n\t        // It's up to the caller to ensure that obj.then conforms to the spec\n\t        return isPresent(obj) && isFunction(obj.then);\n\t    }\n\t    function isArray(obj) {\n\t        return Array.isArray(obj);\n\t    }\n\t    var StringWrapper = (function () {\n\t        function StringWrapper() {\n\t        }\n\t        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n\t        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n\t        StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n\t        StringWrapper.equals = function (s, s2) { return s === s2; };\n\t        StringWrapper.stripLeft = function (s, charVal) {\n\t            if (s && s.length) {\n\t                var pos = 0;\n\t                for (var i = 0; i < s.length; i++) {\n\t                    if (s[i] != charVal)\n\t                        break;\n\t                    pos++;\n\t                }\n\t                s = s.substring(pos);\n\t            }\n\t            return s;\n\t        };\n\t        StringWrapper.stripRight = function (s, charVal) {\n\t            if (s && s.length) {\n\t                var pos = s.length;\n\t                for (var i = s.length - 1; i >= 0; i--) {\n\t                    if (s[i] != charVal)\n\t                        break;\n\t                    pos--;\n\t                }\n\t                s = s.substring(0, pos);\n\t            }\n\t            return s;\n\t        };\n\t        StringWrapper.replace = function (s, from, replace) {\n\t            return s.replace(from, replace);\n\t        };\n\t        StringWrapper.replaceAll = function (s, from, replace) {\n\t            return s.replace(from, replace);\n\t        };\n\t        StringWrapper.slice = function (s, from, to) {\n\t            if (from === void 0) { from = 0; }\n\t            if (to === void 0) { to = null; }\n\t            return s.slice(from, to === null ? undefined : to);\n\t        };\n\t        StringWrapper.replaceAllMapped = function (s, from, cb) {\n\t            return s.replace(from, function () {\n\t                var matches = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    matches[_i - 0] = arguments[_i];\n\t                }\n\t                // Remove offset & string from the result array\n\t                matches.splice(-2, 2);\n\t                // The callback receives match, p1, ..., pn\n\t                return cb(matches);\n\t            });\n\t        };\n\t        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n\t        StringWrapper.compare = function (a, b) {\n\t            if (a < b) {\n\t                return -1;\n\t            }\n\t            else if (a > b) {\n\t                return 1;\n\t            }\n\t            else {\n\t                return 0;\n\t            }\n\t        };\n\t        return StringWrapper;\n\t    }());\n\t    var NumberWrapper = (function () {\n\t        function NumberWrapper() {\n\t        }\n\t        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n\t        NumberWrapper.equal = function (a, b) { return a === b; };\n\t        NumberWrapper.parseIntAutoRadix = function (text) {\n\t            var result = parseInt(text);\n\t            if (isNaN(result)) {\n\t                throw new Error('Invalid integer literal when parsing ' + text);\n\t            }\n\t            return result;\n\t        };\n\t        NumberWrapper.parseInt = function (text, radix) {\n\t            if (radix == 10) {\n\t                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n\t                    return parseInt(text, radix);\n\t                }\n\t            }\n\t            else if (radix == 16) {\n\t                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n\t                    return parseInt(text, radix);\n\t                }\n\t            }\n\t            else {\n\t                var result = parseInt(text, radix);\n\t                if (!isNaN(result)) {\n\t                    return result;\n\t                }\n\t            }\n\t            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n\t        };\n\t        Object.defineProperty(NumberWrapper, \"NaN\", {\n\t            get: function () { return NaN; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n\t        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n\t        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n\t        return NumberWrapper;\n\t    }());\n\t    // JS has NaN !== NaN\n\t    function looseIdentical(a, b) {\n\t        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n\t    }\n\t    function normalizeBool(obj) {\n\t        return isBlank(obj) ? false : obj;\n\t    }\n\t    function isJsObject(o) {\n\t        return o !== null && (typeof o === 'function' || typeof o === 'object');\n\t    }\n\t    function isPrimitive(obj) {\n\t        return !isJsObject(obj);\n\t    }\n\t    function hasConstructor(value, type) {\n\t        return value.constructor === type;\n\t    }\n\t\n\t    /**\n\t     * Base class for control directives.\n\t     *\n\t     * Only used internally in the forms module.\n\t     *\n\t     * @stable\n\t     */\n\t    var AbstractControlDirective = (function () {\n\t        function AbstractControlDirective() {\n\t        }\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n\t            get: function () { throw new Error('unimplemented'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n\t            get: function () { return isPresent(this.control) ? this.control.value : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n\t            get: function () { return isPresent(this.control) ? this.control.valid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n\t            get: function () { return isPresent(this.control) ? this.control.invalid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n\t            get: function () { return isPresent(this.control) ? this.control.pending : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n\t            get: function () {\n\t                return isPresent(this.control) ? this.control.errors : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n\t            get: function () { return isPresent(this.control) ? this.control.pristine : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n\t            get: function () { return isPresent(this.control) ? this.control.dirty : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n\t            get: function () { return isPresent(this.control) ? this.control.touched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n\t            get: function () { return isPresent(this.control) ? this.control.untouched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n\t            get: function () { return isPresent(this.control) ? this.control.disabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n\t            get: function () { return isPresent(this.control) ? this.control.enabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n\t            get: function () {\n\t                return isPresent(this.control) ? this.control.statusChanges : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n\t            get: function () {\n\t                return isPresent(this.control) ? this.control.valueChanges : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        AbstractControlDirective.prototype.reset = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            if (isPresent(this.control))\n\t                this.control.reset(value);\n\t        };\n\t        return AbstractControlDirective;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * A directive that contains multiple {@link NgControl}s.\n\t     *\n\t     * Only used by the forms module.\n\t     *\n\t     * @stable\n\t     */\n\t    var ControlContainer = (function (_super) {\n\t        __extends$1(ControlContainer, _super);\n\t        function ControlContainer() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n\t            /**\n\t             * Get the form to which this container belongs.\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ControlContainer.prototype, \"path\", {\n\t            /**\n\t             * Get the path to this container.\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ControlContainer;\n\t    }(AbstractControlDirective));\n\t\n\t    var Map$1 = global$1.Map;\n\t    var Set = global$1.Set;\n\t    // Safari and Internet Explorer do not support the iterable parameter to the\n\t    // Map constructor.  We work around that by manually adding the items.\n\t    var createMapFromPairs = (function () {\n\t        try {\n\t            if (new Map$1([[1, 2]]).size === 1) {\n\t                return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n\t            }\n\t        }\n\t        catch (e) {\n\t        }\n\t        return function createMapAndPopulateFromPairs(pairs) {\n\t            var map = new Map$1();\n\t            for (var i = 0; i < pairs.length; i++) {\n\t                var pair = pairs[i];\n\t                map.set(pair[0], pair[1]);\n\t            }\n\t            return map;\n\t        };\n\t    })();\n\t    var createMapFromMap = (function () {\n\t        try {\n\t            if (new Map$1(new Map$1())) {\n\t                return function createMapFromMap(m) { return new Map$1(m); };\n\t            }\n\t        }\n\t        catch (e) {\n\t        }\n\t        return function createMapAndPopulateFromMap(m) {\n\t            var map = new Map$1();\n\t            m.forEach(function (v, k) { map.set(k, v); });\n\t            return map;\n\t        };\n\t    })();\n\t    var _clearValues = (function () {\n\t        if ((new Map$1()).keys().next) {\n\t            return function _clearValues(m) {\n\t                var keyIterator = m.keys();\n\t                var k;\n\t                while (!((k = keyIterator.next()).done)) {\n\t                    m.set(k.value, null);\n\t                }\n\t            };\n\t        }\n\t        else {\n\t            return function _clearValuesWithForeEach(m) {\n\t                m.forEach(function (v, k) { m.set(k, null); });\n\t            };\n\t        }\n\t    })();\n\t    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n\t    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n\t    var _arrayFromMap = (function () {\n\t        try {\n\t            if ((new Map$1()).values().next) {\n\t                return function createArrayFromMap(m, getValues) {\n\t                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n\t                };\n\t            }\n\t        }\n\t        catch (e) {\n\t        }\n\t        return function createArrayFromMapWithForeach(m, getValues) {\n\t            var res = ListWrapper.createFixedSize(m.size), i = 0;\n\t            m.forEach(function (v, k) {\n\t                res[i] = getValues ? v : k;\n\t                i++;\n\t            });\n\t            return res;\n\t        };\n\t    })();\n\t    var MapWrapper = (function () {\n\t        function MapWrapper() {\n\t        }\n\t        MapWrapper.clone = function (m) { return createMapFromMap(m); };\n\t        MapWrapper.createFromStringMap = function (stringMap) {\n\t            var result = new Map$1();\n\t            for (var prop in stringMap) {\n\t                result.set(prop, stringMap[prop]);\n\t            }\n\t            return result;\n\t        };\n\t        MapWrapper.toStringMap = function (m) {\n\t            var r = {};\n\t            m.forEach(function (v, k) { return r[k] = v; });\n\t            return r;\n\t        };\n\t        MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };\n\t        MapWrapper.clearValues = function (m) { _clearValues(m); };\n\t        MapWrapper.iterable = function (m) { return m; };\n\t        MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n\t        MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n\t        return MapWrapper;\n\t    }());\n\t    /**\n\t     * Wraps Javascript Objects\n\t     */\n\t    var StringMapWrapper = (function () {\n\t        function StringMapWrapper() {\n\t        }\n\t        StringMapWrapper.create = function () {\n\t            // Note: We are not using Object.create(null) here due to\n\t            // performance!\n\t            // http://jsperf.com/ng2-object-create-null\n\t            return {};\n\t        };\n\t        StringMapWrapper.contains = function (map, key) {\n\t            return map.hasOwnProperty(key);\n\t        };\n\t        StringMapWrapper.get = function (map, key) {\n\t            return map.hasOwnProperty(key) ? map[key] : undefined;\n\t        };\n\t        StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n\t        StringMapWrapper.keys = function (map) { return Object.keys(map); };\n\t        StringMapWrapper.values = function (map) {\n\t            return Object.keys(map).map(function (k) { return map[k]; });\n\t        };\n\t        StringMapWrapper.isEmpty = function (map) {\n\t            for (var prop in map) {\n\t                return false;\n\t            }\n\t            return true;\n\t        };\n\t        StringMapWrapper.delete = function (map, key) { delete map[key]; };\n\t        StringMapWrapper.forEach = function (map, callback) {\n\t            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                callback(map[k], k);\n\t            }\n\t        };\n\t        StringMapWrapper.merge = function (m1, m2) {\n\t            var m = {};\n\t            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                m[k] = m1[k];\n\t            }\n\t            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n\t                var k = _c[_b];\n\t                m[k] = m2[k];\n\t            }\n\t            return m;\n\t        };\n\t        StringMapWrapper.equals = function (m1, m2) {\n\t            var k1 = Object.keys(m1);\n\t            var k2 = Object.keys(m2);\n\t            if (k1.length != k2.length) {\n\t                return false;\n\t            }\n\t            for (var i = 0; i < k1.length; i++) {\n\t                var key = k1[i];\n\t                if (m1[key] !== m2[key]) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        };\n\t        return StringMapWrapper;\n\t    }());\n\t    var ListWrapper = (function () {\n\t        function ListWrapper() {\n\t        }\n\t        // JS has no way to express a statically fixed size list, but dart does so we\n\t        // keep both methods.\n\t        ListWrapper.createFixedSize = function (size) { return new Array(size); };\n\t        ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n\t        ListWrapper.clone = function (array) { return array.slice(0); };\n\t        ListWrapper.forEachWithIndex = function (array, fn) {\n\t            for (var i = 0; i < array.length; i++) {\n\t                fn(array[i], i);\n\t            }\n\t        };\n\t        ListWrapper.first = function (array) {\n\t            if (!array)\n\t                return null;\n\t            return array[0];\n\t        };\n\t        ListWrapper.last = function (array) {\n\t            if (!array || array.length == 0)\n\t                return null;\n\t            return array[array.length - 1];\n\t        };\n\t        ListWrapper.indexOf = function (array, value, startIndex) {\n\t            if (startIndex === void 0) { startIndex = 0; }\n\t            return array.indexOf(value, startIndex);\n\t        };\n\t        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n\t        ListWrapper.reversed = function (array) {\n\t            var a = ListWrapper.clone(array);\n\t            return a.reverse();\n\t        };\n\t        ListWrapper.concat = function (a, b) { return a.concat(b); };\n\t        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n\t        ListWrapper.removeAt = function (list, index) {\n\t            var res = list[index];\n\t            list.splice(index, 1);\n\t            return res;\n\t        };\n\t        ListWrapper.removeAll = function (list, items) {\n\t            for (var i = 0; i < items.length; ++i) {\n\t                var index = list.indexOf(items[i]);\n\t                list.splice(index, 1);\n\t            }\n\t        };\n\t        ListWrapper.remove = function (list, el) {\n\t            var index = list.indexOf(el);\n\t            if (index > -1) {\n\t                list.splice(index, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        };\n\t        ListWrapper.clear = function (list) { list.length = 0; };\n\t        ListWrapper.isEmpty = function (list) { return list.length == 0; };\n\t        ListWrapper.fill = function (list, value, start, end) {\n\t            if (start === void 0) { start = 0; }\n\t            if (end === void 0) { end = null; }\n\t            list.fill(value, start, end === null ? list.length : end);\n\t        };\n\t        ListWrapper.equals = function (a, b) {\n\t            if (a.length != b.length)\n\t                return false;\n\t            for (var i = 0; i < a.length; ++i) {\n\t                if (a[i] !== b[i])\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t        ListWrapper.slice = function (l, from, to) {\n\t            if (from === void 0) { from = 0; }\n\t            if (to === void 0) { to = null; }\n\t            return l.slice(from, to === null ? undefined : to);\n\t        };\n\t        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n\t        ListWrapper.sort = function (l, compareFn) {\n\t            if (isPresent(compareFn)) {\n\t                l.sort(compareFn);\n\t            }\n\t            else {\n\t                l.sort();\n\t            }\n\t        };\n\t        ListWrapper.toString = function (l) { return l.toString(); };\n\t        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n\t        ListWrapper.maximum = function (list, predicate) {\n\t            if (list.length == 0) {\n\t                return null;\n\t            }\n\t            var solution = null;\n\t            var maxValue = -Infinity;\n\t            for (var index = 0; index < list.length; index++) {\n\t                var candidate = list[index];\n\t                if (isBlank(candidate)) {\n\t                    continue;\n\t                }\n\t                var candidateValue = predicate(candidate);\n\t                if (candidateValue > maxValue) {\n\t                    solution = candidate;\n\t                    maxValue = candidateValue;\n\t                }\n\t            }\n\t            return solution;\n\t        };\n\t        ListWrapper.flatten = function (list) {\n\t            var target = [];\n\t            _flattenArray(list, target);\n\t            return target;\n\t        };\n\t        ListWrapper.addAll = function (list, source) {\n\t            for (var i = 0; i < source.length; i++) {\n\t                list.push(source[i]);\n\t            }\n\t        };\n\t        return ListWrapper;\n\t    }());\n\t    function _flattenArray(source, target) {\n\t        if (isPresent(source)) {\n\t            for (var i = 0; i < source.length; i++) {\n\t                var item = source[i];\n\t                if (isArray(item)) {\n\t                    _flattenArray(item, target);\n\t                }\n\t                else {\n\t                    target.push(item);\n\t                }\n\t            }\n\t        }\n\t        return target;\n\t    }\n\t    // Safari and Internet Explorer do not support the iterable parameter to the\n\t    // Set constructor.  We work around that by manually adding the items.\n\t    var createSetFromList = (function () {\n\t        var test = new Set([1, 2, 3]);\n\t        if (test.size === 3) {\n\t            return function createSetFromList(lst) { return new Set(lst); };\n\t        }\n\t        else {\n\t            return function createSetAndPopulateFromList(lst) {\n\t                var res = new Set(lst);\n\t                if (res.size !== lst.length) {\n\t                    for (var i = 0; i < lst.length; i++) {\n\t                        res.add(lst[i]);\n\t                    }\n\t                }\n\t                return res;\n\t            };\n\t        }\n\t    })();\n\t\n\t    /**\n\t     * Providers for validators to be used for {@link FormControl}s in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n\t     * @stable\n\t     */\n\t    var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n\t    /**\n\t     * Providers for asynchronous validators to be used for {@link FormControl}s\n\t     * in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * See {@link NG_VALIDATORS} for more details.\n\t     *\n\t     * @stable\n\t     */\n\t    var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n\t    /**\n\t     * Provides a set of validators used by form controls.\n\t     *\n\t     * A validator is a function that processes a {@link FormControl} or collection of\n\t     * controls and returns a map of errors. A null map means that validation has passed.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * var loginControl = new FormControl(\"\", Validators.required)\n\t     * ```\n\t     *\n\t     * @stable\n\t     */\n\t    var Validators = (function () {\n\t        function Validators() {\n\t        }\n\t        /**\n\t         * Validator that requires controls to have a non-empty value.\n\t         */\n\t        Validators.required = function (control) {\n\t            return isBlank(control.value) || (isString(control.value) && control.value == '') ?\n\t                { 'required': true } :\n\t                null;\n\t        };\n\t        /**\n\t         * Validator that requires controls to have a value of a minimum length.\n\t         */\n\t        Validators.minLength = function (minLength) {\n\t            return function (control) {\n\t                if (isPresent(Validators.required(control)))\n\t                    return null;\n\t                var v = control.value;\n\t                return v.length < minLength ?\n\t                    { 'minlength': { 'requiredLength': minLength, 'actualLength': v.length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         * Validator that requires controls to have a value of a maximum length.\n\t         */\n\t        Validators.maxLength = function (maxLength) {\n\t            return function (control) {\n\t                if (isPresent(Validators.required(control)))\n\t                    return null;\n\t                var v = control.value;\n\t                return v.length > maxLength ?\n\t                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': v.length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         * Validator that requires a control to match a regex to its value.\n\t         */\n\t        Validators.pattern = function (pattern) {\n\t            return function (control) {\n\t                if (isPresent(Validators.required(control)))\n\t                    return null;\n\t                var regex = new RegExp(\"^\" + pattern + \"$\");\n\t                var v = control.value;\n\t                return regex.test(v) ? null :\n\t                    { 'pattern': { 'requiredPattern': \"^\" + pattern + \"$\", 'actualValue': v } };\n\t            };\n\t        };\n\t        /**\n\t         * No-op validator.\n\t         */\n\t        Validators.nullValidator = function (c) { return null; };\n\t        /**\n\t         * Compose multiple validators into a single function that returns the union\n\t         * of the individual error maps.\n\t         */\n\t        Validators.compose = function (validators) {\n\t            if (isBlank(validators))\n\t                return null;\n\t            var presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                return _mergeErrors(_executeValidators(control, presentValidators));\n\t            };\n\t        };\n\t        Validators.composeAsync = function (validators) {\n\t            if (isBlank(validators))\n\t                return null;\n\t            var presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n\t                return Promise.all(promises).then(_mergeErrors);\n\t            };\n\t        };\n\t        return Validators;\n\t    }());\n\t    function _convertToPromise(obj) {\n\t        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n\t    }\n\t    function _executeValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    function _executeAsyncValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    function _mergeErrors(arrayOfErrors) {\n\t        var res = arrayOfErrors.reduce(function (res, errors) {\n\t            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n\t        }, {});\n\t        return StringMapWrapper.isEmpty(res) ? null : res;\n\t    }\n\t\n\t    /**\n\t     * Used to provide a {@link ControlValueAccessor} for form controls.\n\t     *\n\t     * See {@link DefaultValueAccessor} for how to implement one.\n\t     * @stable\n\t     */\n\t    var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\t\n\t    var CHECKBOX_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The accessor for writing a value and listening to changes on a checkbox input element.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var CheckboxControlValueAccessor = (function () {\n\t        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n\t        };\n\t        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        CheckboxControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n\t                        providers: [CHECKBOX_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        CheckboxControlValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return CheckboxControlValueAccessor;\n\t    }());\n\t\n\t    var DEFAULT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The default accessor for writing a value and listening to changes that is used by the\n\t     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var DefaultValueAccessor = (function () {\n\t        function DefaultValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        DefaultValueAccessor.prototype.writeValue = function (value) {\n\t            var normalizedValue = isBlank(value) ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        DefaultValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n\t                        // TODO: vsavkin replace the above selector with the one below it once\n\t                        // https://github.com/angular/angular/issues/3011 is implemented\n\t                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n\t                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [DEFAULT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        DefaultValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return DefaultValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    function normalizeValidator(validator) {\n\t        if (validator.validate !== undefined) {\n\t            return function (c) { return validator.validate(c); };\n\t        }\n\t        else {\n\t            return validator;\n\t        }\n\t    }\n\t    function normalizeAsyncValidator(validator) {\n\t        if (validator.validate !== undefined) {\n\t            return function (c) { return validator.validate(c); };\n\t        }\n\t        else {\n\t            return validator;\n\t        }\n\t    }\n\t\n\t    var NUMBER_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The accessor for writing a number value and listening to changes that is used by the\n\t     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"number\" [(ngModel)]=\"age\">\n\t     *  ```\n\t     */\n\t    var NumberValueAccessor = (function () {\n\t        function NumberValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        NumberValueAccessor.prototype.writeValue = function (value) {\n\t            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n\t            var normalizedValue = isBlank(value) ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n\t            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n\t        };\n\t        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        NumberValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n\t                        host: {\n\t                            '(change)': 'onChange($event.target.value)',\n\t                            '(input)': 'onChange($event.target.value)',\n\t                            '(blur)': 'onTouched()'\n\t                        },\n\t                        providers: [NUMBER_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NumberValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return NumberValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    function unimplemented() {\n\t        throw new Error('unimplemented');\n\t    }\n\t    /**\n\t     * A base class that all control directive extend.\n\t     * It binds a {@link FormControl} object to a DOM element.\n\t     *\n\t     * Used internally by Angular forms.\n\t     *\n\t     * @stable\n\t     */\n\t    var NgControl = (function (_super) {\n\t        __extends$2(NgControl, _super);\n\t        function NgControl() {\n\t            _super.apply(this, arguments);\n\t            /** @internal */\n\t            this._parent = null;\n\t            this.name = null;\n\t            this.valueAccessor = null;\n\t            /** @internal */\n\t            this._rawValidators = [];\n\t            /** @internal */\n\t            this._rawAsyncValidators = [];\n\t        }\n\t        Object.defineProperty(NgControl.prototype, \"validator\", {\n\t            get: function () { return unimplemented(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n\t            get: function () { return unimplemented(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return NgControl;\n\t    }(AbstractControlDirective));\n\t\n\t    var RADIO_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * Internal class used by Angular to uncheck radio buttons with the matching name.\n\t     */\n\t    var RadioControlRegistry = (function () {\n\t        function RadioControlRegistry() {\n\t            this._accessors = [];\n\t        }\n\t        RadioControlRegistry.prototype.add = function (control, accessor) {\n\t            this._accessors.push([control, accessor]);\n\t        };\n\t        RadioControlRegistry.prototype.remove = function (accessor) {\n\t            var indexToRemove = -1;\n\t            for (var i = 0; i < this._accessors.length; ++i) {\n\t                if (this._accessors[i][1] === accessor) {\n\t                    indexToRemove = i;\n\t                }\n\t            }\n\t            ListWrapper.removeAt(this._accessors, indexToRemove);\n\t        };\n\t        RadioControlRegistry.prototype.select = function (accessor) {\n\t            var _this = this;\n\t            this._accessors.forEach(function (c) {\n\t                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n\t                    c[1].fireUncheck(accessor.value);\n\t                }\n\t            });\n\t        };\n\t        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n\t            if (!controlPair[0].control)\n\t                return false;\n\t            return controlPair[0]._parent === accessor._control._parent &&\n\t                controlPair[1].name === accessor.name;\n\t        };\n\t        RadioControlRegistry.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlRegistry.ctorParameters = [];\n\t        return RadioControlRegistry;\n\t    }());\n\t    /**\n\t     * The accessor for writing a radio control value and listening to changes that is used by the\n\t     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  @Component({\n\t     *    template: `\n\t     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"chicken\">\n\t     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"fish\">\n\t     *    `\n\t     *  })\n\t     *  class FoodCmp {\n\t     *    food = 'chicken';\n\t     *  }\n\t     *  ```\n\t     */\n\t    var RadioControlValueAccessor = (function () {\n\t        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this._registry = _registry;\n\t            this._injector = _injector;\n\t            this.onChange = function () { };\n\t            this.onTouched = function () { };\n\t        }\n\t        RadioControlValueAccessor.prototype.ngOnInit = function () {\n\t            this._control = this._injector.get(NgControl);\n\t            this._checkName();\n\t            this._registry.add(this._control, this);\n\t        };\n\t        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n\t        RadioControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._state = value === this.value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n\t        };\n\t        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this._fn = fn;\n\t            this.onChange = function () {\n\t                fn(_this.value);\n\t                _this._registry.select(_this);\n\t            };\n\t        };\n\t        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n\t        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        RadioControlValueAccessor.prototype._checkName = function () {\n\t            if (this.name && this.formControlName && this.name !== this.formControlName) {\n\t                this._throwNameError();\n\t            }\n\t            if (!this.name && this.formControlName)\n\t                this.name = this.formControlName;\n\t        };\n\t        RadioControlValueAccessor.prototype._throwNameError = function () {\n\t            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n\t        };\n\t        RadioControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n\t                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n\t                        providers: [RADIO_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t            { type: RadioControlRegistry, },\n\t            { type: _angular_core.Injector, },\n\t        ];\n\t        RadioControlValueAccessor.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'formControlName': [{ type: _angular_core.Input },],\n\t            'value': [{ type: _angular_core.Input },],\n\t        };\n\t        return RadioControlValueAccessor;\n\t    }());\n\t\n\t    var SELECT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    function _buildValueString(id, value) {\n\t        if (isBlank(id))\n\t            return \"\" + value;\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return StringWrapper.slice(id + \": \" + value, 0, 50);\n\t    }\n\t    function _extractId(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     * The accessor for writing a value and listening to changes on a select element.\n\t     *\n\t     * Note: We have to listen to the 'change' event because 'input' events aren't fired\n\t     * for selects in Firefox and IE:\n\t     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n\t     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n\t     *\n\t     * @stable\n\t     */\n\t    var SelectControlValueAccessor = (function () {\n\t        function SelectControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        SelectControlValueAccessor.prototype.writeValue = function (value) {\n\t            this.value = value;\n\t            var valueString = _buildValueString(this._getOptionId(value), value);\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n\t        };\n\t        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (valueString) {\n\t                _this.value = valueString;\n\t                fn(_this._getOptionValue(valueString));\n\t            };\n\t        };\n\t        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /** @internal */\n\t        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n\t        /** @internal */\n\t        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id), value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /** @internal */\n\t        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var value = this._optionMap.get(_extractId(valueString));\n\t            return isPresent(value) ? value : valueString;\n\t        };\n\t        SelectControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectControlValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return SelectControlValueAccessor;\n\t    }());\n\t    /**\n\t     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <select name=\"city\" ngModel>\n\t     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n\t     * </select>\n\t     * ```\n\t     *\n\t     * @stable\n\t     */\n\t    var NgSelectOption = (function () {\n\t        function NgSelectOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (isPresent(this._select))\n\t                this.id = this._select._registerOption();\n\t        }\n\t        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._select._optionMap.set(this.id, value);\n\t                this._setElementValue(_buildValueString(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n\t            set: function (value) {\n\t                this._setElementValue(value);\n\t                if (isPresent(this._select))\n\t                    this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        NgSelectOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        NgSelectOption.prototype.ngOnDestroy = function () {\n\t            if (isPresent(this._select)) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectOption.ctorParameters = [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ];\n\t        NgSelectOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectOption;\n\t    }());\n\t\n\t    var SELECT_MULTIPLE_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    function _buildValueString$1(id, value) {\n\t        if (isBlank(id))\n\t            return \"\" + value;\n\t        if (isString(value))\n\t            value = \"'\" + value + \"'\";\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return StringWrapper.slice(id + \": \" + value, 0, 50);\n\t    }\n\t    function _extractId$1(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     * The accessor for writing a value and listening to changes on a select element.\n\t     *\n\t     * @stable\n\t     */\n\t    var SelectMultipleControlValueAccessor = (function () {\n\t        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n\t            var _this = this;\n\t            this.value = value;\n\t            if (value == null)\n\t                return;\n\t            var values = value;\n\t            // convert values to ids\n\t            var ids = values.map(function (v) { return _this._getOptionId(v); });\n\t            this._optionMap.forEach(function (opt, o) { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n\t        };\n\t        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (_) {\n\t                var selected = [];\n\t                if (_.hasOwnProperty('selectedOptions')) {\n\t                    var options = _.selectedOptions;\n\t                    for (var i = 0; i < options.length; i++) {\n\t                        var opt = options.item(i);\n\t                        var val = _this._getOptionValue(opt.value);\n\t                        selected.push(val);\n\t                    }\n\t                }\n\t                else {\n\t                    var options = _.options;\n\t                    for (var i = 0; i < options.length; i++) {\n\t                        var opt = options.item(i);\n\t                        if (opt.selected) {\n\t                            var val = _this._getOptionValue(opt.value);\n\t                            selected.push(val);\n\t                        }\n\t                    }\n\t                }\n\t                fn(selected);\n\t            };\n\t        };\n\t        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /** @internal */\n\t        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n\t            var id = (this._idCounter++).toString();\n\t            this._optionMap.set(id, value);\n\t            return id;\n\t        };\n\t        /** @internal */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id)._value, value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /** @internal */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var opt = this._optionMap.get(_extractId$1(valueString));\n\t            return isPresent(opt) ? opt._value : valueString;\n\t        };\n\t        SelectMultipleControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectMultipleControlValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return SelectMultipleControlValueAccessor;\n\t    }());\n\t    /**\n\t     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <select multiple name=\"city\" ngModel>\n\t     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n\t     * </select>\n\t     * ```\n\t     */\n\t    var NgSelectMultipleOption = (function () {\n\t        function NgSelectMultipleOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (isPresent(this._select)) {\n\t                this.id = this._select._registerOption(this);\n\t            }\n\t        }\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._value = value;\n\t                this._setElementValue(_buildValueString$1(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n\t            set: function (value) {\n\t                if (isPresent(this._select)) {\n\t                    this._value = value;\n\t                    this._setElementValue(_buildValueString$1(this.id, value));\n\t                    this._select.writeValue(this._select.value);\n\t                }\n\t                else {\n\t                    this._setElementValue(value);\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        /** @internal */\n\t        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n\t        };\n\t        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n\t            if (isPresent(this._select)) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectMultipleOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectMultipleOption.ctorParameters = [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ];\n\t        NgSelectMultipleOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectMultipleOption;\n\t    }());\n\t\n\t    function controlPath(name, parent) {\n\t        var p = ListWrapper.clone(parent.path);\n\t        p.push(name);\n\t        return p;\n\t    }\n\t    function setUpControl(control, dir) {\n\t        if (isBlank(control))\n\t            _throwError(dir, 'Cannot find control with');\n\t        if (isBlank(dir.valueAccessor))\n\t            _throwError(dir, 'No value accessor for form control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t        dir.valueAccessor.writeValue(control.value);\n\t        // view -> model\n\t        dir.valueAccessor.registerOnChange(function (newValue) {\n\t            dir.viewToModelUpdate(newValue);\n\t            control.markAsDirty();\n\t            control.setValue(newValue, { emitModelToViewChange: false });\n\t        });\n\t        // touched\n\t        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n\t        control.registerOnChange(function (newValue, emitModelEvent) {\n\t            // control -> view\n\t            dir.valueAccessor.writeValue(newValue);\n\t            // control -> ngModel\n\t            if (emitModelEvent)\n\t                dir.viewToModelUpdate(newValue);\n\t        });\n\t        if (dir.valueAccessor.setDisabledState) {\n\t            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n\t        }\n\t        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n\t        dir._rawValidators.forEach(function (validator) {\n\t            if (validator.registerOnValidatorChange)\n\t                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t        dir._rawAsyncValidators.forEach(function (validator) {\n\t            if (validator.registerOnValidatorChange)\n\t                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t    }\n\t    function cleanUpControl(control, dir) {\n\t        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n\t        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n\t        dir._rawValidators.forEach(function (validator) { return validator.registerOnValidatorChange(null); });\n\t        dir._rawAsyncValidators.forEach(function (validator) { return validator.registerOnValidatorChange(null); });\n\t        if (control)\n\t            control._clearChangeFns();\n\t    }\n\t    function setUpFormContainer(control, dir) {\n\t        if (isBlank(control))\n\t            _throwError(dir, 'Cannot find control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t    }\n\t    function _noControlError(dir) {\n\t        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n\t    }\n\t    function _throwError(dir, message) {\n\t        var messageEnd;\n\t        if (dir.path.length > 1) {\n\t            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n\t        }\n\t        else if (dir.path[0]) {\n\t            messageEnd = \"name: '\" + dir.path + \"'\";\n\t        }\n\t        else {\n\t            messageEnd = 'unspecified name attribute';\n\t        }\n\t        throw new Error(message + \" \" + messageEnd);\n\t    }\n\t    function composeValidators(validators) {\n\t        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n\t    }\n\t    function composeAsyncValidators(validators) {\n\t        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n\t            null;\n\t    }\n\t    function isPropertyUpdated(changes, viewModel) {\n\t        if (!StringMapWrapper.contains(changes, 'model'))\n\t            return false;\n\t        var change = changes['model'];\n\t        if (change.isFirstChange())\n\t            return true;\n\t        return !looseIdentical(viewModel, change.currentValue);\n\t    }\n\t    function isBuiltInAccessor(valueAccessor) {\n\t        return (hasConstructor(valueAccessor, CheckboxControlValueAccessor) ||\n\t            hasConstructor(valueAccessor, NumberValueAccessor) ||\n\t            hasConstructor(valueAccessor, SelectControlValueAccessor) ||\n\t            hasConstructor(valueAccessor, SelectMultipleControlValueAccessor) ||\n\t            hasConstructor(valueAccessor, RadioControlValueAccessor));\n\t    }\n\t    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n\t    function selectValueAccessor(dir, valueAccessors) {\n\t        if (isBlank(valueAccessors))\n\t            return null;\n\t        var defaultAccessor;\n\t        var builtinAccessor;\n\t        var customAccessor;\n\t        valueAccessors.forEach(function (v) {\n\t            if (hasConstructor(v, DefaultValueAccessor)) {\n\t                defaultAccessor = v;\n\t            }\n\t            else if (isBuiltInAccessor(v)) {\n\t                if (isPresent(builtinAccessor))\n\t                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n\t                builtinAccessor = v;\n\t            }\n\t            else {\n\t                if (isPresent(customAccessor))\n\t                    _throwError(dir, 'More than one custom value accessor matches form control with');\n\t                customAccessor = v;\n\t            }\n\t        });\n\t        if (isPresent(customAccessor))\n\t            return customAccessor;\n\t        if (isPresent(builtinAccessor))\n\t            return builtinAccessor;\n\t        if (isPresent(defaultAccessor))\n\t            return defaultAccessor;\n\t        _throwError(dir, 'No valid value accessor for form control with');\n\t        return null;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n\t     *\n\t     * @stable\n\t     */\n\t    var AbstractFormGroupDirective = (function (_super) {\n\t        __extends(AbstractFormGroupDirective, _super);\n\t        function AbstractFormGroupDirective() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormGroup(this);\n\t        };\n\t        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormGroup(this);\n\t            }\n\t        };\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n\t            /**\n\t             * Get the {@link FormGroup} backing this binding.\n\t             */\n\t            get: function () { return this.formDirective.getFormGroup(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n\t            /**\n\t             * Get the path to this control group.\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n\t            /**\n\t             * Get the {@link Form} to which this group belongs.\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n\t        return AbstractFormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var AbstractControlStatus = (function () {\n\t        function AbstractControlStatus(cd) {\n\t            this._cd = cd;\n\t        }\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.untouched : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.touched : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.pristine : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.dirty : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.valid : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.invalid : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AbstractControlStatus;\n\t    }());\n\t    var ngControlStatusHost = {\n\t        '[class.ng-untouched]': 'ngClassUntouched',\n\t        '[class.ng-touched]': 'ngClassTouched',\n\t        '[class.ng-pristine]': 'ngClassPristine',\n\t        '[class.ng-dirty]': 'ngClassDirty',\n\t        '[class.ng-valid]': 'ngClassValid',\n\t        '[class.ng-invalid]': 'ngClassInvalid'\n\t    };\n\t    /**\n\t     * Directive automatically applied to Angular form controls that sets CSS classes\n\t     * based on control status (valid/invalid/dirty/etc).\n\t     *\n\t     * @stable\n\t     */\n\t    var NgControlStatus = (function (_super) {\n\t        __extends$3(NgControlStatus, _super);\n\t        function NgControlStatus(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatus.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatus.ctorParameters = [\n\t            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n\t        ];\n\t        return NgControlStatus;\n\t    }(AbstractControlStatus));\n\t    /**\n\t     * Directive automatically applied to Angular form groups that sets CSS classes\n\t     * based on control status (valid/invalid/dirty/etc).\n\t     *\n\t     * @stable\n\t     */\n\t    var NgControlStatusGroup = (function (_super) {\n\t        __extends$3(NgControlStatusGroup, _super);\n\t        function NgControlStatusGroup(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatusGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n\t                        host: ngControlStatusHost\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatusGroup.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n\t        ];\n\t        return NgControlStatusGroup;\n\t    }(AbstractControlStatus));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Use by directives and components to emit custom Events.\n\t     *\n\t     * ### Examples\n\t     *\n\t     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n\t     * title gets clicked:\n\t     *\n\t     * ```\n\t     * @Component({\n\t     *   selector: 'zippy',\n\t     *   template: `\n\t     *   <div class=\"zippy\">\n\t     *     <div (click)=\"toggle()\">Toggle</div>\n\t     *     <div [hidden]=\"!visible\">\n\t     *       <ng-content></ng-content>\n\t     *     </div>\n\t     *  </div>`})\n\t     * export class Zippy {\n\t     *   visible: boolean = true;\n\t     *   @Output() open: EventEmitter<any> = new EventEmitter();\n\t     *   @Output() close: EventEmitter<any> = new EventEmitter();\n\t     *\n\t     *   toggle() {\n\t     *     this.visible = !this.visible;\n\t     *     if (this.visible) {\n\t     *       this.open.emit(null);\n\t     *     } else {\n\t     *       this.close.emit(null);\n\t     *     }\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * The events payload can be accessed by the parameter `$event` on the components output event\n\t     * handler:\n\t     *\n\t     * ```\n\t     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n\t     * ```\n\t     *\n\t     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n\t     * https://github.com/jhusain/observable-spec\n\t     *\n\t     * Once a reference implementation of the spec is available, switch to it.\n\t     * @stable\n\t     */\n\t    var EventEmitter = (function (_super) {\n\t        __extends$5(EventEmitter, _super);\n\t        /**\n\t         * Creates an instance of [EventEmitter], which depending on [isAsync],\n\t         * delivers events synchronously or asynchronously.\n\t         */\n\t        function EventEmitter(isAsync) {\n\t            if (isAsync === void 0) { isAsync = false; }\n\t            _super.call(this);\n\t            this.__isAsync = isAsync;\n\t        }\n\t        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n\t        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n\t            var schedulerFn;\n\t            var errorFn = function (err) { return null; };\n\t            var completeFn = function () { return null; };\n\t            if (generatorOrNext && typeof generatorOrNext === 'object') {\n\t                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n\t                    setTimeout(function () { return generatorOrNext.next(value); });\n\t                } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };\n\t                if (generatorOrNext.error) {\n\t                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n\t                        function (err) { generatorOrNext.error(err); };\n\t                }\n\t                if (generatorOrNext.complete) {\n\t                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n\t                        function () { generatorOrNext.complete(); };\n\t                }\n\t            }\n\t            else {\n\t                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n\t                    setTimeout(function () { return generatorOrNext(value); });\n\t                } : function (value /** TODO #9100 */) { generatorOrNext(value); };\n\t                if (error) {\n\t                    errorFn =\n\t                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n\t                }\n\t                if (complete) {\n\t                    completeFn =\n\t                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n\t                }\n\t            }\n\t            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n\t        };\n\t        return EventEmitter;\n\t    }(rxjs_Subject.Subject));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$6 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n\t     */\n\t    var VALID = 'VALID';\n\t    /**\n\t     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n\t     */\n\t    var INVALID = 'INVALID';\n\t    /**\n\t     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n\t     * errors are not yet available for the input value.\n\t     */\n\t    var PENDING = 'PENDING';\n\t    /**\n\t     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n\t     * calculations of validity or value.\n\t     */\n\t    var DISABLED = 'DISABLED';\n\t    function _find(control, path, delimiter) {\n\t        if (isBlank(path))\n\t            return null;\n\t        if (!(path instanceof Array)) {\n\t            path = path.split(delimiter);\n\t        }\n\t        if (path instanceof Array && ListWrapper.isEmpty(path))\n\t            return null;\n\t        return path.reduce(function (v, name) {\n\t            if (v instanceof FormGroup) {\n\t                return isPresent(v.controls[name]) ? v.controls[name] : null;\n\t            }\n\t            else if (v instanceof FormArray) {\n\t                var index = name;\n\t                return isPresent(v.at(index)) ? v.at(index) : null;\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        }, control);\n\t    }\n\t    function toObservable(r) {\n\t        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n\t    }\n\t    function coerceToValidator(validator) {\n\t        return Array.isArray(validator) ? composeValidators(validator) : validator;\n\t    }\n\t    function coerceToAsyncValidator(asyncValidator) {\n\t        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n\t    }\n\t    /**\n\t     * @whatItDoes This is the base class for {@link FormControl}, {@link FormGroup}, and\n\t     * {@link FormArray}.\n\t     *\n\t     * It provides some of the shared behavior that all controls and groups of controls have, like\n\t     * running validators, calculating status, and resetting state. It also defines the properties\n\t     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n\t     * instantiated directly.\n\t     *\n\t     * @stable\n\t     */\n\t    var AbstractControl = (function () {\n\t        function AbstractControl(validator, asyncValidator) {\n\t            this.validator = validator;\n\t            this.asyncValidator = asyncValidator;\n\t            /** @internal */\n\t            this._onCollectionChange = function () { };\n\t            this._pristine = true;\n\t            this._touched = false;\n\t        }\n\t        Object.defineProperty(AbstractControl.prototype, \"value\", {\n\t            /**\n\t             * The value of the control.\n\t             */\n\t            get: function () { return this._value; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"status\", {\n\t            /**\n\t             * The validation status of the control. There are four possible\n\t             * validation statuses:\n\t             *\n\t             * * **VALID**:  control has passed all validation checks\n\t             * * **INVALID**: control has failed at least one validation check\n\t             * * **PENDING**: control is in the midst of conducting a validation check\n\t             * * **DISABLED**: control is exempt from validation checks\n\t             *\n\t             * These statuses are mutually exclusive, so a control cannot be\n\t             * both valid AND invalid or invalid AND disabled.\n\t             */\n\t            get: function () { return this._status; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n\t            /**\n\t             * A control is `valid` when its `status === VALID`.\n\t             *\n\t             * In order to have this status, the control must have passed all its\n\t             * validation checks.\n\t             */\n\t            get: function () { return this._status === VALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n\t            /**\n\t             * A control is `invalid` when its `status === INVALID`.\n\t             *\n\t             * In order to have this status, the control must have failed\n\t             * at least one of its validation checks.\n\t             */\n\t            get: function () { return this._status === INVALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n\t            /**\n\t             * A control is `pending` when its `status === PENDING`.\n\t             *\n\t             * In order to have this status, the control must be in the\n\t             * middle of conducting a validation check.\n\t             */\n\t            get: function () { return this._status == PENDING; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n\t            /**\n\t             * A control is `disabled` when its `status === DISABLED`.\n\t             *\n\t             * Disabled controls are exempt from validation checks and\n\t             * are not included in the aggregate value of their ancestor\n\t             * controls.\n\t             */\n\t            get: function () { return this._status === DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n\t            /**\n\t             * A control is `enabled` as long as its `status !== DISABLED`.\n\t             *\n\t             * In other words, it has a status of `VALID`, `INVALID`, or\n\t             * `PENDING`.\n\t             */\n\t            get: function () { return this._status !== DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n\t            /**\n\t             * Returns any errors generated by failing validation. If there\n\t             * are no errors, it will return null.\n\t             */\n\t            get: function () { return this._errors; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n\t            /**\n\t             * A control is `pristine` if the user has not yet changed\n\t             * the value in the UI.\n\t             *\n\t             * Note that programmatic changes to a control's value will\n\t             * *not* mark it dirty.\n\t             */\n\t            get: function () { return this._pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n\t            /**\n\t             * A control is `dirty` if the user has changed the value\n\t             * in the UI.\n\t             *\n\t             * Note that programmatic changes to a control's value will\n\t             * *not* mark it dirty.\n\t             */\n\t            get: function () { return !this.pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n\t            /**\n\t            * A control is marked `touched` once the user has triggered\n\t            * a `blur` event on it.\n\t            */\n\t            get: function () { return this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n\t            /**\n\t             * A control is `untouched` if the user has not yet triggered\n\t             * a `blur` event on it.\n\t             */\n\t            get: function () { return !this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n\t            /**\n\t             * Emits an event every time the value of the control changes, in\n\t             * the UI or programmatically.\n\t             */\n\t            get: function () { return this._valueChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n\t            /**\n\t             * Emits an event every time the validation status of the control\n\t             * is re-calculated.\n\t             */\n\t            get: function () { return this._statusChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Sets the synchronous validators that are active on this control.  Calling\n\t         * this will overwrite any existing sync validators.\n\t         */\n\t        AbstractControl.prototype.setValidators = function (newValidator) {\n\t            this.validator = coerceToValidator(newValidator);\n\t        };\n\t        /**\n\t         * Sets the async validators that are active on this control. Calling this\n\t         * will overwrite any existing async validators.\n\t         */\n\t        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n\t            this.asyncValidator = coerceToAsyncValidator(newValidator);\n\t        };\n\t        /**\n\t         * Empties out the sync validator list.\n\t         */\n\t        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n\t        /**\n\t         * Empties out the async validator list.\n\t         */\n\t        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n\t        /**\n\t         * Marks the control as `touched`.\n\t         *\n\t         * This will also mark all direct ancestors as `touched` to maintain\n\t         * the model.\n\t         */\n\t        AbstractControl.prototype.markAsTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            onlySelf = normalizeBool(onlySelf);\n\t            this._touched = true;\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.markAsTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Marks the control as `untouched`.\n\t         *\n\t         * If the control has any children, it will also mark all children as `untouched`\n\t         * to maintain the model, and re-calculate the `touched` status of all parent\n\t         * controls.\n\t         */\n\t        AbstractControl.prototype.markAsUntouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = false;\n\t            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Marks the control as `dirty`.\n\t         *\n\t         * This will also mark all direct ancestors as `dirty` to maintain\n\t         * the model.\n\t         */\n\t        AbstractControl.prototype.markAsDirty = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            onlySelf = normalizeBool(onlySelf);\n\t            this._pristine = false;\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.markAsDirty({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Marks the control as `pristine`.\n\t         *\n\t         * If the control has any children, it will also mark all children as `pristine`\n\t         * to maintain the model, and re-calculate the `pristine` status of all parent\n\t         * controls.\n\t         */\n\t        AbstractControl.prototype.markAsPristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = true;\n\t            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Marks the control as `pending`.\n\t         */\n\t        AbstractControl.prototype.markAsPending = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            onlySelf = normalizeBool(onlySelf);\n\t            this._status = PENDING;\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.markAsPending({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Disables the control. This means the control will be exempt from validation checks and\n\t         * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n\t         *\n\t         * If the control has children, all children will be disabled to maintain the model.\n\t         */\n\t        AbstractControl.prototype.disable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\t            this._status = DISABLED;\n\t            this._errors = null;\n\t            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n\t            this._updateValue();\n\t            if (emitEvent) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange(true);\n\t        };\n\t        /**\n\t         * Enables the control. This means the control will be included in validation checks and\n\t         * the aggregate value of its parent. Its status is re-calculated based on its value and\n\t         * its validators.\n\t         *\n\t         * If the control has children, all children will be enabled.\n\t         */\n\t        AbstractControl.prototype.enable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._status = VALID;\n\t            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange(false);\n\t        };\n\t        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.updateValueAndValidity();\n\t                this._parent._updatePristine();\n\t                this._parent._updateTouched();\n\t            }\n\t        };\n\t        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n\t        /**\n\t         * Re-calculates the value and validation status of the control.\n\t         *\n\t         * By default, it will also update the value and validity of its ancestors.\n\t         */\n\t        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            onlySelf = normalizeBool(onlySelf);\n\t            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\t            this._setInitialStatus();\n\t            this._updateValue();\n\t            if (this.enabled) {\n\t                this._errors = this._runValidator();\n\t                this._status = this._calculateStatus();\n\t                if (this._status === VALID || this._status === PENDING) {\n\t                    this._runAsyncValidator(emitEvent);\n\t                }\n\t            }\n\t            if (emitEvent) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            }\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._updateTreeValidity = function (_a) {\n\t            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n\t            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t        };\n\t        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n\t        AbstractControl.prototype._runValidator = function () {\n\t            return isPresent(this.validator) ? this.validator(this) : null;\n\t        };\n\t        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n\t            var _this = this;\n\t            if (isPresent(this.asyncValidator)) {\n\t                this._status = PENDING;\n\t                this._cancelExistingSubscription();\n\t                var obs = toObservable(this.asyncValidator(this));\n\t                this._asyncValidationSubscription = obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n\t            }\n\t        };\n\t        AbstractControl.prototype._cancelExistingSubscription = function () {\n\t            if (isPresent(this._asyncValidationSubscription)) {\n\t                this._asyncValidationSubscription.unsubscribe();\n\t            }\n\t        };\n\t        /**\n\t         * Sets errors on a form control.\n\t         *\n\t         * This is used when validations are run manually by the user, rather than automatically.\n\t         *\n\t         * Calling `setErrors` will also update the validity of the parent control.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```\n\t         * const login = new FormControl(\"someLogin\");\n\t         * login.setErrors({\n\t         *   \"notUnique\": true\n\t         * });\n\t         *\n\t         * expect(login.valid).toEqual(false);\n\t         * expect(login.errors).toEqual({\"notUnique\": true});\n\t         *\n\t         * login.setValue(\"someOtherLogin\");\n\t         *\n\t         * expect(login.valid).toEqual(true);\n\t         * ```\n\t         */\n\t        AbstractControl.prototype.setErrors = function (errors, _a) {\n\t            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n\t            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\t            this._errors = errors;\n\t            this._updateControlsErrors(emitEvent);\n\t        };\n\t        /**\n\t         * Retrieves a child control given the control's name or path.\n\t         *\n\t         * Paths can be passed in as an array or a string delimited by a dot.\n\t         *\n\t         * To get a control nested within a `person` sub-group:\n\t         *\n\t         * * `this.form.get('person.name');`\n\t         *\n\t         * -OR-\n\t         *\n\t         * * `this.form.get(['person', 'name']);`\n\t         */\n\t        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n\t        /**\n\t         * Returns true if the control with the given path has the error specified. Otherwise\n\t         * returns null or undefined.\n\t         *\n\t         * If no path is given, it checks for the error on the present control.\n\t         */\n\t        AbstractControl.prototype.getError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.get(path) : this;\n\t            if (isPresent(control) && isPresent(control._errors)) {\n\t                return StringMapWrapper.get(control._errors, errorCode);\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        };\n\t        /**\n\t         * Returns true if the control with the given path has the error specified. Otherwise\n\t         * returns false.\n\t         *\n\t         * If no path is given, it checks for the error on the present control.\n\t         */\n\t        AbstractControl.prototype.hasError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return isPresent(this.getError(errorCode, path));\n\t        };\n\t        Object.defineProperty(AbstractControl.prototype, \"root\", {\n\t            /**\n\t             * Retrieves the top-level ancestor of this control.\n\t             */\n\t            get: function () {\n\t                var x = this;\n\t                while (isPresent(x._parent)) {\n\t                    x = x._parent;\n\t                }\n\t                return x;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n\t            this._status = this._calculateStatus();\n\t            if (emitEvent) {\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (isPresent(this._parent)) {\n\t                this._parent._updateControlsErrors(emitEvent);\n\t            }\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._initObservables = function () {\n\t            this._valueChanges = new EventEmitter();\n\t            this._statusChanges = new EventEmitter();\n\t        };\n\t        AbstractControl.prototype._calculateStatus = function () {\n\t            if (this._allControlsDisabled())\n\t                return DISABLED;\n\t            if (isPresent(this._errors))\n\t                return INVALID;\n\t            if (this._anyControlsHaveStatus(PENDING))\n\t                return PENDING;\n\t            if (this._anyControlsHaveStatus(INVALID))\n\t                return INVALID;\n\t            return VALID;\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n\t            return this._anyControls(function (control) { return control.status == status; });\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._anyControlsDirty = function () {\n\t            return this._anyControls(function (control) { return control.dirty; });\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._anyControlsTouched = function () {\n\t            return this._anyControls(function (control) { return control.touched; });\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._updatePristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = !this._anyControlsDirty();\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._updateTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = this._anyControlsTouched();\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._onDisabledChange = function (isDisabled) { };\n\t        /** @internal */\n\t        AbstractControl.prototype._isBoxedValue = function (formState) {\n\t            return isStringMap(formState) && Object.keys(formState).length === 2 && 'value' in formState &&\n\t                'disabled' in formState;\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n\t        return AbstractControl;\n\t    }());\n\t    /**\n\t     * @whatItDoes Tracks the value and validation status of an individual form control.\n\t     *\n\t     * It is one of the three fundamental building blocks of Angular forms, along with\n\t     * {@link FormGroup} and {@link FormArray}.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * When instantiating a {@link FormControl}, you can pass in an initial value as the\n\t     * first argument. Example:\n\t     *\n\t     * ```ts\n\t     * const ctrl = new FormControl('some value');\n\t     * console.log(ctrl.value);     // 'some value'\n\t     *```\n\t     *\n\t     * You can also initialize the control with a form state object on instantiation,\n\t     * which includes both the value and whether or not the control is disabled.\n\t     *\n\t     * ```ts\n\t     * const ctrl = new FormControl({value: 'n/a', disabled: true});\n\t     * console.log(ctrl.value);     // 'n/a'\n\t     * console.log(ctrl.status);   // 'DISABLED'\n\t     * ```\n\t     *\n\t     * To include a sync validator (or an array of sync validators) with the control,\n\t     * pass it in as the second argument. Async validators are also supported, but\n\t     * have to be passed in separately as the third arg.\n\t     *\n\t     * ```ts\n\t     * const ctrl = new FormControl('', Validators.required);\n\t     * console.log(ctrl.value);     // ''\n\t     * console.log(ctrl.status);   // 'INVALID'\n\t     * ```\n\t     *\n\t     * See its superclass, {@link AbstractControl}, for more properties and methods.\n\t     *\n\t     * * **npm package**: `@angular/forms`\n\t     *\n\t     * @stable\n\t     */\n\t    var FormControl = (function (_super) {\n\t        __extends$6(FormControl, _super);\n\t        function FormControl(formState, validator, asyncValidator) {\n\t            if (formState === void 0) { formState = null; }\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n\t            /** @internal */\n\t            this._onChange = [];\n\t            this._applyFormState(formState);\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t            this._initObservables();\n\t        }\n\t        /**\n\t         * Set the value of the form control to `value`.\n\t         *\n\t         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n\t         * and not its parent component. This defaults to false.\n\t         *\n\t         * If `emitEvent` is `true`, this\n\t         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n\t         * to true (as it falls through to `updateValueAndValidity`).\n\t         *\n\t         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n\t         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n\t         * specified.\n\t         *\n\t         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n\t         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n\t         */\n\t        FormControl.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n\t            emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n\t            emitViewToModelChange = isPresent(emitViewToModelChange) ? emitViewToModelChange : true;\n\t            this._value = value;\n\t            if (this._onChange.length && emitModelToViewChange) {\n\t                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange); });\n\t            }\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * Patches the value of a control.\n\t         *\n\t         * This function is functionally the same as {@link FormControl.setValue} at this level.\n\t         * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n\t         * where it does behave differently.\n\t         */\n\t        FormControl.prototype.patchValue = function (value, options) {\n\t            if (options === void 0) { options = {}; }\n\t            this.setValue(value, options);\n\t        };\n\t        /**\n\t         * Resets the form control. This means by default:\n\t         *\n\t         * * it is marked as `pristine`\n\t         * * it is marked as `untouched`\n\t         * * value is set to null\n\t         *\n\t         * You can also reset to a specific form state by passing through a standalone\n\t         * value or a form state object that contains both a value and a disabled state\n\t         * (these are the only two properties that cannot be calculated).\n\t         *\n\t         * Ex:\n\t         *\n\t         * ```ts\n\t         * this.control.reset('Nancy');\n\t         *\n\t         * console.log(this.control.value);  // 'Nancy'\n\t         * ```\n\t         *\n\t         * OR\n\t         *\n\t         * ```\n\t         * this.control.reset({value: 'Nancy', disabled: true});\n\t         *\n\t         * console.log(this.control.value);  // 'Nancy'\n\t         * console.log(this.control.status);  // 'DISABLED'\n\t         * ```\n\t         */\n\t        FormControl.prototype.reset = function (formState, _a) {\n\t            if (formState === void 0) { formState = null; }\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._applyFormState(formState);\n\t            this.markAsPristine({ onlySelf: onlySelf });\n\t            this.markAsUntouched({ onlySelf: onlySelf });\n\t            this.setValue(this._value, { onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._updateValue = function () { };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._anyControls = function (condition) { return false; };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n\t        /**\n\t         * Register a listener for change events.\n\t         */\n\t        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._clearChangeFns = function () {\n\t            this._onChange = [];\n\t            this._onDisabledChange = null;\n\t            this._onCollectionChange = function () { };\n\t        };\n\t        /**\n\t         * Register a listener for disabled events.\n\t         */\n\t        FormControl.prototype.registerOnDisabledChange = function (fn) { this._onDisabledChange = fn; };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._forEachChild = function (cb) { };\n\t        FormControl.prototype._applyFormState = function (formState) {\n\t            if (this._isBoxedValue(formState)) {\n\t                this._value = formState.value;\n\t                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n\t                    this.enable({ onlySelf: true, emitEvent: false });\n\t            }\n\t            else {\n\t                this._value = formState;\n\t            }\n\t        };\n\t        return FormControl;\n\t    }(AbstractControl));\n\t    /**\n\t     * @whatItDoes Tracks the value and validity state of a group of {@link FormControl}\n\t     * instances.\n\t     *\n\t     * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n\t     * with each control name as the key.  It calculates its status by reducing the statuses\n\t     * of its children. For example, if one of the controls in a group is invalid, the entire\n\t     * group becomes invalid.\n\t     *\n\t     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n\t     * along with {@link FormControl} and {@link FormArray}.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n\t     * argument. The key for each child will be the name under which it is registered.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * const form = new FormGroup({\n\t     *   first: new FormControl('Nancy', Validators.minLength(2)),\n\t     *   last: new FormControl('Drew'),\n\t     * });\n\t     *\n\t     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n\t     * console.log(form.status);  // 'VALID'\n\t     * ```\n\t     *\n\t     * You can also include group-level validators as the second arg, or group-level async\n\t     * validators as the third arg. These come in handy when you want to perform validation\n\t     * that considers the value of more than one child control.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * const form = new FormGroup({\n\t     *   password: new FormControl('', Validators.minLength(2)),\n\t     *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n\t     * }, passwordMatchValidator);\n\t     *\n\t     *\n\t     * function passwordMatchValidator(g: FormGroup) {\n\t     *    return g.get('password').value === g.get('passwordConfirm').value\n\t     *       ? null : {'mismatch': true};\n\t     * }\n\t     * ```\n\t     *\n\t     * * **npm package**: `@angular/forms`\n\t     *\n\t     * @stable\n\t     */\n\t    var FormGroup = (function (_super) {\n\t        __extends$6(FormGroup, _super);\n\t        function FormGroup(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setUpControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         * Registers a control with the group's list of controls.\n\t         *\n\t         * This method does not update value or validity of the control, so for\n\t         * most cases you'll want to use {@link FormGroup.addControl} instead.\n\t         */\n\t        FormGroup.prototype.registerControl = function (name, control) {\n\t            if (this.controls[name])\n\t                return this.controls[name];\n\t            this.controls[name] = control;\n\t            control.setParent(this);\n\t            control._registerOnCollectionChange(this._onCollectionChange);\n\t            return control;\n\t        };\n\t        /**\n\t         * Add a control to this group.\n\t         */\n\t        FormGroup.prototype.addControl = function (name, control) {\n\t            this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Remove a control from this group.\n\t         */\n\t        FormGroup.prototype.removeControl = function (name) {\n\t            if (this.controls[name])\n\t                this.controls[name]._registerOnCollectionChange(function () { });\n\t            StringMapWrapper.delete(this.controls, name);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Replace an existing control.\n\t         */\n\t        FormGroup.prototype.setControl = function (name, control) {\n\t            if (this.controls[name])\n\t                this.controls[name]._registerOnCollectionChange(function () { });\n\t            StringMapWrapper.delete(this.controls, name);\n\t            if (control)\n\t                this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Check whether there is an enabled control with the given name in the group.\n\t         *\n\t         * It will return false for disabled controls. If you'd like to check for\n\t         * existence in the group only, use {@link AbstractControl.get} instead.\n\t         */\n\t        FormGroup.prototype.contains = function (controlName) {\n\t            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n\t        };\n\t        /**\n\t         *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n\t         *  the structure of the group, with control names as keys.\n\t         *\n\t         * This method performs strict checks, so it will throw an error if you try\n\t         * to set the value of a control that doesn't exist or if you exclude the\n\t         * value of a control.\n\t         *\n\t         *  ### Example\n\t         *\n\t         *  ```\n\t         *  const form = new FormGroup({\n\t         *     first: new FormControl(),\n\t         *     last: new FormControl()\n\t         *  });\n\t         *  console.log(form.value);   // {first: null, last: null}\n\t         *\n\t         *  form.setValue({first: 'Nancy', last: 'Drew'});\n\t         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n\t         *\n\t         *  ```\n\t         */\n\t        FormGroup.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._checkAllValuesPresent(value);\n\t            StringMapWrapper.forEach(value, function (newValue, name) {\n\t                _this._throwIfControlMissing(name);\n\t                _this.controls[name].setValue(newValue, { onlySelf: true });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         *  Patches the value of the {@link FormGroup}. It accepts an object with control\n\t         *  names as keys, and will do its best to match the values to the correct controls\n\t         *  in the group.\n\t         *\n\t         *  It accepts both super-sets and sub-sets of the group without throwing an error.\n\t         *\n\t         *  ### Example\n\t         *\n\t         *  ```\n\t         *  const form = new FormGroup({\n\t         *     first: new FormControl(),\n\t         *     last: new FormControl()\n\t         *  });\n\t         *  console.log(form.value);   // {first: null, last: null}\n\t         *\n\t         *  form.patchValue({first: 'Nancy'});\n\t         *  console.log(form.value);   // {first: 'Nancy', last: null}\n\t         *\n\t         *  ```\n\t         */\n\t        FormGroup.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            StringMapWrapper.forEach(value, function (newValue, name) {\n\t                if (_this.controls[name]) {\n\t                    _this.controls[name].patchValue(newValue, { onlySelf: true });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         * Resets the {@link FormGroup}. This means by default:\n\t         *\n\t         * * The group and all descendants are marked `pristine`\n\t         * * The group and all descendants are marked `untouched`\n\t         * * The value of all descendants will be null or null maps\n\t         *\n\t         * You can also reset to a specific form state by passing in a map of states\n\t         * that matches the structure of your form, with control names as keys. The state\n\t         * can be a standalone value or a form state object with both a value and a disabled\n\t         * status.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```ts\n\t         * this.form.reset({first: 'name', last; 'last name'});\n\t         *\n\t         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n\t         * ```\n\t         *\n\t         * - OR -\n\t         *\n\t         * ```\n\t         * this.form.reset({\n\t         *   first: {value: 'name', disabled: true},\n\t         *   last: 'last'\n\t         * });\n\t         *\n\t         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n\t         * console.log(this.form.get('first').status);  // 'DISABLED'\n\t         * ```\n\t         */\n\t        FormGroup.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = {}; }\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._forEachChild(function (control, name) {\n\t                control.reset(value[name], { onlySelf: true });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         * The aggregate value of the {@link FormGroup}, including any disabled controls.\n\t         *\n\t         * If you'd like to include all values regardless of disabled status, use this method.\n\t         * Otherwise, the `value` property is the best way to get the value of the group.\n\t         */\n\t        FormGroup.prototype.getRawValue = function () {\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                acc[name] = control.value;\n\t                return acc;\n\t            });\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._throwIfControlMissing = function (name) {\n\t            if (!Object.keys(this.controls).length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.controls[name]) {\n\t                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n\t            }\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._forEachChild = function (cb) {\n\t            StringMapWrapper.forEach(this.controls, cb);\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._setUpControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) {\n\t                control.setParent(_this);\n\t                control._registerOnCollectionChange(_this._onCollectionChange);\n\t            });\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n\t        /** @internal */\n\t        FormGroup.prototype._anyControls = function (condition) {\n\t            var _this = this;\n\t            var res = false;\n\t            this._forEachChild(function (control, name) {\n\t                res = res || (_this.contains(name) && condition(control));\n\t            });\n\t            return res;\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._reduceValue = function () {\n\t            var _this = this;\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                if (control.enabled || _this.disabled) {\n\t                    acc[name] = control.value;\n\t                }\n\t                return acc;\n\t            });\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n\t            var res = initValue;\n\t            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n\t            return res;\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n\t                var controlName = _a[_i];\n\t                if (this.controls[controlName].enabled) {\n\t                    return false;\n\t                }\n\t            }\n\t            return Object.keys(this.controls).length > 0 || this.disabled;\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, name) {\n\t                if (value[name] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n\t                }\n\t            });\n\t        };\n\t        return FormGroup;\n\t    }(AbstractControl));\n\t    /**\n\t     * @whatItDoes Tracks the value and validity state of an array of {@link FormControl}\n\t     * instances.\n\t     *\n\t     * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n\t     * It calculates its status by reducing the statuses of its children. For example, if one of\n\t     * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n\t     *\n\t     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n\t     * along with {@link FormControl} and {@link FormGroup}.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n\t     * argument.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * const arr = new FormArray([\n\t     *   new FormControl('Nancy', Validators.minLength(2)),\n\t     *   new FormControl('Drew'),\n\t     * ]);\n\t     *\n\t     * console.log(arr.value);   // ['Nancy', 'Drew']\n\t     * console.log(arr.status);  // 'VALID'\n\t     * ```\n\t     *\n\t     * You can also include array-level validators as the second arg, or array-level async\n\t     * validators as the third arg. These come in handy when you want to perform validation\n\t     * that considers the value of more than one child control.\n\t     *\n\t     * ### Adding or removing controls\n\t     *\n\t     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n\t     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n\t     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n\t     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n\t     * as broken change detection.\n\t     *\n\t     * * **npm package**: `@angular/forms`\n\t     *\n\t     * @stable\n\t     */\n\t    var FormArray = (function (_super) {\n\t        __extends$6(FormArray, _super);\n\t        function FormArray(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setUpControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         * Get the {@link AbstractControl} at the given `index` in the array.\n\t         */\n\t        FormArray.prototype.at = function (index) { return this.controls[index]; };\n\t        /**\n\t         * Insert a new {@link AbstractControl} at the end of the array.\n\t         */\n\t        FormArray.prototype.push = function (control) {\n\t            this.controls.push(control);\n\t            this._registerControl(control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Insert a new {@link AbstractControl} at the given `index` in the array.\n\t         */\n\t        FormArray.prototype.insert = function (index, control) {\n\t            ListWrapper.insert(this.controls, index, control);\n\t            this._registerControl(control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Remove the control at the given `index` in the array.\n\t         */\n\t        FormArray.prototype.removeAt = function (index) {\n\t            if (this.controls[index])\n\t                this.controls[index]._registerOnCollectionChange(function () { });\n\t            ListWrapper.removeAt(this.controls, index);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Replace an existing control.\n\t         */\n\t        FormArray.prototype.setControl = function (index, control) {\n\t            if (this.controls[index])\n\t                this.controls[index]._registerOnCollectionChange(function () { });\n\t            ListWrapper.removeAt(this.controls, index);\n\t            if (control) {\n\t                ListWrapper.insert(this.controls, index, control);\n\t                this._registerControl(control);\n\t            }\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        Object.defineProperty(FormArray.prototype, \"length\", {\n\t            /**\n\t             * Length of the control array.\n\t             */\n\t            get: function () { return this.controls.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         *  Sets the value of the {@link FormArray}. It accepts an array that matches\n\t         *  the structure of the control.\n\t         *\n\t         * This method performs strict checks, so it will throw an error if you try\n\t         * to set the value of a control that doesn't exist or if you exclude the\n\t         * value of a control.\n\t         *\n\t         *  ### Example\n\t         *\n\t         *  ```\n\t         *  const arr = new FormArray([\n\t         *     new FormControl(),\n\t         *     new FormControl()\n\t         *  ]);\n\t         *  console.log(arr.value);   // [null, null]\n\t         *\n\t         *  arr.setValue(['Nancy', 'Drew']);\n\t         *  console.log(arr.value);   // ['Nancy', 'Drew']\n\t         *  ```\n\t         */\n\t        FormArray.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._checkAllValuesPresent(value);\n\t            value.forEach(function (newValue, index) {\n\t                _this._throwIfControlMissing(index);\n\t                _this.at(index).setValue(newValue, { onlySelf: true });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n\t         *  structure of the control, and will do its best to match the values to the correct\n\t         *  controls in the group.\n\t         *\n\t         *  It accepts both super-sets and sub-sets of the array without throwing an error.\n\t         *\n\t         *  ### Example\n\t         *\n\t         *  ```\n\t         *  const arr = new FormArray([\n\t         *     new FormControl(),\n\t         *     new FormControl()\n\t         *  ]);\n\t         *  console.log(arr.value);   // [null, null]\n\t         *\n\t         *  arr.patchValue(['Nancy']);\n\t         *  console.log(arr.value);   // ['Nancy', null]\n\t         *  ```\n\t         */\n\t        FormArray.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            value.forEach(function (newValue, index) {\n\t                if (_this.at(index)) {\n\t                    _this.at(index).patchValue(newValue, { onlySelf: true });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         * Resets the {@link FormArray}. This means by default:\n\t         *\n\t         * * The array and all descendants are marked `pristine`\n\t         * * The array and all descendants are marked `untouched`\n\t         * * The value of all descendants will be null or null maps\n\t         *\n\t         * You can also reset to a specific form state by passing in an array of states\n\t         * that matches the structure of the control. The state can be a standalone value\n\t         * or a form state object with both a value and a disabled status.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```ts\n\t         * this.arr.reset(['name', 'last name']);\n\t         *\n\t         * console.log(this.arr.value);  // ['name', 'last name']\n\t         * ```\n\t         *\n\t         * - OR -\n\t         *\n\t         * ```\n\t         * this.arr.reset([\n\t         *   {value: 'name', disabled: true},\n\t         *   'last'\n\t         * ]);\n\t         *\n\t         * console.log(this.arr.value);  // ['name', 'last name']\n\t         * console.log(this.arr.get(0).status);  // 'DISABLED'\n\t         * ```\n\t         */\n\t        FormArray.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = []; }\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._forEachChild(function (control, index) {\n\t                control.reset(value[index], { onlySelf: true });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         * The aggregate value of the array, including any disabled controls.\n\t         *\n\t         * If you'd like to include all values regardless of disabled status, use this method.\n\t         * Otherwise, the `value` property is the best way to get the value of the array.\n\t         */\n\t        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n\t        /** @internal */\n\t        FormArray.prototype._throwIfControlMissing = function (index) {\n\t            if (!this.controls.length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.at(index)) {\n\t                throw new Error(\"Cannot find form control at index \" + index);\n\t            }\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._forEachChild = function (cb) {\n\t            this.controls.forEach(function (control, index) { cb(control, index); });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._updateValue = function () {\n\t            var _this = this;\n\t            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n\t                .map(function (control) { return control.value; });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._anyControls = function (condition) {\n\t            return this.controls.some(function (control) { return control.enabled && condition(control); });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._setUpControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) { return _this._registerControl(control); });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, i) {\n\t                if (value[i] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n\t                }\n\t            });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n\t                var control = _a[_i];\n\t                if (control.enabled)\n\t                    return false;\n\t            }\n\t            return this.controls.length > 0 || this.disabled;\n\t        };\n\t        FormArray.prototype._registerControl = function (control) {\n\t            control.setParent(this);\n\t            control._registerOnCollectionChange(this._onCollectionChange);\n\t        };\n\t        return FormArray;\n\t    }(AbstractControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formDirectiveProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n\t    };\n\t    var resolvedPromise = Promise.resolve(null);\n\t    /**\n\t     * @whatItDoes Creates a top-level {@link FormGroup} instance and binds it to a form\n\t     * to track aggregate form value and validation status.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * As soon as you import the `FormsModule`, this directive becomes active by default on\n\t     * all `<form>` tags.  You don't need to add a special selector.\n\t     *\n\t     * You can export the directive into a local template variable using `ngForm` as the key\n\t     * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n\t     * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n\t     * will give you access to the aggregate value and validity status of the form, as well as\n\t     * user interaction properties like `dirty` and `touched`.\n\t     *\n\t     * To register child controls with the form, you'll want to use {@link NgModel} with a\n\t     * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n\t     * sub-groups within the form.\n\t     *\n\t     * You can listen to the directive's `ngSubmit` event to be notified when the user has\n\t     * triggered a form submission.\n\t     *\n\t     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `@angular/forms`\n\t     *\n\t     * * **NgModule**: `FormsModule`\n\t     *\n\t     *  @stable\n\t     */\n\t    var NgForm = (function (_super) {\n\t        __extends$4(NgForm, _super);\n\t        function NgForm(validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._submitted = false;\n\t            this.ngSubmit = new EventEmitter();\n\t            this.form =\n\t                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n\t        }\n\t        Object.defineProperty(NgForm.prototype, \"submitted\", {\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"control\", {\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"path\", {\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"controls\", {\n\t            get: function () { return this.form.controls; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        NgForm.prototype.addControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var container = _this._findContainer(dir.path);\n\t                dir._control = container.registerControl(dir.name, dir.control);\n\t                setUpControl(dir.control, dir);\n\t                dir.control.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        NgForm.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n\t        NgForm.prototype.removeControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var container = _this._findContainer(dir.path);\n\t                if (isPresent(container)) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        NgForm.prototype.addFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var container = _this._findContainer(dir.path);\n\t                var group = new FormGroup({});\n\t                setUpFormContainer(group, dir);\n\t                container.registerControl(dir.name, group);\n\t                group.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        NgForm.prototype.removeFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var container = _this._findContainer(dir.path);\n\t                if (isPresent(container)) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        NgForm.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n\t        NgForm.prototype.updateModel = function (dir, value) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var ctrl = _this.form.get(dir.path);\n\t                ctrl.setValue(value);\n\t            });\n\t        };\n\t        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n\t        NgForm.prototype.onSubmit = function () {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit(null);\n\t            return false;\n\t        };\n\t        NgForm.prototype.onReset = function () { this.resetForm(); };\n\t        NgForm.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /** @internal */\n\t        NgForm.prototype._findContainer = function (path) {\n\t            path.pop();\n\t            return ListWrapper.isEmpty(path) ? this.form : this.form.get(path);\n\t        };\n\t        NgForm.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n\t                        providers: [formDirectiveProvider],\n\t                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n\t                        outputs: ['ngSubmit'],\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgForm.ctorParameters = [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        return NgForm;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var Examples = {\n\t        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n\t        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n\t        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n\t        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n\t        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n\t    };\n\t\n\t    var TemplateDrivenErrors = (function () {\n\t        function TemplateDrivenErrors() {\n\t        }\n\t        TemplateDrivenErrors.modelParentException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n\t        };\n\t        TemplateDrivenErrors.formGroupNameException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        TemplateDrivenErrors.missingNameException = function () {\n\t            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n\t        };\n\t        TemplateDrivenErrors.modelGroupParentException = function () {\n\t            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        return TemplateDrivenErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$8 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var modelGroupProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n\t    };\n\t    /**\n\t     * @whatItDoes Creates and binds a {@link FormGroup} instance to a DOM element.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * This directive can only be used as a child of {@link NgForm} (or in other words,\n\t     * within `<form>` tags).\n\t     *\n\t     * Use this directive if you'd like to create a sub-group within a form. This can\n\t     * come in handy if you want to validate a sub-group of your form separately from\n\t     * the rest of your form, or if some values in your domain model make more sense to\n\t     * consume together in a nested object.\n\t     *\n\t     * Pass in the name you'd like this sub-group to have and it will become the key\n\t     * for the sub-group in the form's full value. You can also export the directive into\n\t     * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n\t     *\n\t     * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `@angular/forms`\n\t     *\n\t     * * **NgModule**: `FormsModule`\n\t     *\n\t     * @stable\n\t     */\n\t    var NgModelGroup = (function (_super) {\n\t        __extends$8(NgModelGroup, _super);\n\t        function NgModelGroup(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /** @internal */\n\t        NgModelGroup.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelGroupParentException();\n\t            }\n\t        };\n\t        NgModelGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModelGroup.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        NgModelGroup.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n\t        };\n\t        return NgModelGroup;\n\t    }(AbstractFormGroupDirective));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$7 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formControlBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n\t    };\n\t    var resolvedPromise$1 = Promise.resolve(null);\n\t    /**\n\t     * @whatItDoes Creates a {@link FormControl} instance from a domain model and binds it\n\t     * to a form control element.\n\t     *\n\t     * The {@link FormControl} instance will track the value, user interaction, and\n\t     * validation status of the control and keep the view synced with the model. If used\n\t     * within a parent form, the directive will also register itself with the form as a child\n\t     * control.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * This directive can be used by itself or as part of a larger form. All you need is the\n\t     * `ngModel` selector to activate it.\n\t     *\n\t     * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n\t     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n\t     * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n\t     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n\t     * the domain model in your class as well.\n\t     *\n\t     * If you wish to inspect the properties of the associated {@link FormControl} (like\n\t     * validity state), you can also export the directive into a local template variable using\n\t     * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n\t     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n\t     * will fall through to the control anyway, so you can access them directly. You can see a\n\t     * full list of properties directly available in {@link AbstractControlDirective}.\n\t     *\n\t     * The following is an example of a simple standalone control using `ngModel`:\n\t     *\n\t     * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n\t     *\n\t     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n\t     * so that the control can be registered with the parent form under that name.\n\t     *\n\t     * It's worth noting that in the context of a parent form, you often can skip one-way or\n\t     * two-way binding because the parent form will sync the value for you. You can access\n\t     * its properties by exporting it into a local template variable using `ngForm` (ex:\n\t     * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n\t     *\n\t     * If you do need to populate initial values into your form, using a one-way binding for\n\t     * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n\t     * than the domain model's value on submit.\n\t     *\n\t     * Take a look at an example of using `ngModel` within a form:\n\t     *\n\t     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\t     *\n\t     * **npm package**: `@angular/forms`\n\t     *\n\t     * **NgModule**: `FormsModule`\n\t     *\n\t     *  @stable\n\t     */\n\t    var NgModel = (function (_super) {\n\t        __extends$7(NgModel, _super);\n\t        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            /** @internal */\n\t            this._control = new FormControl();\n\t            /** @internal */\n\t            this._registered = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        NgModel.prototype.ngOnChanges = function (changes) {\n\t            this._checkForErrors();\n\t            if (!this._registered)\n\t                this._setUpControl();\n\t            if ('isDisabled' in changes) {\n\t                this._updateDisabled(changes);\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this._updateValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n\t        Object.defineProperty(NgModel.prototype, \"control\", {\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"path\", {\n\t            get: function () {\n\t                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        NgModel.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        NgModel.prototype._setUpControl = function () {\n\t            this._isStandalone() ? this._setUpStandalone() :\n\t                this.formDirective.addControl(this);\n\t            this._registered = true;\n\t        };\n\t        NgModel.prototype._isStandalone = function () {\n\t            return !this._parent || (this.options && this.options.standalone);\n\t        };\n\t        NgModel.prototype._setUpStandalone = function () {\n\t            setUpControl(this._control, this);\n\t            this._control.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        NgModel.prototype._checkForErrors = function () {\n\t            if (!this._isStandalone()) {\n\t                this._checkParentType();\n\t            }\n\t            this._checkName();\n\t        };\n\t        NgModel.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                TemplateDrivenErrors.formGroupNameException();\n\t            }\n\t            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelParentException();\n\t            }\n\t        };\n\t        NgModel.prototype._checkName = function () {\n\t            if (this.options && this.options.name)\n\t                this.name = this.options.name;\n\t            if (!this._isStandalone() && !this.name) {\n\t                TemplateDrivenErrors.missingNameException();\n\t            }\n\t        };\n\t        NgModel.prototype._updateValue = function (value) {\n\t            var _this = this;\n\t            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n\t        };\n\t        NgModel.prototype._updateDisabled = function (changes) {\n\t            var _this = this;\n\t            var disabledValue = changes['isDisabled'].currentValue;\n\t            var isDisabled = disabledValue != null && disabledValue != false;\n\t            resolvedPromise$1.then(function () {\n\t                if (isDisabled && !_this.control.disabled) {\n\t                    _this.control.disable();\n\t                }\n\t                else if (!isDisabled && _this.control.disabled) {\n\t                    _this.control.enable();\n\t                }\n\t            });\n\t        };\n\t        NgModel.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n\t                        providers: [formControlBinding],\n\t                        exportAs: 'ngModel'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModel.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ];\n\t        NgModel.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t        };\n\t        return NgModel;\n\t    }(NgControl));\n\t\n\t    var ReactiveErrors = (function () {\n\t        function ReactiveErrors() {\n\t        }\n\t        ReactiveErrors.controlParentException = function () {\n\t            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n\t        };\n\t        ReactiveErrors.ngModelGroupException = function () {\n\t            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n\t        };\n\t        ReactiveErrors.missingFormException = function () {\n\t            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n\t        };\n\t        ReactiveErrors.groupParentException = function () {\n\t            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n\t        };\n\t        ReactiveErrors.arrayParentException = function () {\n\t            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n\t        };\n\t        ReactiveErrors.disabledAttrWarning = function () {\n\t            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n\t        };\n\t        return ReactiveErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$9 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formControlBinding$1 = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n\t    };\n\t    /**\n\t     * @whatItDoes Syncs a standalone {@link FormControl} instance to a form control element.\n\t     *\n\t     * In other words, this directive ensures that any values written to the {@link FormControl}\n\t     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n\t     * any values written to the DOM element through user input will be reflected in the\n\t     * {@link FormControl} instance (view -> model).\n\t     *\n\t     * @howToUse\n\t     *\n\t     * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n\t     * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n\t     * {@link FormControlDirective}.\n\t     *\n\t     * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n\t     * it does not require that your {@link FormControl} instance be part of any parent\n\t     * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n\t     * exists above it.\n\t     *\n\t     * **Get the value**: the `value` property is always synced and available on the\n\t     * {@link FormControl} instance. See a full list of available properties in\n\t     * {@link AbstractControl}.\n\t     *\n\t     * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n\t     * or you can set it programmatically later using {@link AbstractControl.setValue} or\n\t     * {@link AbstractControl.patchValue}.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n\t     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t     * re-calculated.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `@angular/forms`\n\t     *\n\t     * * **NgModule**: `ReactiveFormsModule`\n\t     *\n\t     *  @stable\n\t     */\n\t    var FormControlDirective = (function (_super) {\n\t        __extends$9(FormControlDirective, _super);\n\t        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this.update = new EventEmitter();\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormControlDirective.prototype.ngOnChanges = function (changes) {\n\t            if (this._isControlChanged(changes)) {\n\t                setUpControl(this.form, this);\n\t                if (this.control.disabled)\n\t                    this.valueAccessor.setDisabledState(true);\n\t                this.form.updateValueAndValidity({ emitEvent: false });\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.form.setValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        FormControlDirective.prototype._isControlChanged = function (changes) {\n\t            return StringMapWrapper.contains(changes, 'form');\n\t        };\n\t        FormControlDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlDirective.ctorParameters = [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ];\n\t        FormControlDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlDirective;\n\t    }(NgControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$11 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formDirectiveProvider$1 = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n\t    };\n\t    /**\n\t     * @whatItDoes Binds an existing {@link FormGroup} to a DOM element.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * This directive accepts an existing {@link FormGroup} instance. It will then use this\n\t     * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n\t     * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n\t     * and {@link FormArrayName} directives.\n\t     *\n\t     * **Set value**: You can set the form's initial value when instantiating the\n\t     * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n\t     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n\t     * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n\t     * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n\t     * re-calculated.\n\t     *\n\t     * ### Example\n\t     *\n\t     * In this example, we create form controls for first name and last name.\n\t     *\n\t     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\t     *\n\t     * **npm package**: `@angular/forms`\n\t     *\n\t     * **NgModule**: {@link ReactiveFormsModule}\n\t     *\n\t     *  @stable\n\t     */\n\t    var FormGroupDirective = (function (_super) {\n\t        __extends$11(FormGroupDirective, _super);\n\t        function FormGroupDirective(_validators, _asyncValidators) {\n\t            _super.call(this);\n\t            this._validators = _validators;\n\t            this._asyncValidators = _asyncValidators;\n\t            this._submitted = false;\n\t            this.directives = [];\n\t            this.form = null;\n\t            this.ngSubmit = new EventEmitter();\n\t        }\n\t        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n\t            this._checkFormPresent();\n\t            if (StringMapWrapper.contains(changes, 'form')) {\n\t                this._updateValidators();\n\t                this._updateDomValue();\n\t                this._updateRegistrations();\n\t            }\n\t        };\n\t        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormGroupDirective.prototype.addControl = function (dir) {\n\t            var ctrl = this.form.get(dir.path);\n\t            setUpControl(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t            this.directives.push(dir);\n\t            return ctrl;\n\t        };\n\t        FormGroupDirective.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n\t        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n\t        FormGroupDirective.prototype.addFormGroup = function (dir) {\n\t            var ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n\t        FormGroupDirective.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n\t        FormGroupDirective.prototype.addFormArray = function (dir) {\n\t            var ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n\t        FormGroupDirective.prototype.getFormArray = function (dir) { return this.form.get(dir.path); };\n\t        FormGroupDirective.prototype.updateModel = function (dir, value) {\n\t            var ctrl = this.form.get(dir.path);\n\t            ctrl.setValue(value);\n\t        };\n\t        FormGroupDirective.prototype.onSubmit = function () {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit(null);\n\t            return false;\n\t        };\n\t        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n\t        FormGroupDirective.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /** @internal */\n\t        FormGroupDirective.prototype._updateDomValue = function () {\n\t            var _this = this;\n\t            this.directives.forEach(function (dir) {\n\t                var newCtrl = _this.form.get(dir.path);\n\t                if (dir._control !== newCtrl) {\n\t                    cleanUpControl(dir._control, dir);\n\t                    if (newCtrl)\n\t                        setUpControl(newCtrl, dir);\n\t                    dir._control = newCtrl;\n\t                }\n\t            });\n\t            this.form._updateTreeValidity({ emitEvent: false });\n\t        };\n\t        FormGroupDirective.prototype._updateRegistrations = function () {\n\t            var _this = this;\n\t            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n\t            if (this._oldForm)\n\t                this._oldForm._registerOnCollectionChange(function () { });\n\t            this._oldForm = this.form;\n\t        };\n\t        FormGroupDirective.prototype._updateValidators = function () {\n\t            var sync = composeValidators(this._validators);\n\t            this.form.validator = Validators.compose([this.form.validator, sync]);\n\t            var async = composeAsyncValidators(this._asyncValidators);\n\t            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n\t        };\n\t        FormGroupDirective.prototype._checkFormPresent = function () {\n\t            if (isBlank(this.form)) {\n\t                ReactiveErrors.missingFormException();\n\t            }\n\t        };\n\t        FormGroupDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroup]',\n\t                        providers: [formDirectiveProvider$1],\n\t                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupDirective.ctorParameters = [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        FormGroupDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n\t            'ngSubmit': [{ type: _angular_core.Output },],\n\t        };\n\t        return FormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$12 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formGroupNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n\t    };\n\t    /**\n\t     * @whatItDoes Syncs a nested {@link FormGroup} to a DOM element.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n\t     * `[formGroup]`).\n\t     *\n\t     * It accepts the string name of the nested {@link FormGroup} you want to link, and\n\t     * will look for a {@link FormGroup} registered with that name in the parent\n\t     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n\t     *\n\t     * Nested form groups can come in handy when you want to validate a sub-group of a\n\t     * form separately from the rest or when you'd like to group the values of certain\n\t     * controls into their own nested object.\n\t     *\n\t     * **Access the group**: You can access the associated {@link FormGroup} using the\n\t     * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n\t     *\n\t     * You can also access individual controls within the group using dot syntax.\n\t     * Ex: `this.form.get('name.first')`\n\t     *\n\t     * **Get the value**: the `value` property is always synced and available on the\n\t     * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n\t     *\n\t     * **Set the value**: You can set an initial value for each child control when instantiating\n\t     * the {@link FormGroup}, or you can set it programmatically later using\n\t     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the group, you can\n\t     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t     * re-calculated.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `@angular/forms`\n\t     *\n\t     * * **NgModule**: `ReactiveFormsModule`\n\t     *\n\t     * @stable\n\t     */\n\t    var FormGroupName = (function (_super) {\n\t        __extends$12(FormGroupName, _super);\n\t        function FormGroupName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /** @internal */\n\t        FormGroupName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.groupParentException();\n\t            }\n\t        };\n\t        FormGroupName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupName.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        FormGroupName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n\t        };\n\t        return FormGroupName;\n\t    }(AbstractFormGroupDirective));\n\t    var formArrayNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n\t    };\n\t    /**\n\t     * @whatItDoes Syncs a nested {@link FormArray} to a DOM element.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n\t     * `[formGroup]`).\n\t     *\n\t     * It accepts the string name of the nested {@link FormArray} you want to link, and\n\t     * will look for a {@link FormArray} registered with that name in the parent\n\t     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n\t     *\n\t     * Nested form arrays can come in handy when you have a group of form controls but\n\t     * you're not sure how many there will be. Form arrays allow you to create new\n\t     * form controls dynamically.\n\t     *\n\t     * **Access the array**: You can access the associated {@link FormArray} using the\n\t     * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n\t     * Ex: `this.form.get('cities')`.\n\t     *\n\t     * **Get the value**: the `value` property is always synced and available on the\n\t     * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n\t     *\n\t     * **Set the value**: You can set an initial value for each child control when instantiating\n\t     * the {@link FormArray}, or you can set the value programmatically later using the\n\t     * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n\t     * methods.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the array, you can\n\t     * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n\t     * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n\t     * status is re-calculated.\n\t     *\n\t     * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n\t     * calling its {@link FormArray.push} method.\n\t     *  Ex: `this.form.get('cities').push(new FormControl());`\n\t     *\n\t     * ### Example\n\t     *\n\t     * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `@angular/forms`\n\t     *\n\t     * * **NgModule**: `ReactiveFormsModule`\n\t     *\n\t     * @stable\n\t     */\n\t    var FormArrayName = (function (_super) {\n\t        __extends$12(FormArrayName, _super);\n\t        function FormArrayName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        FormArrayName.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormArray(this);\n\t        };\n\t        FormArrayName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormArray(this);\n\t            }\n\t        };\n\t        Object.defineProperty(FormArrayName.prototype, \"control\", {\n\t            get: function () { return this.formDirective.getFormArray(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n\t            get: function () {\n\t                return this._parent ? this._parent.formDirective : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"path\", {\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormArrayName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.arrayParentException();\n\t            }\n\t        };\n\t        FormArrayName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormArrayName.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        FormArrayName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n\t        };\n\t        return FormArrayName;\n\t    }(ControlContainer));\n\t    function _hasInvalidParent(parent) {\n\t        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n\t            !(parent instanceof FormArrayName);\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$10 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var controlNameBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n\t    };\n\t    /**\n\t     * @whatItDoes  Syncs a {@link FormControl} in an existing {@link FormGroup} to a form control\n\t     * element by name.\n\t     *\n\t     * In other words, this directive ensures that any values written to the {@link FormControl}\n\t     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n\t     * any values written to the DOM element through user input will be reflected in the\n\t     * {@link FormControl} instance (view -> model).\n\t     *\n\t     * @howToUse\n\t     *\n\t     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n\t     * `[formGroup]`).\n\t     *\n\t     * It accepts the string name of the {@link FormControl} instance you want to\n\t     * link, and will look for a {@link FormControl} registered with that name in the\n\t     * closest {@link FormGroup} or {@link FormArray} above it.\n\t     *\n\t     * **Access the control**: You can access the {@link FormControl} associated with\n\t     * this directive by using the {@link AbstractControl.get} method.\n\t     * Ex: `this.form.get('first');`\n\t     *\n\t     * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n\t     * See a full list of available properties in {@link AbstractControl}.\n\t     *\n\t     *  **Set value**: You can set an initial value for the control when instantiating the\n\t     *  {@link FormControl}, or you can set it programmatically later using\n\t     *  {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n\t     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t     * re-calculated.\n\t     *\n\t     * ### Example\n\t     *\n\t     * In this example, we create form controls for first name and last name.\n\t     *\n\t     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\t     *\n\t     *  * **npm package**: `@angular/forms`\n\t     *\n\t     *  * **NgModule**: {@link ReactiveFormsModule}\n\t     *\n\t     *  @stable\n\t     */\n\t    var FormControlName = (function (_super) {\n\t        __extends$10(FormControlName, _super);\n\t        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this._added = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormControlName.prototype.ngOnChanges = function (changes) {\n\t            if (!this._added)\n\t                this._setUpControl();\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.viewModel = this.model;\n\t                this.formDirective.updateModel(this, this.model);\n\t            }\n\t        };\n\t        FormControlName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeControl(this);\n\t            }\n\t        };\n\t        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        Object.defineProperty(FormControlName.prototype, \"path\", {\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"control\", {\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormControlName.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof FormGroupName) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                ReactiveErrors.ngModelGroupException();\n\t            }\n\t            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n\t                !(this._parent instanceof FormArrayName)) {\n\t                ReactiveErrors.controlParentException();\n\t            }\n\t        };\n\t        FormControlName.prototype._setUpControl = function () {\n\t            this._checkParentType();\n\t            this._control = this.formDirective.addControl(this);\n\t            if (this.control.disabled)\n\t                this.valueAccessor.setDisabledState(true);\n\t            this._added = true;\n\t        };\n\t        FormControlName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlName.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ];\n\t        FormControlName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlName;\n\t    }(NgControl));\n\t\n\t    var REQUIRED_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A Directive that adds the `required` validator to any controls marked with the\n\t     * `required` attribute, via the {@link NG_VALIDATORS} binding.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <input name=\"fullName\" ngModel required>\n\t     * ```\n\t     *\n\t     * @stable\n\t     */\n\t    var RequiredValidator = (function () {\n\t        function RequiredValidator() {\n\t        }\n\t        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n\t            get: function () { return this._required; },\n\t            set: function (value) {\n\t                this._required = isPresent(value) && \"\" + value !== 'false';\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        RequiredValidator.prototype.validate = function (c) {\n\t            return this.required ? Validators.required(c) : null;\n\t        };\n\t        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        RequiredValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n\t                        providers: [REQUIRED_VALIDATOR],\n\t                        host: { '[attr.required]': 'required? \"\" : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RequiredValidator.ctorParameters = [];\n\t        RequiredValidator.propDecorators = {\n\t            'required': [{ type: _angular_core.Input },],\n\t        };\n\t        return RequiredValidator;\n\t    }());\n\t    /**\n\t     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='min'}\n\t     */\n\t    var MIN_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n\t     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n\t     *\n\t     * @stable\n\t     */\n\t    var MinLengthValidator = (function () {\n\t        function MinLengthValidator() {\n\t        }\n\t        MinLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n\t        };\n\t        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if (changes['minlength']) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        MinLengthValidator.prototype.validate = function (c) {\n\t            return isPresent(this.minlength) ? this._validator(c) : null;\n\t        };\n\t        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        MinLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n\t                        providers: [MIN_LENGTH_VALIDATOR],\n\t                        host: { '[attr.minlength]': 'minlength? minlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MinLengthValidator.ctorParameters = [];\n\t        MinLengthValidator.propDecorators = {\n\t            'minlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MinLengthValidator;\n\t    }());\n\t    /**\n\t     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='max'}\n\t     */\n\t    var MAX_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n\t     * `formControl`,\n\t     * or control with `ngModel` that also has a `maxlength` attribute.\n\t     *\n\t     * @stable\n\t     */\n\t    var MaxLengthValidator = (function () {\n\t        function MaxLengthValidator() {\n\t        }\n\t        MaxLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n\t        };\n\t        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if (changes['maxlength']) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        MaxLengthValidator.prototype.validate = function (c) {\n\t            return isPresent(this.maxlength) ? this._validator(c) : null;\n\t        };\n\t        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        MaxLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n\t                        providers: [MAX_LENGTH_VALIDATOR],\n\t                        host: { '[attr.maxlength]': 'maxlength? maxlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MaxLengthValidator.ctorParameters = [];\n\t        MaxLengthValidator.propDecorators = {\n\t            'maxlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MaxLengthValidator;\n\t    }());\n\t    var PATTERN_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A Directive that adds the `pattern` validator to any controls marked with the\n\t     * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n\t     * as the regex to validate Control value against.  Follows pattern attribute\n\t     * semantics; i.e. regex must match entire Control value.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n\t     * ```\n\t     * @stable\n\t     */\n\t    var PatternValidator = (function () {\n\t        function PatternValidator() {\n\t        }\n\t        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n\t        PatternValidator.prototype.ngOnChanges = function (changes) {\n\t            if (changes['pattern']) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        PatternValidator.prototype.validate = function (c) {\n\t            return isPresent(this.pattern) ? this._validator(c) : null;\n\t        };\n\t        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        PatternValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n\t                        providers: [PATTERN_VALIDATOR],\n\t                        host: { '[attr.pattern]': 'pattern? pattern : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        PatternValidator.ctorParameters = [];\n\t        PatternValidator.propDecorators = {\n\t            'pattern': [{ type: _angular_core.Input },],\n\t        };\n\t        return PatternValidator;\n\t    }());\n\t\n\t    /**\n\t     * @whatItDoes Creates an {@link AbstractControl} from a user-specified configuration.\n\t     *\n\t     * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n\t     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n\t     * forms.\n\t     *\n\t     * @howToUse\n\t     *\n\t     * To use, inject `FormBuilder` into your component class. You can then call its methods\n\t     * directly.\n\t     *\n\t     * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n\t     *\n\t     *  * **npm package**: `@angular/forms`\n\t     *\n\t     *  * **NgModule**: {@link ReactiveFormsModule}\n\t     *\n\t     * @stable\n\t     */\n\t    var FormBuilder = (function () {\n\t        function FormBuilder() {\n\t        }\n\t        /**\n\t         * Construct a new {@link FormGroup} with the given map of configuration.\n\t         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n\t         *\n\t         * See the {@link FormGroup} constructor for more details.\n\t         */\n\t        FormBuilder.prototype.group = function (controlsConfig, extra) {\n\t            if (extra === void 0) { extra = null; }\n\t            var controls = this._reduceControls(controlsConfig);\n\t            var validator = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;\n\t            var asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;\n\t            return new FormGroup(controls, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n\t         * `asyncValidator`.\n\t         *\n\t         * `formState` can either be a standalone value for the form control or an object\n\t         * that contains both a value and a disabled status.\n\t         *\n\t         */\n\t        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            return new FormControl(formState, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * Construct a {@link FormArray} from the given `controlsConfig` array of\n\t         * configuration, with the given optional `validator` and `asyncValidator`.\n\t         */\n\t        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n\t            var _this = this;\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            var controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n\t            return new FormArray(controls, validator, asyncValidator);\n\t        };\n\t        /** @internal */\n\t        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n\t            var _this = this;\n\t            var controls = {};\n\t            StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {\n\t                controls[controlName] = _this._createControl(controlConfig);\n\t            });\n\t            return controls;\n\t        };\n\t        /** @internal */\n\t        FormBuilder.prototype._createControl = function (controlConfig) {\n\t            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n\t                controlConfig instanceof FormArray) {\n\t                return controlConfig;\n\t            }\n\t            else if (isArray(controlConfig)) {\n\t                var value = controlConfig[0];\n\t                var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n\t                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n\t                return this.control(value, validator, asyncValidator);\n\t            }\n\t            else {\n\t                return this.control(controlConfig);\n\t            }\n\t        };\n\t        FormBuilder.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        FormBuilder.ctorParameters = [];\n\t        return FormBuilder;\n\t    }());\n\t\n\t    var SHARED_FORM_DIRECTIVES = [\n\t        NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor,\n\t        CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor,\n\t        RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator,\n\t        MinLengthValidator, MaxLengthValidator, PatternValidator\n\t    ];\n\t    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n\t    var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\t    /**\n\t     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n\t     */\n\t    var InternalFormsSharedModule = (function () {\n\t        function InternalFormsSharedModule() {\n\t        }\n\t        InternalFormsSharedModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{ declarations: SHARED_FORM_DIRECTIVES, exports: SHARED_FORM_DIRECTIVES },] },\n\t        ];\n\t        /** @nocollapse */\n\t        InternalFormsSharedModule.ctorParameters = [];\n\t        return InternalFormsSharedModule;\n\t    }());\n\t\n\t    /**\n\t     * The ng module for forms.\n\t     * @stable\n\t     */\n\t    var FormsModule = (function () {\n\t        function FormsModule() {\n\t        }\n\t        FormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n\t                        providers: [RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormsModule.ctorParameters = [];\n\t        return FormsModule;\n\t    }());\n\t    /**\n\t     * The ng module for reactive forms.\n\t     * @stable\n\t     */\n\t    var ReactiveFormsModule = (function () {\n\t        function ReactiveFormsModule() {\n\t        }\n\t        ReactiveFormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n\t                        providers: [FormBuilder, RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        ReactiveFormsModule.ctorParameters = [];\n\t        return ReactiveFormsModule;\n\t    }());\n\t\n\t    exports.AbstractControlDirective = AbstractControlDirective;\n\t    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n\t    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n\t    exports.ControlContainer = ControlContainer;\n\t    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n\t    exports.DefaultValueAccessor = DefaultValueAccessor;\n\t    exports.NgControl = NgControl;\n\t    exports.NgControlStatus = NgControlStatus;\n\t    exports.NgControlStatusGroup = NgControlStatusGroup;\n\t    exports.NgForm = NgForm;\n\t    exports.NgModel = NgModel;\n\t    exports.NgModelGroup = NgModelGroup;\n\t    exports.FormControlDirective = FormControlDirective;\n\t    exports.FormControlName = FormControlName;\n\t    exports.FormGroupDirective = FormGroupDirective;\n\t    exports.FormArrayName = FormArrayName;\n\t    exports.FormGroupName = FormGroupName;\n\t    exports.NgSelectOption = NgSelectOption;\n\t    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n\t    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n\t    exports.MaxLengthValidator = MaxLengthValidator;\n\t    exports.MinLengthValidator = MinLengthValidator;\n\t    exports.PatternValidator = PatternValidator;\n\t    exports.RequiredValidator = RequiredValidator;\n\t    exports.FormBuilder = FormBuilder;\n\t    exports.AbstractControl = AbstractControl;\n\t    exports.FormArray = FormArray;\n\t    exports.FormControl = FormControl;\n\t    exports.FormGroup = FormGroup;\n\t    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n\t    exports.NG_VALIDATORS = NG_VALIDATORS;\n\t    exports.Validators = Validators;\n\t    exports.FormsModule = FormsModule;\n\t    exports.ReactiveFormsModule = ReactiveFormsModule;\n\t\n\t}));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** app.37643c0079459f1ec4f0.js\n **/","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app.module';\r\nimport { enableProdMode } from '@angular/core';\r\n\r\nconst platform = platformBrowserDynamic();\r\n\r\nif (process.env.ENV === 'production') {\r\n  enableProdMode();\r\n}\r\n\r\nplatform.bootstrapModule(AppModule);\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./app/main.ts\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar platform_browser_1 = require('@angular/platform-browser');\r\nvar http_1 = require('@angular/http');\r\n// Imports for loading & configuring the in-memory web api\r\nvar angular2_in_memory_web_api_1 = require('angular2-in-memory-web-api');\r\nvar app_1 = require('./components/app/app');\r\nvar login_1 = require('./components/login/login');\r\nvar header_1 = require('./components/header/header');\r\nvar navigation_drawer_1 = require('./components/navigation-drawer/navigation-drawer');\r\nvar overlay_1 = require('./components/overlay/overlay');\r\nvar button_1 = require('@angular2-material/button');\r\nvar card_1 = require('@angular2-material/card');\r\nvar app_routing_1 = require('./components/app/app.routing');\r\nvar forms_1 = require('@angular/forms');\r\nvar AppModule = (function () {\r\n    function AppModule() {\r\n    }\r\n    AppModule = __decorate([\r\n        core_1.NgModule({\r\n            imports: [platform_browser_1.BrowserModule, button_1.MdButtonModule, card_1.MdCardModule, forms_1.FormsModule, http_1.HttpModule, angular2_in_memory_web_api_1.InMemoryWebApiModule, app_routing_1.routing],\r\n            declarations: [app_1.AppComponent, login_1.LoginComponent, header_1.HeaderComponent, header_1.HeaderComponent, overlay_1.OverlayComponent, navigation_drawer_1.NavDrawerComponent],\r\n            bootstrap: [app_1.AppComponent]\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], AppModule);\r\n    return AppModule;\r\n}());\r\nexports.AppModule = AppModule;\r\n//# sourceMappingURL=app.module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/app.module.js\n ** module id = 23\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n__export(require('./http-status-codes'));\r\n__export(require('./in-memory-backend.service'));\r\nvar core_1 = require('@angular/core');\r\nvar http_1 = require('@angular/http');\r\nvar in_memory_backend_service_2 = require('./in-memory-backend.service');\r\nvar InMemoryWebApiModule = (function () {\r\n    function InMemoryWebApiModule() {\r\n    }\r\n    /**\r\n    *  Prepare in-memory-web-api in the root/boot application module\r\n    *  with class that implements InMemoryDbService and creates an in-memory database.\r\n    *\r\n    * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\r\n    * @param {InMemoryBackendConfigArgs} [options]\r\n    *\r\n    * @example\r\n    * InMemoryWebApiModule.forRoot(dbCreator);\r\n    * InMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n    */\r\n    InMemoryWebApiModule.forRoot = function (dbCreator, options) {\r\n        var providers = [\r\n            { provide: http_1.XHRBackend, useClass: in_memory_backend_service_2.InMemoryBackendService },\r\n            { provide: in_memory_backend_service_2.SEED_DATA, useClass: dbCreator }\r\n        ];\r\n        if (options) {\r\n            providers.push({ provide: in_memory_backend_service_2.InMemoryBackendConfig, useValue: options });\r\n        }\r\n        return {\r\n            ngModule: InMemoryWebApiModule,\r\n            providers: providers\r\n        };\r\n    };\r\n    InMemoryWebApiModule = __decorate([\r\n        core_1.NgModule({}), \r\n        __metadata('design:paramtypes', [])\r\n    ], InMemoryWebApiModule);\r\n    return InMemoryWebApiModule;\r\n}());\r\nexports.InMemoryWebApiModule = InMemoryWebApiModule;\r\n//# sourceMappingURL=index.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular2-in-memory-web-api/index.js\n ** module id = 25\n ** module chunks = 0\n **/","\"use strict\";\r\nexports.STATUS = {\r\n    CONTINUE: 100,\r\n    SWITCHING_PROTOCOLS: 101,\r\n    OK: 200,\r\n    CREATED: 201,\r\n    ACCEPTED: 202,\r\n    NON_AUTHORITATIVE_INFORMATION: 203,\r\n    NO_CONTENT: 204,\r\n    RESET_CONTENT: 205,\r\n    PARTIAL_CONTENT: 206,\r\n    MULTIPLE_CHOICES: 300,\r\n    MOVED_PERMANTENTLY: 301,\r\n    FOUND: 302,\r\n    SEE_OTHER: 303,\r\n    NOT_MODIFIED: 304,\r\n    USE_PROXY: 305,\r\n    TEMPORARY_REDIRECT: 307,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    PAYMENT_REQUIRED: 402,\r\n    FORBIDDEN: 403,\r\n    NOT_FOUND: 404,\r\n    METHOD_NOT_ALLOWED: 405,\r\n    NOT_ACCEPTABLE: 406,\r\n    PROXY_AUTHENTICATION_REQUIRED: 407,\r\n    REQUEST_TIMEOUT: 408,\r\n    CONFLICT: 409,\r\n    GONE: 410,\r\n    LENGTH_REQUIRED: 411,\r\n    PRECONDITION_FAILED: 412,\r\n    PAYLOAD_TO_LARGE: 413,\r\n    URI_TOO_LONG: 414,\r\n    UNSUPPORTED_MEDIA_TYPE: 415,\r\n    RANGE_NOT_SATISFIABLE: 416,\r\n    EXPECTATION_FAILED: 417,\r\n    IM_A_TEAPOT: 418,\r\n    UPGRADE_REQUIRED: 426,\r\n    INTERNAL_SERVER_ERROR: 500,\r\n    NOT_IMPLEMENTED: 501,\r\n    BAD_GATEWAY: 502,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    HTTP_VERSION_NOT_SUPPORTED: 505,\r\n    PROCESSING: 102,\r\n    MULTI_STATUS: 207,\r\n    IM_USED: 226,\r\n    PERMANENT_REDIRECT: 308,\r\n    UNPROCESSABLE_ENTRY: 422,\r\n    LOCKED: 423,\r\n    FAILED_DEPENDENCY: 424,\r\n    PRECONDITION_REQUIRED: 428,\r\n    TOO_MANY_REQUESTS: 429,\r\n    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\r\n    UNAVAILABLE_FOR_LEGAL_REASONS: 451,\r\n    VARIANT_ALSO_NEGOTIATES: 506,\r\n    INSUFFICIENT_STORAGE: 507,\r\n    NETWORK_AUTHENTICATION_REQUIRED: 511\r\n};\r\n/*tslint:disable:quotemark max-line-length one-line */\r\nexports.STATUS_CODE_INFO = {\r\n    \"100\": {\r\n        \"code\": 100,\r\n        \"text\": \"Continue\",\r\n        \"description\": \"\\\"The initial part of a request has been received and has not yet been rejected by the server.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.2.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.1\"\r\n    },\r\n    \"101\": {\r\n        \"code\": 101,\r\n        \"text\": \"Switching Protocols\",\r\n        \"description\": \"\\\"The server understands and is willing to comply with the client's request, via the Upgrade header field, for a change in the application protocol being used on this connection.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.2.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.2\"\r\n    },\r\n    \"200\": {\r\n        \"code\": 200,\r\n        \"text\": \"OK\",\r\n        \"description\": \"\\\"The request has succeeded.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.1\"\r\n    },\r\n    \"201\": {\r\n        \"code\": 201,\r\n        \"text\": \"Created\",\r\n        \"description\": \"\\\"The request has been fulfilled and has resulted in one or more new resources being created.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n    },\r\n    \"202\": {\r\n        \"code\": 202,\r\n        \"text\": \"Accepted\",\r\n        \"description\": \"\\\"The request has been accepted for processing, but the processing has not been completed.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.3\"\r\n    },\r\n    \"203\": {\r\n        \"code\": 203,\r\n        \"text\": \"Non-Authoritative Information\",\r\n        \"description\": \"\\\"The request was successful but the enclosed payload has been modified from that of the origin server's 200 (OK) response by a transforming proxy.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.4\"\r\n    },\r\n    \"204\": {\r\n        \"code\": 204,\r\n        \"text\": \"No Content\",\r\n        \"description\": \"\\\"The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.5\"\r\n    },\r\n    \"205\": {\r\n        \"code\": 205,\r\n        \"text\": \"Reset Content\",\r\n        \"description\": \"\\\"The server has fulfilled the request and desires that the user agent reset the \\\"document view\\\", which caused the request to be sent, to its original state as received from the origin server.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.6\"\r\n    },\r\n    \"206\": {\r\n        \"code\": 206,\r\n        \"text\": \"Partial Content\",\r\n        \"description\": \"\\\"The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the requests's Range header field.\\\"\",\r\n        \"spec_title\": \"RFC7233#4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.1\"\r\n    },\r\n    \"300\": {\r\n        \"code\": 300,\r\n        \"text\": \"Multiple Choices\",\r\n        \"description\": \"\\\"The target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.1\"\r\n    },\r\n    \"301\": {\r\n        \"code\": 301,\r\n        \"text\": \"Moved Permanently\",\r\n        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.2\"\r\n    },\r\n    \"302\": {\r\n        \"code\": 302,\r\n        \"text\": \"Found\",\r\n        \"description\": \"\\\"The target resource resides temporarily under a different URI.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.3\"\r\n    },\r\n    \"303\": {\r\n        \"code\": 303,\r\n        \"text\": \"See Other\",\r\n        \"description\": \"\\\"The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, that is intended to provide an indirect response to the original request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.4\"\r\n    },\r\n    \"304\": {\r\n        \"code\": 304,\r\n        \"text\": \"Not Modified\",\r\n        \"description\": \"\\\"A conditional GET request has been received and would have resulted in a 200 (OK) response if it were not for the fact that the condition has evaluated to false.\\\"\",\r\n        \"spec_title\": \"RFC7232#4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.1\"\r\n    },\r\n    \"305\": {\r\n        \"code\": 305,\r\n        \"text\": \"Use Proxy\",\r\n        \"description\": \"*deprecated*\",\r\n        \"spec_title\": \"RFC7231#6.4.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.5\"\r\n    },\r\n    \"307\": {\r\n        \"code\": 307,\r\n        \"text\": \"Temporary Redirect\",\r\n        \"description\": \"\\\"The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.7\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.7\"\r\n    },\r\n    \"400\": {\r\n        \"code\": 400,\r\n        \"text\": \"Bad Request\",\r\n        \"description\": \"\\\"The server cannot or will not process the request because the received syntax is invalid, nonsensical, or exceeds some limitation on what the server is willing to process.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.1\"\r\n    },\r\n    \"401\": {\r\n        \"code\": 401,\r\n        \"text\": \"Unauthorized\",\r\n        \"description\": \"\\\"The request has not been applied because it lacks valid authentication credentials for the target resource.\\\"\",\r\n        \"spec_title\": \"RFC7235#6.3.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7235#section-3.1\"\r\n    },\r\n    \"402\": {\r\n        \"code\": 402,\r\n        \"text\": \"Payment Required\",\r\n        \"description\": \"*reserved*\",\r\n        \"spec_title\": \"RFC7231#6.5.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.2\"\r\n    },\r\n    \"403\": {\r\n        \"code\": 403,\r\n        \"text\": \"Forbidden\",\r\n        \"description\": \"\\\"The server understood the request but refuses to authorize it.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.3\"\r\n    },\r\n    \"404\": {\r\n        \"code\": 404,\r\n        \"text\": \"Not Found\",\r\n        \"description\": \"\\\"The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.4\"\r\n    },\r\n    \"405\": {\r\n        \"code\": 405,\r\n        \"text\": \"Method Not Allowed\",\r\n        \"description\": \"\\\"The method specified in the request-line is known by the origin server but not supported by the target resource.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.5\"\r\n    },\r\n    \"406\": {\r\n        \"code\": 406,\r\n        \"text\": \"Not Acceptable\",\r\n        \"description\": \"\\\"The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.6\"\r\n    },\r\n    \"407\": {\r\n        \"code\": 407,\r\n        \"text\": \"Proxy Authentication Required\",\r\n        \"description\": \"\\\"The client needs to authenticate itself in order to use a proxy.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n    },\r\n    \"408\": {\r\n        \"code\": 408,\r\n        \"text\": \"Request Timeout\",\r\n        \"description\": \"\\\"The server did not receive a complete request message within the time that it was prepared to wait.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.7\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.7\"\r\n    },\r\n    \"409\": {\r\n        \"code\": 409,\r\n        \"text\": \"Conflict\",\r\n        \"description\": \"\\\"The request could not be completed due to a conflict with the current state of the resource.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.8\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.8\"\r\n    },\r\n    \"410\": {\r\n        \"code\": 410,\r\n        \"text\": \"Gone\",\r\n        \"description\": \"\\\"Access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.9\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.9\"\r\n    },\r\n    \"411\": {\r\n        \"code\": 411,\r\n        \"text\": \"Length Required\",\r\n        \"description\": \"\\\"The server refuses to accept the request without a defined Content-Length.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.10\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.10\"\r\n    },\r\n    \"412\": {\r\n        \"code\": 412,\r\n        \"text\": \"Precondition Failed\",\r\n        \"description\": \"\\\"One or more preconditions given in the request header fields evaluated to false when tested on the server.\\\"\",\r\n        \"spec_title\": \"RFC7232#4.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.2\"\r\n    },\r\n    \"413\": {\r\n        \"code\": 413,\r\n        \"text\": \"Payload Too Large\",\r\n        \"description\": \"\\\"The server is refusing to process a request because the request payload is larger than the server is willing or able to process.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.11\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.11\"\r\n    },\r\n    \"414\": {\r\n        \"code\": 414,\r\n        \"text\": \"URI Too Long\",\r\n        \"description\": \"\\\"The server is refusing to service the request because the request-target is longer than the server is willing to interpret.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.12\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.12\"\r\n    },\r\n    \"415\": {\r\n        \"code\": 415,\r\n        \"text\": \"Unsupported Media Type\",\r\n        \"description\": \"\\\"The origin server is refusing to service the request because the payload is in a format not supported by the target resource for this method.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.13\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.13\"\r\n    },\r\n    \"416\": {\r\n        \"code\": 416,\r\n        \"text\": \"Range Not Satisfiable\",\r\n        \"description\": \"\\\"None of the ranges in the request's Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\\\"\",\r\n        \"spec_title\": \"RFC7233#4.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.4\"\r\n    },\r\n    \"417\": {\r\n        \"code\": 417,\r\n        \"text\": \"Expectation Failed\",\r\n        \"description\": \"\\\"The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.14\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.14\"\r\n    },\r\n    \"418\": {\r\n        \"code\": 418,\r\n        \"text\": \"I'm a teapot\",\r\n        \"description\": \"\\\"1988 April Fools Joke. Returned by tea pots requested to brew coffee.\\\"\",\r\n        \"spec_title\": \"RFC 2324\",\r\n        \"spec_href\": \"https://tools.ietf.org/html/rfc2324\"\r\n    },\r\n    \"426\": {\r\n        \"code\": 426,\r\n        \"text\": \"Upgrade Required\",\r\n        \"description\": \"\\\"The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.15\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.15\"\r\n    },\r\n    \"500\": {\r\n        \"code\": 500,\r\n        \"text\": \"Internal Server Error\",\r\n        \"description\": \"\\\"The server encountered an unexpected condition that prevented it from fulfilling the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.1\"\r\n    },\r\n    \"501\": {\r\n        \"code\": 501,\r\n        \"text\": \"Not Implemented\",\r\n        \"description\": \"\\\"The server does not support the functionality required to fulfill the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.2\"\r\n    },\r\n    \"502\": {\r\n        \"code\": 502,\r\n        \"text\": \"Bad Gateway\",\r\n        \"description\": \"\\\"The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.3\"\r\n    },\r\n    \"503\": {\r\n        \"code\": 503,\r\n        \"text\": \"Service Unavailable\",\r\n        \"description\": \"\\\"The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.4\"\r\n    },\r\n    \"504\": {\r\n        \"code\": 504,\r\n        \"text\": \"Gateway Time-out\",\r\n        \"description\": \"\\\"The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.5\"\r\n    },\r\n    \"505\": {\r\n        \"code\": 505,\r\n        \"text\": \"HTTP Version Not Supported\",\r\n        \"description\": \"\\\"The server does not support, or refuses to support, the protocol version that was used in the request message.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.6\"\r\n    },\r\n    \"102\": {\r\n        \"code\": 102,\r\n        \"text\": \"Processing\",\r\n        \"description\": \"\\\"An interim response to inform the client that the server has accepted the complete request, but has not yet completed it.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.1\"\r\n    },\r\n    \"207\": {\r\n        \"code\": 207,\r\n        \"text\": \"Multi-Status\",\r\n        \"description\": \"\\\"Status for multiple independent operations.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.2\"\r\n    },\r\n    \"226\": {\r\n        \"code\": 226,\r\n        \"text\": \"IM Used\",\r\n        \"description\": \"\\\"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\\\"\",\r\n        \"spec_title\": \"RFC3229#10.4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc3229#section-10.4.1\"\r\n    },\r\n    \"308\": {\r\n        \"code\": 308,\r\n        \"text\": \"Permanent Redirect\",\r\n        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. [...] This status code is similar to 301 Moved Permanently (Section 7.3.2 of rfc7231), except that it does not allow rewriting the request method from POST to GET.\\\"\",\r\n        \"spec_title\": \"RFC7238\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7238\"\r\n    },\r\n    \"422\": {\r\n        \"code\": 422,\r\n        \"text\": \"Unprocessable Entity\",\r\n        \"description\": \"\\\"The server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.3\"\r\n    },\r\n    \"423\": {\r\n        \"code\": 423,\r\n        \"text\": \"Locked\",\r\n        \"description\": \"\\\"The source or destination resource of a method is locked.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.4\"\r\n    },\r\n    \"424\": {\r\n        \"code\": 424,\r\n        \"text\": \"Failed Dependency\",\r\n        \"description\": \"\\\"The method could not be performed on the resource because the requested action depended on another action and that action failed.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.5\"\r\n    },\r\n    \"428\": {\r\n        \"code\": 428,\r\n        \"text\": \"Precondition Required\",\r\n        \"description\": \"\\\"The origin server requires the request to be conditional.\\\"\",\r\n        \"spec_title\": \"RFC6585#3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-3\"\r\n    },\r\n    \"429\": {\r\n        \"code\": 429,\r\n        \"text\": \"Too Many Requests\",\r\n        \"description\": \"\\\"The user has sent too many requests in a given amount of time (\\\"rate limiting\\\").\\\"\",\r\n        \"spec_title\": \"RFC6585#4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-4\"\r\n    },\r\n    \"431\": {\r\n        \"code\": 431,\r\n        \"text\": \"Request Header Fields Too Large\",\r\n        \"description\": \"\\\"The server is unwilling to process the request because its header fields are too large.\\\"\",\r\n        \"spec_title\": \"RFC6585#5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-5\"\r\n    },\r\n    \"451\": {\r\n        \"code\": 451,\r\n        \"text\": \"Unavailable For Legal Reasons\",\r\n        \"description\": \"\\\"The server is denying access to the resource in response to a legal demand.\\\"\",\r\n        \"spec_title\": \"draft-ietf-httpbis-legally-restricted-status\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/draft-ietf-httpbis-legally-restricted-status\"\r\n    },\r\n    \"506\": {\r\n        \"code\": 506,\r\n        \"text\": \"Variant Also Negotiates\",\r\n        \"description\": \"\\\"The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.\\\"\",\r\n        \"spec_title\": \"RFC2295#8.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2295#section-8.1\"\r\n    },\r\n    \"507\": {\r\n        \"code\": 507,\r\n        \"text\": \"Insufficient Storage\",\r\n        \"description\": \"\\The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.6\"\r\n    },\r\n    \"511\": {\r\n        \"code\": 511,\r\n        \"text\": \"Network Authentication Required\",\r\n        \"description\": \"\\\"The client needs to authenticate to gain network access.\\\"\",\r\n        \"spec_title\": \"RFC6585#6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-6\"\r\n    }\r\n};\r\n//# sourceMappingURL=http-status-codes.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular2-in-memory-web-api/http-status-codes.js\n ** module id = 26\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar http_1 = require('@angular/http');\r\nvar Observable_1 = require('rxjs/Observable');\r\nrequire('rxjs/add/operator/delay');\r\nvar http_status_codes_1 = require('./http-status-codes');\r\n/**\r\n* Class that creates seed data for in-memory database\r\n* Must implement InMemoryDbService.\r\n*/\r\nexports.SEED_DATA = new core_1.OpaqueToken('seedData');\r\n/**\r\n*  InMemoryBackendService configuration options\r\n*  Usage:\r\n*    provide(InMemoryBackendConfig, {useValue: {delay:600}}),\r\n*/\r\nvar InMemoryBackendConfig = (function () {\r\n    function InMemoryBackendConfig(config) {\r\n        if (config === void 0) { config = {}; }\r\n        Object.assign(this, {\r\n            defaultResponseOptions: new http_1.BaseResponseOptions(),\r\n            delay: 500,\r\n            delete404: false\r\n        }, config);\r\n    }\r\n    return InMemoryBackendConfig;\r\n}());\r\nexports.InMemoryBackendConfig = InMemoryBackendConfig;\r\nexports.isSuccess = function (status) { return (status >= 200 && status < 300); };\r\n/**\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n *\r\n * ### Usage\r\n *\r\n * Create InMemoryDataService class the implements InMemoryDataService.\r\n * Register both this service and the seed data as in:\r\n * ```\r\n * // other imports\r\n * import { HTTPPROVIDERS, XHRBackend } from 'angular2/http';\r\n * import { InMemoryBackendConfig, InMemoryBackendService, SEEDDATA } from '../in-memory-backend/in-memory-backend.service';\r\n * import { InMemoryStoryService } from '../api/in-memory-story.service';\r\n *\r\n * @Component({\r\n *   selector: ...,\r\n *   templateUrl: ...,\r\n *   providers: [\r\n *     HTTPPROVIDERS,\r\n *     provide(XHRBackend, { useClass: InMemoryBackendService }),\r\n *     provide(SEEDDATA, { useClass: InMemoryStoryService }),\r\n *     provide(InMemoryBackendConfig, { useValue: { delay: 600 } }),\r\n *   ]\r\n * })\r\n * export class AppComponent { ... }\r\n * ```\r\n */\r\nvar InMemoryBackendService = (function () {\r\n    function InMemoryBackendService(seedData, config) {\r\n        this.seedData = seedData;\r\n        this.config = new InMemoryBackendConfig();\r\n        this.resetDb();\r\n        var loc = this.getLocation('./');\r\n        this.config.host = loc.host;\r\n        this.config.rootPath = loc.pathname;\r\n        Object.assign(this.config, config);\r\n    }\r\n    InMemoryBackendService.prototype.createConnection = function (req) {\r\n        var res = this.handleRequest(req);\r\n        var response = new Observable_1.Observable(function (responseObserver) {\r\n            if (exports.isSuccess(res.status)) {\r\n                responseObserver.next(res);\r\n                responseObserver.complete();\r\n            }\r\n            else {\r\n                responseObserver.error(res);\r\n            }\r\n            return function () { }; // unsubscribe function\r\n        });\r\n        response = response.delay(this.config.delay || 500);\r\n        return {\r\n            readyState: http_1.ReadyState.Done,\r\n            request: req,\r\n            response: response\r\n        };\r\n    };\r\n    ////  protected /////\r\n    /**\r\n     * Process Request and return an Http Response object\r\n     * in the manner of a RESTy web api.\r\n     *\r\n     * Expect URI pattern in the form :base/:collectionName/:id?\r\n     * Examples:\r\n     *   // for store with a 'characters' collection\r\n     *   GET api/characters          // all characters\r\n     *   GET api/characters/42       // the character with id=42\r\n     *   GET api/characters?name=^j  // 'j' is a regex; returns characters whose name contains 'j' or 'J'\r\n     *   GET api/characters.json/42  // ignores the \".json\"\r\n     *\r\n     *   POST commands/resetDb  // resets the \"database\"\r\n     */\r\n    InMemoryBackendService.prototype.handleRequest = function (req) {\r\n        var _a = this.parseUrl(req.url), base = _a.base, collectionName = _a.collectionName, id = _a.id, resourceUrl = _a.resourceUrl, query = _a.query;\r\n        var collection = this.db[collectionName];\r\n        var reqInfo = {\r\n            req: req,\r\n            base: base,\r\n            collection: collection,\r\n            collectionName: collectionName,\r\n            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n            id: this.parseId(collection, id),\r\n            query: query,\r\n            resourceUrl: resourceUrl\r\n        };\r\n        var options;\r\n        try {\r\n            if ('commands' === reqInfo.base.toLowerCase()) {\r\n                options = this.commands(reqInfo);\r\n            }\r\n            else if (reqInfo.collection) {\r\n                switch (req.method) {\r\n                    case http_1.RequestMethod.Get:\r\n                        options = this.get(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Post:\r\n                        options = this.post(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Put:\r\n                        options = this.put(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Delete:\r\n                        options = this.delete(reqInfo);\r\n                        break;\r\n                    default:\r\n                        options = this.createErrorResponse(http_status_codes_1.STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                options = this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            var err = error.message || error;\r\n            options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n        }\r\n        options = this.setStatusText(options);\r\n        if (this.config.defaultResponseOptions) {\r\n            options = this.config.defaultResponseOptions.merge(options);\r\n        }\r\n        return new http_1.Response(options);\r\n    };\r\n    /**\r\n     * Apply query/search parameters as a filter over the collection\r\n     * This impl only supports RegExp queries on string properties of the collection\r\n     * ANDs the conditions together\r\n     */\r\n    InMemoryBackendService.prototype.applyQuery = function (collection, query) {\r\n        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n        var conditions = [];\r\n        query.paramsMap.forEach(function (value, name) {\r\n            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), 'i') }); });\r\n        });\r\n        var len = conditions.length;\r\n        if (!len) {\r\n            return collection;\r\n        }\r\n        // AND the RegExp conditions\r\n        return collection.filter(function (row) {\r\n            var ok = true;\r\n            var i = len;\r\n            while (ok && i) {\r\n                i -= 1;\r\n                var cond = conditions[i];\r\n                ok = cond.rx.test(row[cond.name]);\r\n            }\r\n            return ok;\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.clone = function (data) {\r\n        return JSON.parse(JSON.stringify(data));\r\n    };\r\n    /**\r\n     * When the `base`=\"commands\", the `collectionName` is the command\r\n     * Example URLs:\r\n     *   commands/resetdb   // Reset the \"database\" to its original state\r\n     *   commands/config (GET) // Return this service's config object\r\n     *   commands/config (!GET) // Update the config (e.g. delay)\r\n     *\r\n     * Usage:\r\n     *   http.post('commands/resetdb', null);\r\n     *   http.get('commands/config');\r\n     *   http.post('commands/config', '{\"delay\":1000}');\r\n     */\r\n    InMemoryBackendService.prototype.commands = function (reqInfo) {\r\n        var command = reqInfo.collectionName.toLowerCase();\r\n        var method = reqInfo.req.method;\r\n        var options;\r\n        switch (command) {\r\n            case 'resetdb':\r\n                this.resetDb();\r\n                options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.OK });\r\n                break;\r\n            case 'config':\r\n                if (method === http_1.RequestMethod.Get) {\r\n                    options = new http_1.ResponseOptions({\r\n                        body: this.clone(this.config),\r\n                        status: http_status_codes_1.STATUS.OK\r\n                    });\r\n                }\r\n                else {\r\n                    // Be nice ... any other method is a config update\r\n                    var body = JSON.parse(reqInfo.req.text() || '{}');\r\n                    Object.assign(this.config, body);\r\n                    options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.NO_CONTENT });\r\n                }\r\n                break;\r\n            default:\r\n                options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n        }\r\n        return options;\r\n    };\r\n    InMemoryBackendService.prototype.createErrorResponse = function (status, message) {\r\n        return new http_1.ResponseOptions({\r\n            body: { 'error': \"\" + message },\r\n            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n            status: status\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.delete = function (_a) {\r\n        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n        if (!id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n        }\r\n        var exists = this.removeById(collection, id);\r\n        return new http_1.ResponseOptions({\r\n            headers: headers,\r\n            status: (exists || !this.config.delete404) ? http_status_codes_1.STATUS.NO_CONTENT : http_status_codes_1.STATUS.NOT_FOUND\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.findById = function (collection, id) {\r\n        return collection.find(function (item) { return item.id === id; });\r\n    };\r\n    InMemoryBackendService.prototype.genId = function (collection) {\r\n        // assumes numeric ids\r\n        var maxId = 0;\r\n        collection.reduce(function (prev, item) {\r\n            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n        }, null);\r\n        return maxId + 1;\r\n    };\r\n    InMemoryBackendService.prototype.get = function (_a) {\r\n        var id = _a.id, query = _a.query, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n        var data = collection;\r\n        if (id) {\r\n            data = this.findById(collection, id);\r\n        }\r\n        else if (query) {\r\n            data = this.applyQuery(collection, query);\r\n        }\r\n        if (!data) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n        }\r\n        return new http_1.ResponseOptions({\r\n            body: { data: this.clone(data) },\r\n            headers: headers,\r\n            status: http_status_codes_1.STATUS.OK\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.getLocation = function (href) {\r\n        var l = document.createElement('a');\r\n        l.href = href;\r\n        return l;\r\n    };\r\n    ;\r\n    InMemoryBackendService.prototype.indexOf = function (collection, id) {\r\n        return collection.findIndex(function (item) { return item.id === id; });\r\n    };\r\n    // tries to parse id as number if collection item.id is a number.\r\n    // returns the original param id otherwise.\r\n    InMemoryBackendService.prototype.parseId = function (collection, id) {\r\n        if (!id) {\r\n            return null;\r\n        }\r\n        var isNumberId = collection[0] && typeof collection[0].id === 'number';\r\n        if (isNumberId) {\r\n            var idNum = parseFloat(id);\r\n            return isNaN(idNum) ? id : idNum;\r\n        }\r\n        return id;\r\n    };\r\n    InMemoryBackendService.prototype.parseUrl = function (url) {\r\n        try {\r\n            var loc = this.getLocation(url);\r\n            var drop = this.config.rootPath.length;\r\n            var urlRoot = '';\r\n            if (loc.host !== this.config.host) {\r\n                // url for a server on a different host!\r\n                // assume it's collection is actually here too.\r\n                drop = 1; // the leading slash\r\n                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n            }\r\n            var path = loc.pathname.substring(drop);\r\n            var _a = path.split('/'), base = _a[0], collectionName = _a[1], id = _a[2];\r\n            var resourceUrl = urlRoot + base + '/' + collectionName + '/';\r\n            collectionName = collectionName.split('.')[0]; // ignore anything after the '.', e.g., '.json'\r\n            var query = loc.search && new http_1.URLSearchParams(loc.search.substr(1));\r\n            return { base: base, id: id, collectionName: collectionName, resourceUrl: resourceUrl, query: query };\r\n        }\r\n        catch (err) {\r\n            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n            throw new Error(msg);\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.post = function (_a) {\r\n        var collection = _a.collection, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl;\r\n        var item = JSON.parse(req.text());\r\n        if (!item.id) {\r\n            item.id = id || this.genId(collection);\r\n        }\r\n        // ignore the request id, if any. Alternatively,\r\n        // could reject request if id differs from item.id\r\n        id = item.id;\r\n        var existingIx = this.indexOf(collection, id);\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.NO_CONTENT\r\n            });\r\n        }\r\n        else {\r\n            collection.push(item);\r\n            headers.set('Location', resourceUrl + '/' + id);\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                body: { data: this.clone(item) },\r\n                status: http_status_codes_1.STATUS.CREATED\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.put = function (_a) {\r\n        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n        var item = JSON.parse(req.text());\r\n        if (!id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n        }\r\n        if (id !== item.id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.BAD_REQUEST, \"\\\"\" + collectionName + \"\\\" id does not match item.id\");\r\n        }\r\n        var existingIx = this.indexOf(collection, id);\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.NO_CONTENT // successful; no content\r\n            });\r\n        }\r\n        else {\r\n            collection.push(item);\r\n            return new http_1.ResponseOptions({\r\n                body: { data: this.clone(item) },\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.CREATED\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.removeById = function (collection, id) {\r\n        var ix = this.indexOf(collection, id);\r\n        if (ix > -1) {\r\n            collection.splice(ix, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Reset the \"database\" to its original state\r\n     */\r\n    InMemoryBackendService.prototype.resetDb = function () {\r\n        this.db = this.seedData.createDb();\r\n    };\r\n    InMemoryBackendService.prototype.setStatusText = function (options) {\r\n        try {\r\n            var statusCode = http_status_codes_1.STATUS_CODE_INFO[options.status];\r\n            options['statusText'] = statusCode ? statusCode.text : 'Unknown Status';\r\n            return options;\r\n        }\r\n        catch (err) {\r\n            return new http_1.ResponseOptions({\r\n                status: http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR,\r\n                statusText: 'Invalid Server Operation'\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService = __decorate([\r\n        __param(0, core_1.Inject(exports.SEED_DATA)),\r\n        __param(1, core_1.Inject(InMemoryBackendConfig)),\r\n        __param(1, core_1.Optional()), \r\n        __metadata('design:paramtypes', [Object, Object])\r\n    ], InMemoryBackendService);\r\n    return InMemoryBackendService;\r\n}());\r\nexports.InMemoryBackendService = InMemoryBackendService;\r\n//# sourceMappingURL=in-memory-backend.service.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular2-in-memory-web-api/in-memory-backend.service.js\n ** module id = 27\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar AppComponent = (function () {\r\n    function AppComponent() {\r\n    }\r\n    AppComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'my-app',\r\n            templateUrl: './app/components/app/app.html',\r\n            styleUrls: ['./app/components/app/app.css'],\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], AppComponent);\r\n    return AppComponent;\r\n}());\r\nexports.AppComponent = AppComponent;\r\n//# sourceMappingURL=app.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/app/app.js\n ** module id = 37\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar authentication_1 = require('../../services/autentification/authentication');\r\nvar LoginComponent = (function () {\r\n    function LoginComponent(_service) {\r\n        this._service = _service;\r\n        this.user = new authentication_1.User('', '');\r\n        this.errorMsg = '';\r\n    }\r\n    LoginComponent.prototype.login = function () {\r\n        if (!this._service.login(this.user)) {\r\n            this.errorMsg = 'Failed to login';\r\n        }\r\n    };\r\n    LoginComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'login-form',\r\n            providers: [authentication_1.AuthenticationService],\r\n            templateUrl: './app/components/login/login.html'\r\n        }), \r\n        __metadata('design:paramtypes', [authentication_1.AuthenticationService])\r\n    ], LoginComponent);\r\n    return LoginComponent;\r\n}());\r\nexports.LoginComponent = LoginComponent;\r\n//# sourceMappingURL=login.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/login/login.js\n ** module id = 38\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar router_1 = require('@angular/router');\r\nvar User = (function () {\r\n    function User(Login, Password) {\r\n        this.Login = Login;\r\n        this.Password = Password;\r\n    }\r\n    return User;\r\n}());\r\nexports.User = User;\r\nvar users = [\r\n    new User('admin@admin.com', 'adm9'),\r\n    new User('user1@gmail.com', 'a23')\r\n];\r\nvar AuthenticationService = (function () {\r\n    function AuthenticationService(_router) {\r\n        this._router = _router;\r\n    }\r\n    AuthenticationService.prototype.logout = function () {\r\n        localStorage.removeItem(\"user\");\r\n        this._router.navigate(['login']);\r\n    };\r\n    AuthenticationService.prototype.login = function (user) {\r\n        var authenticatedUser = users.find(function (u) { return u.Login === user.Login; });\r\n        if (authenticatedUser && authenticatedUser.Password === user.Password) {\r\n            localStorage.setItem(\"user\", authenticatedUser.toString());\r\n            this._router.navigate(['']);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    AuthenticationService.prototype.checkCredentials = function () {\r\n        if (localStorage.getItem(\"user\") === null) {\r\n            this._router.navigate(['']);\r\n        }\r\n    };\r\n    AuthenticationService = __decorate([\r\n        core_1.Injectable(), \r\n        __metadata('design:paramtypes', [router_1.Router])\r\n    ], AuthenticationService);\r\n    return AuthenticationService;\r\n}());\r\nexports.AuthenticationService = AuthenticationService;\r\n//# sourceMappingURL=authentication.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/services/autentification/authentication.js\n ** module id = 39\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar header_service_1 = require('./header.service');\r\nrequire('rxjs/add/operator/map');\r\nvar HeaderComponent = (function () {\r\n    function HeaderComponent(hs) {\r\n        this.hs = hs;\r\n    }\r\n    HeaderComponent.prototype.ngOnInit = function () {\r\n        this.hs.getName().then(function (data) {\r\n            console.log(data);\r\n            data.forEach(function (element) {\r\n                console.log(element.Title);\r\n            });\r\n        });\r\n    };\r\n    HeaderComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'nk-header',\r\n            providers: [header_service_1.HeaderService],\r\n            templateUrl: './app/components/header/header.html'\r\n        }), \r\n        __metadata('design:paramtypes', [header_service_1.HeaderService])\r\n    ], HeaderComponent);\r\n    return HeaderComponent;\r\n}());\r\nexports.HeaderComponent = HeaderComponent;\r\n//# sourceMappingURL=header.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/header/header.js\n ** module id = 69\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar http_1 = require('@angular/http');\r\nrequire('rxjs/add/operator/toPromise');\r\nvar HeaderService = (function () {\r\n    function HeaderService(http) {\r\n        this.http = http;\r\n        this.heroesUrl = 'https://api.campus.kpi.ua/Directory/GetFaculties'; // URL to web api\r\n    }\r\n    HeaderService.prototype.getName = function () {\r\n        return this.http.get(this.heroesUrl)\r\n            .toPromise()\r\n            .then(function (response) { return response.json().Data; })\r\n            .catch(this.handleError);\r\n    };\r\n    HeaderService.prototype.handleError = function (error) {\r\n        console.error('An error occurred', error); // for demo purposes only\r\n        return Promise.reject(error.message || error);\r\n    };\r\n    HeaderService = __decorate([\r\n        core_1.Injectable(), \r\n        __metadata('design:paramtypes', [http_1.Http])\r\n    ], HeaderService);\r\n    return HeaderService;\r\n}());\r\nexports.HeaderService = HeaderService;\r\n//# sourceMappingURL=header.service.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/header/header.service.js\n ** module id = 70\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar NavDrawerComponent = (function () {\r\n    function NavDrawerComponent() {\r\n        var _this = this;\r\n        this.handleTouchMove = function (event) {\r\n            var diff = parseInt(_this.element.style.left) + parseInt(window.getComputedStyle(_this.element).width);\r\n            var posx = parseInt(event.changedTouches[0].clientX);\r\n            // console.log(`diff - ${diff}`);\r\n            // console.log(`posx - ${posx}`);\r\n            /// onOpening \r\n            if (_this.touchStartPosX < 50 && posx < _this.element.offsetWidth && _this.isMenuOpen == false && posx > _this.touchStartPosX && parseInt(_this.element.style.left) < 0) {\r\n                _this.element.style.left = \"\" + (event.changedTouches[0].clientX - _this.element.offsetWidth - _this.touchStartPosX);\r\n                _this.overlay.classList.add('visible');\r\n                _this.overlay.style.opacity = \"\" + diff / (parseInt(window.getComputedStyle(_this.element).width) * 2);\r\n                console.log(_this.element.style.left);\r\n                console.log(\"onOpening\");\r\n                _this.isTouchWasOnDrawer = true;\r\n            }\r\n            ///onClosing\r\n            if (posx < parseInt(window.getComputedStyle(_this.element).width) + 10 && _this.isMenuOpen && parseInt(_this.element.style.left) <= 0) {\r\n                if (_this.touchStartPosX > parseInt(window.getComputedStyle(_this.element).width)) {\r\n                    console.log(\"thth\");\r\n                    _this.element.style.left = \"\" + (event.changedTouches[0].clientX - parseInt(window.getComputedStyle(_this.element).width));\r\n                }\r\n                else {\r\n                    _this.element.style.left = \"\" + (-_this.touchStartPosX + event.changedTouches[0].clientX);\r\n                }\r\n                _this.isTouchWasOnDrawer = true;\r\n            }\r\n            if (parseInt(_this.element.style.left) > 0) {\r\n                _this.element.style.left = '0px';\r\n            }\r\n        };\r\n        this.handleTouchStart = function (event) {\r\n            _this.isTouchWasOnDrawer = false;\r\n            console.log(_this.element);\r\n            _this.element.classList.remove('opened');\r\n            _this.element.classList.remove('closed');\r\n            _this.element.style.transitionDuration = '';\r\n            _this.touchStartPosX = event.changedTouches[0].clientX;\r\n            var diff = parseInt(_this.element.style.left) + parseInt(window.getComputedStyle(_this.element).width);\r\n            var posx = parseInt(event.changedTouches[0].clientX);\r\n            _this.touchStartTime = event.timeStamp;\r\n            if (posx < 20) {\r\n                _this.element.classList.add('touched');\r\n            }\r\n        };\r\n        this.handleTouchEnd = function (event) {\r\n            if (parseInt(_this.element.style.left) > -parseInt(window.getComputedStyle(_this.element).width) / 2) {\r\n                _this.element.style.left = \"0px\";\r\n                _this.element.classList.add('opened');\r\n                _this.element.classList.remove('closed');\r\n                _this.isMenuOpen = true;\r\n            }\r\n            else {\r\n                _this.element.style.left = \"\" + -parseInt(window.getComputedStyle(_this.element).width);\r\n                _this.element.classList.remove('opened');\r\n                _this.element.classList.add('closed');\r\n                _this.element.classList.remove('touched');\r\n                _this.overlay.classList.remove('visible');\r\n                _this.isMenuOpen = false;\r\n            }\r\n            var diff = parseInt(_this.element.style.left) + parseInt(window.getComputedStyle(_this.element).width);\r\n            _this.overlay.style.opacity = \"\" + diff / (parseInt(window.getComputedStyle(_this.element).width) * 2);\r\n            console.log(event.timeStamp - _this.touchStartTime);\r\n            if (_this.touchStartTime + 100 > event.timeStamp && event.changedTouches[0].clientX > _this.touchStartPosX) {\r\n                _this.element.classList.remove('closed');\r\n                _this.element.classList.add('opened');\r\n                _this.element.style.transitionDuration = \"0.1s\";\r\n                _this.element.style.left = '0px';\r\n                _this.isMenuOpen = true;\r\n            }\r\n            if (_this.touchStartTime + 100 > event.timeStamp && event.changedTouches[0].clientX < _this.touchStartPosX) {\r\n                _this.element.classList.remove('opened');\r\n                _this.element.classList.add('closed');\r\n                console.log('closed event');\r\n                _this.element.style.transitionDuration = \"0.1s\";\r\n                _this.element.style.left = \"\" + -parseInt(window.getComputedStyle(_this.element).width);\r\n                _this.isMenuOpen = false;\r\n            }\r\n            if (_this.touchStartPosX > parseInt(window.getComputedStyle(_this.element).width)\r\n                && event.changedTouches[0].clientX > parseInt(window.getComputedStyle(_this.element).width)\r\n                && !_this.isTouchWasOnDrawer) {\r\n                _this.element.style.left = \"\" + -parseInt(window.getComputedStyle(_this.element).width);\r\n                _this.element.classList.remove('opened');\r\n                _this.element.classList.add('closed');\r\n                _this.element.classList.remove('touched');\r\n                _this.overlay.classList.remove('visible');\r\n                _this.isMenuOpen = false;\r\n            }\r\n        };\r\n        this.element = document.getElementsByClassName('nav-drawer').item(0);\r\n        this.overlay = document.getElementsByClassName('overlay').item(0);\r\n    }\r\n    NavDrawerComponent.prototype.ngOnInit = function () {\r\n        document.addEventListener('touchmove', this.handleTouchMove, false);\r\n        document.addEventListener('touchstart', this.handleTouchStart, false);\r\n        document.addEventListener('touchend', this.handleTouchEnd, false);\r\n    };\r\n    NavDrawerComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'nav-drawer',\r\n            templateUrl: './app/components/navigation-drawer/navigation-drawer.html',\r\n            styleUrls: ['./app/components/navigation-drawer/navigation-drawer.css'],\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], NavDrawerComponent);\r\n    return NavDrawerComponent;\r\n}());\r\nexports.NavDrawerComponent = NavDrawerComponent;\r\n//# sourceMappingURL=navigation-drawer.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/navigation-drawer/navigation-drawer.js\n ** module id = 74\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar OverlayComponent = (function () {\r\n    function OverlayComponent() {\r\n    }\r\n    OverlayComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'overlay',\r\n            templateUrl: './app/components/overlay/overlay.html',\r\n            styleUrls: ['./app/components/overlay/overlay.css'],\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], OverlayComponent);\r\n    return OverlayComponent;\r\n}());\r\nexports.OverlayComponent = OverlayComponent;\r\n//# sourceMappingURL=overlay.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/overlay/overlay.js\n ** module id = 75\n ** module chunks = 0\n **/","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular2-material/core')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular2-material/core'], factory) :\n    (factory((global.md = global.md || {}, global.md.button = global.md.button || {}),global.ng.core,global.ng.common,global.md.core));\n}(this, (function (exports,_angular_core,_angular_common,_angular2Material_core) { 'use strict';\n\nvar __extends = (window && window.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n// TODO(jelbourn): Make the `isMouseDown` stuff done with one global listener.\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\nvar MdButton = (function () {\n    function MdButton(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */\n        this._isKeyboardFocused = false;\n        /** Whether a mousedown has occurred on this element in the last 100ms. */\n        this._isMouseDown = false;\n        /** Whether the ripple effect on click should be disabled. */\n        this.disableRipple = false;\n    }\n    Object.defineProperty(MdButton.prototype, \"color\", {\n        get: function () {\n            return this._color;\n        },\n        set: function (value) {\n            this._updateColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MdButton.prototype._setMousedown = function () {\n        var _this = this;\n        // We only *show* the focus style when focus has come to the button via the keyboard.\n        // The Material Design spec is silent on this topic, and without doing this, the\n        // button continues to look :active after clicking.\n        // @see http://marcysutton.com/button-focus-hell/\n        this._isMouseDown = true;\n        setTimeout(function () { _this._isMouseDown = false; }, 100);\n    };\n    MdButton.prototype._updateColor = function (newColor) {\n        this._setElementColor(this._color, false);\n        this._setElementColor(newColor, true);\n        this._color = newColor;\n    };\n    MdButton.prototype._setElementColor = function (color, isAdd) {\n        if (color != null && color != '') {\n            this._renderer.setElementClass(this._elementRef.nativeElement, \"md-\" + color, isAdd);\n        }\n    };\n    MdButton.prototype._setKeyboardFocus = function () {\n        this._isKeyboardFocused = !this._isMouseDown;\n    };\n    MdButton.prototype._removeKeyboardFocus = function () {\n        this._isKeyboardFocused = false;\n    };\n    /** TODO(hansl): e2e test this function. */\n    MdButton.prototype.focus = function () {\n        this._elementRef.nativeElement.focus();\n    };\n    MdButton.prototype.getHostElement = function () {\n        return this._elementRef.nativeElement;\n    };\n    MdButton.prototype.isRoundButton = function () {\n        var el = this._elementRef.nativeElement;\n        return el.hasAttribute('md-icon-button') ||\n            el.hasAttribute('md-fab') ||\n            el.hasAttribute('md-mini-fab');\n    };\n    MdButton.prototype.isRippleEnabled = function () {\n        return !this.disableRipple;\n    };\n    __decorate([\n        _angular_core.Input(),\n        _angular2Material_core.BooleanFieldValue(), \n        __metadata('design:type', Boolean)\n    ], MdButton.prototype, \"disableRipple\", void 0);\n    MdButton = __decorate([\n        _angular_core.Component({selector: 'button[md-button], button[md-raised-button], button[md-icon-button], ' +\n                'button[md-fab], button[md-mini-fab]',\n            inputs: ['color'],\n            host: {\n                '[class.md-button-focus]': '_isKeyboardFocused',\n                '(mousedown)': '_setMousedown()',\n                '(focus)': '_setKeyboardFocus()',\n                '(blur)': '_removeKeyboardFocus()',\n            },\n            template: \"<span class=\\\"md-button-wrapper\\\"><ng-content></ng-content></span> \",\n            styles: [\"/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\\\"external-card\\\" class=\\\"md-elevation-z2\\\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ /** * This mixin overrides default button styles like the gray background, * the border, and the outline. */ /** Applies a property to an md-button element for each of the supported palettes. */ /** Applies a focus style to an md-button element for each of the supported palettes. */ [md-raised-button], [md-fab], [md-mini-fab], [md-button], [md-icon-button] { box-sizing: border-box; position: relative; background: transparent; cursor: pointer; user-select: none; outline: none; border: none; display: inline-block; white-space: nowrap; text-decoration: none; vertical-align: baseline; font-size: 14px; font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif; font-weight: 500; color: currentColor; text-align: center; margin: 0; min-width: 88px; line-height: 36px; padding: 0 16px; border-radius: 3px; } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab], .md-primary[md-button], .md-primary[md-icon-button] { color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab], .md-accent[md-button], .md-accent[md-icon-button] { color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab], .md-warn[md-button], .md-warn[md-icon-button] { color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-primary[disabled][md-button], .md-primary[disabled][md-icon-button], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-accent[disabled][md-button], .md-accent[disabled][md-icon-button], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], .md-warn[disabled][md-button], .md-warn[disabled][md-icon-button], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab], [disabled][disabled][md-button], [disabled][disabled][md-icon-button] { color: rgba(0, 0, 0, 0.38); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab], [disabled][md-button], [disabled][md-icon-button] { cursor: default; } .md-button-focus[md-raised-button]::after, .md-button-focus[md-fab]::after, .md-button-focus[md-mini-fab]::after, .md-button-focus[md-button]::after, .md-button-focus[md-icon-button]::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } .md-button-focus.md-primary[md-raised-button]::after, .md-button-focus.md-primary[md-fab]::after, .md-button-focus.md-primary[md-mini-fab]::after, .md-button-focus.md-primary[md-button]::after, .md-button-focus.md-primary[md-icon-button]::after { background-color: rgba(0, 150, 136, 0.12); } .md-button-focus.md-accent[md-raised-button]::after, .md-button-focus.md-accent[md-fab]::after, .md-button-focus.md-accent[md-mini-fab]::after, .md-button-focus.md-accent[md-button]::after, .md-button-focus.md-accent[md-icon-button]::after { background-color: rgba(156, 39, 176, 0.12); } .md-button-focus.md-warn[md-raised-button]::after, .md-button-focus.md-warn[md-fab]::after, .md-button-focus.md-warn[md-mini-fab]::after, .md-button-focus.md-warn[md-button]::after, .md-button-focus.md-warn[md-icon-button]::after { background-color: rgba(244, 67, 54, 0.12); } [md-raised-button], [md-fab], [md-mini-fab] { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); background-color: #fafafa; transform: translate3d(0, 0, 0); transition: background 400ms cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { color: white; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { color: rgba(255, 255, 255, 0.870588); } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { color: white; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { color: rgba(0, 0, 0, 0.38); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { background-color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { background-color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { background-color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } [md-raised-button]:active, [md-fab]:active, [md-mini-fab]:active { box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab] { box-shadow: none; } [md-button]:hover::after, [md-icon-button]:hover::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } [md-button]:hover.md-primary::after, [md-icon-button]:hover.md-primary::after { background-color: rgba(0, 150, 136, 0.12); } [md-button]:hover.md-accent::after, [md-icon-button]:hover.md-accent::after { background-color: rgba(156, 39, 176, 0.12); } [md-button]:hover.md-warn::after, [md-icon-button]:hover.md-warn::after { background-color: rgba(244, 67, 54, 0.12); } [md-button][disabled]:hover.md-primary, [md-button][disabled]:hover.md-accent, [md-button][disabled]:hover.md-warn, [md-button][disabled]:hover::after, [md-icon-button][disabled]:hover.md-primary, [md-icon-button][disabled]:hover.md-accent, [md-icon-button][disabled]:hover.md-warn, [md-icon-button][disabled]:hover::after { background-color: transparent; } [md-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 56px; height: 56px; padding: 0; } [md-fab] i, [md-fab] md-icon { padding: 16px 0; } [md-mini-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 40px; height: 40px; padding: 0; } [md-mini-fab] i, [md-mini-fab] md-icon { padding: 8px 0; } [md-icon-button] { min-width: 0; padding: 0; width: 40px; height: 40px; line-height: 24px; border-radius: 50%; } [md-icon-button] .md-button-wrapper > * { vertical-align: middle; } .md-button-ripple { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } .md-button-ripple-round { border-radius: 50%; z-index: 1; } @media screen and (-ms-high-contrast: active) { .md-raised-button, .md-fab, .md-mini-fab { border: 1px solid #fff; } } /*# sourceMappingURL=button.css.map */ \"],\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,\n        }), \n        __metadata('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])\n    ], MdButton);\n    return MdButton;\n}());\nvar MdAnchor = (function (_super) {\n    __extends(MdAnchor, _super);\n    function MdAnchor(elementRef, renderer) {\n        _super.call(this, elementRef, renderer);\n        this._disabled = null;\n    }\n    Object.defineProperty(MdAnchor.prototype, \"tabIndex\", {\n        get: function () {\n            return this.disabled ? -1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAnchor.prototype, \"isAriaDisabled\", {\n        get: function () {\n            return this.disabled ? 'true' : 'false';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAnchor.prototype, \"disabled\", {\n        get: function () { return this._disabled; },\n        set: function (value) {\n            // The presence of *any* disabled value makes the component disabled, *except* for false.\n            this._disabled = (value != null && value != false) ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MdAnchor.prototype._haltDisabledEvents = function (event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    };\n    __decorate([\n        _angular_core.HostBinding('tabIndex'), \n        __metadata('design:type', Number)\n    ], MdAnchor.prototype, \"tabIndex\", null);\n    __decorate([\n        _angular_core.HostBinding('attr.aria-disabled'), \n        __metadata('design:type', String)\n    ], MdAnchor.prototype, \"isAriaDisabled\", null);\n    __decorate([\n        _angular_core.HostBinding('attr.disabled'),\n        _angular_core.Input('disabled'), \n        __metadata('design:type', Object)\n    ], MdAnchor.prototype, \"disabled\", null);\n    MdAnchor = __decorate([\n        _angular_core.Component({selector: 'a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',\n            inputs: ['color'],\n            host: {\n                '[class.md-button-focus]': '_isKeyboardFocused',\n                '(mousedown)': '_setMousedown()',\n                '(focus)': '_setKeyboardFocus()',\n                '(blur)': '_removeKeyboardFocus()',\n                '(click)': '_haltDisabledEvents($event)',\n            },\n            template: \"<span class=\\\"md-button-wrapper\\\"><ng-content></ng-content></span> \",\n            styles: [\"/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\\\"external-card\\\" class=\\\"md-elevation-z2\\\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ /** * This mixin overrides default button styles like the gray background, * the border, and the outline. */ /** Applies a property to an md-button element for each of the supported palettes. */ /** Applies a focus style to an md-button element for each of the supported palettes. */ [md-raised-button], [md-fab], [md-mini-fab], [md-button], [md-icon-button] { box-sizing: border-box; position: relative; background: transparent; cursor: pointer; user-select: none; outline: none; border: none; display: inline-block; white-space: nowrap; text-decoration: none; vertical-align: baseline; font-size: 14px; font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif; font-weight: 500; color: currentColor; text-align: center; margin: 0; min-width: 88px; line-height: 36px; padding: 0 16px; border-radius: 3px; } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab], .md-primary[md-button], .md-primary[md-icon-button] { color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab], .md-accent[md-button], .md-accent[md-icon-button] { color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab], .md-warn[md-button], .md-warn[md-icon-button] { color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-primary[disabled][md-button], .md-primary[disabled][md-icon-button], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-accent[disabled][md-button], .md-accent[disabled][md-icon-button], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], .md-warn[disabled][md-button], .md-warn[disabled][md-icon-button], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab], [disabled][disabled][md-button], [disabled][disabled][md-icon-button] { color: rgba(0, 0, 0, 0.38); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab], [disabled][md-button], [disabled][md-icon-button] { cursor: default; } .md-button-focus[md-raised-button]::after, .md-button-focus[md-fab]::after, .md-button-focus[md-mini-fab]::after, .md-button-focus[md-button]::after, .md-button-focus[md-icon-button]::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } .md-button-focus.md-primary[md-raised-button]::after, .md-button-focus.md-primary[md-fab]::after, .md-button-focus.md-primary[md-mini-fab]::after, .md-button-focus.md-primary[md-button]::after, .md-button-focus.md-primary[md-icon-button]::after { background-color: rgba(0, 150, 136, 0.12); } .md-button-focus.md-accent[md-raised-button]::after, .md-button-focus.md-accent[md-fab]::after, .md-button-focus.md-accent[md-mini-fab]::after, .md-button-focus.md-accent[md-button]::after, .md-button-focus.md-accent[md-icon-button]::after { background-color: rgba(156, 39, 176, 0.12); } .md-button-focus.md-warn[md-raised-button]::after, .md-button-focus.md-warn[md-fab]::after, .md-button-focus.md-warn[md-mini-fab]::after, .md-button-focus.md-warn[md-button]::after, .md-button-focus.md-warn[md-icon-button]::after { background-color: rgba(244, 67, 54, 0.12); } [md-raised-button], [md-fab], [md-mini-fab] { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); background-color: #fafafa; transform: translate3d(0, 0, 0); transition: background 400ms cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { color: white; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { color: rgba(255, 255, 255, 0.870588); } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { color: white; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { color: rgba(0, 0, 0, 0.38); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { background-color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { background-color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { background-color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } [md-raised-button]:active, [md-fab]:active, [md-mini-fab]:active { box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab] { box-shadow: none; } [md-button]:hover::after, [md-icon-button]:hover::after { position: absolute; top: 0; left: 0; bottom: 0; right: 0; content: ''; background-color: rgba(0, 0, 0, 0.12); border-radius: inherit; pointer-events: none; } [md-button]:hover.md-primary::after, [md-icon-button]:hover.md-primary::after { background-color: rgba(0, 150, 136, 0.12); } [md-button]:hover.md-accent::after, [md-icon-button]:hover.md-accent::after { background-color: rgba(156, 39, 176, 0.12); } [md-button]:hover.md-warn::after, [md-icon-button]:hover.md-warn::after { background-color: rgba(244, 67, 54, 0.12); } [md-button][disabled]:hover.md-primary, [md-button][disabled]:hover.md-accent, [md-button][disabled]:hover.md-warn, [md-button][disabled]:hover::after, [md-icon-button][disabled]:hover.md-primary, [md-icon-button][disabled]:hover.md-accent, [md-icon-button][disabled]:hover.md-warn, [md-icon-button][disabled]:hover::after { background-color: transparent; } [md-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 56px; height: 56px; padding: 0; } [md-fab] i, [md-fab] md-icon { padding: 16px 0; } [md-mini-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 40px; height: 40px; padding: 0; } [md-mini-fab] i, [md-mini-fab] md-icon { padding: 8px 0; } [md-icon-button] { min-width: 0; padding: 0; width: 40px; height: 40px; line-height: 24px; border-radius: 50%; } [md-icon-button] .md-button-wrapper > * { vertical-align: middle; } .md-button-ripple { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } .md-button-ripple-round { border-radius: 50%; z-index: 1; } @media screen and (-ms-high-contrast: active) { .md-raised-button, .md-fab, .md-mini-fab { border: 1px solid #fff; } } /*# sourceMappingURL=button.css.map */ \"],\n            encapsulation: _angular_core.ViewEncapsulation.None\n        }), \n        __metadata('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])\n    ], MdAnchor);\n    return MdAnchor;\n}(MdButton));\nvar MdButtonModule = (function () {\n    function MdButtonModule() {\n    }\n    MdButtonModule.forRoot = function () {\n        return {\n            ngModule: MdButtonModule,\n            providers: []\n        };\n    };\n    MdButtonModule = __decorate([\n        _angular_core.NgModule({\n            imports: [_angular_common.CommonModule, _angular2Material_core.MdRippleModule],\n            exports: [MdButton, MdAnchor],\n            declarations: [MdButton, MdAnchor],\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdButtonModule);\n    return MdButtonModule;\n}());\n\nexports.MdButton = MdButton;\nexports.MdAnchor = MdAnchor;\nexports.MdButtonModule = MdButtonModule;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/button/button.umd.js\n ** module id = 76\n ** module chunks = 0\n **/","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular2-material/core'), require('@angular/platform-browser')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular2-material/core', '@angular/platform-browser'], factory) :\n    (factory((global.md = global.md || {}, global.md.core = global.md.core || {}),global.ng.core,global.md.core,global.ng.platformBrowser));\n}(this, (function (exports,_angular_core,_angular2Material_core,_angular_platformBrowser) { 'use strict';\n\nvar __decorate$1 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$1 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nvar MdLine = (function () {\n    function MdLine() {\n    }\n    MdLine = __decorate$1([\n        _angular_core.Directive({ selector: '[md-line]' }), \n        __metadata$1('design:paramtypes', [])\n    ], MdLine);\n    return MdLine;\n}());\n/* Helper that takes a query list of lines and sets the correct class on the host */\nvar MdLineSetter = (function () {\n    function MdLineSetter(_lines, _renderer, _element) {\n        var _this = this;\n        this._lines = _lines;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._setLineClass(this._lines.length);\n        this._lines.changes.subscribe(function () {\n            _this._setLineClass(_this._lines.length);\n        });\n    }\n    MdLineSetter.prototype._setLineClass = function (count) {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(\"md-\" + count + \"-line\", true);\n        }\n    };\n    MdLineSetter.prototype._resetClasses = function () {\n        this._setClass('md-2-line', false);\n        this._setClass('md-3-line', false);\n    };\n    MdLineSetter.prototype._setClass = function (className, bool) {\n        this._renderer.setElementClass(this._element.nativeElement, className, bool);\n    };\n    return MdLineSetter;\n}());\nvar MdLineModule = (function () {\n    function MdLineModule() {\n    }\n    MdLineModule = __decorate$1([\n        _angular_core.NgModule({\n            exports: [MdLine],\n            declarations: [MdLine],\n        }), \n        __metadata$1('design:paramtypes', [])\n    ], MdLineModule);\n    return MdLineModule;\n}());\n\nvar __decorate$2 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$2 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/**\n * Directive to listen to changes of direction of part of the DOM.\n *\n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nvar Dir = (function () {\n    function Dir() {\n        this._dir = 'ltr';\n        this.dirChange = new _angular_core.EventEmitter();\n    }\n    Object.defineProperty(Dir.prototype, \"dir\", {\n        get: function () {\n            return this._dir;\n        },\n        set: function (v) {\n            var old = this._dir;\n            this._dir = v;\n            if (old != this._dir) {\n                this.dirChange.emit(null);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dir.prototype, \"value\", {\n        get: function () { return this.dir; },\n        set: function (v) { this.dir = v; },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate$2([\n        _angular_core.Input('dir'), \n        __metadata$2('design:type', String)\n    ], Dir.prototype, \"_dir\", void 0);\n    __decorate$2([\n        _angular_core.Output(), \n        __metadata$2('design:type', Object)\n    ], Dir.prototype, \"dirChange\", void 0);\n    __decorate$2([\n        _angular_core.HostBinding('attr.dir'), \n        __metadata$2('design:type', String)\n    ], Dir.prototype, \"dir\", null);\n    Dir = __decorate$2([\n        _angular_core.Directive({\n            selector: '[dir]',\n            // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n            exportAs: '$implicit'\n        }), \n        __metadata$2('design:paramtypes', [])\n    ], Dir);\n    return Dir;\n}());\nvar RtlModule = (function () {\n    function RtlModule() {\n    }\n    RtlModule.forRoot = function () {\n        return {\n            ngModule: RtlModule,\n            providers: []\n        };\n    };\n    RtlModule = __decorate$2([\n        _angular_core.NgModule({\n            exports: [Dir],\n            declarations: [Dir]\n        }), \n        __metadata$2('design:paramtypes', [])\n    ], RtlModule);\n    return RtlModule;\n}());\n\n/** TODO: internal */\nvar ForegroundRippleState;\n(function (ForegroundRippleState) {\n    ForegroundRippleState[ForegroundRippleState[\"NEW\"] = 0] = \"NEW\";\n    ForegroundRippleState[ForegroundRippleState[\"EXPANDING\"] = 1] = \"EXPANDING\";\n    ForegroundRippleState[ForegroundRippleState[\"FADING_OUT\"] = 2] = \"FADING_OUT\";\n})(ForegroundRippleState || (ForegroundRippleState = {}));\n/**\n * Wrapper for a foreground ripple DOM element and its animation state.\n * TODO: internal\n */\nvar ForegroundRipple = (function () {\n    function ForegroundRipple(rippleElement) {\n        this.rippleElement = rippleElement;\n        this.state = ForegroundRippleState.NEW;\n    }\n    return ForegroundRipple;\n}());\nvar RIPPLE_SPEED_PX_PER_SECOND = 1000;\nvar MIN_RIPPLE_FILL_TIME_SECONDS = 0.1;\nvar MAX_RIPPLE_FILL_TIME_SECONDS = 0.3;\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nvar distanceToFurthestCorner = function (x, y, rect) {\n    var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * TODO: internal\n */\nvar RippleRenderer = (function () {\n    function RippleRenderer(_elementRef, _eventHandlers) {\n        this._eventHandlers = _eventHandlers;\n        this._rippleElement = _elementRef.nativeElement;\n        // It might be nice to delay creating the background until it's needed, but doing this in\n        // fadeInRippleBackground causes the first click event to not be handled reliably.\n        this._backgroundDiv = document.createElement('div');\n        this._backgroundDiv.classList.add('md-ripple-background');\n        this._rippleElement.appendChild(this._backgroundDiv);\n    }\n    /**\n     * Installs event handlers on the given trigger element, and removes event handlers from the\n     * previous trigger if needed.\n     */\n    RippleRenderer.prototype.setTriggerElement = function (newTrigger) {\n        var _this = this;\n        if (this._triggerElement !== newTrigger) {\n            if (this._triggerElement) {\n                this._eventHandlers.forEach(function (eventHandler, eventName) {\n                    _this._triggerElement.removeEventListener(eventName, eventHandler);\n                });\n            }\n            this._triggerElement = newTrigger;\n            if (this._triggerElement) {\n                this._eventHandlers.forEach(function (eventHandler, eventName) {\n                    _this._triggerElement.addEventListener(eventName, eventHandler);\n                });\n            }\n        }\n    };\n    /**\n     * Installs event handlers on the host element of the md-ripple directive.\n     */\n    RippleRenderer.prototype.setTriggerElementToHost = function () {\n        this.setTriggerElement(this._rippleElement);\n    };\n    /**\n     * Removes event handlers from the current trigger element if needed.\n     */\n    RippleRenderer.prototype.clearTriggerElement = function () {\n        this.setTriggerElement(null);\n    };\n    /**\n     * Creates a foreground ripple and sets its animation to expand and fade in from the position\n     * given by rippleOriginLeft and rippleOriginTop (or from the center of the <md-ripple>\n     * bounding rect if centered is true).\n     */\n    RippleRenderer.prototype.createForegroundRipple = function (rippleOriginLeft, rippleOriginTop, color, centered, radius, speedFactor, transitionEndCallback) {\n        var parentRect = this._rippleElement.getBoundingClientRect();\n        // Create a foreground ripple div with the size and position of the fully expanded ripple.\n        // When the div is created, it's given a transform style that causes the ripple to be displayed\n        // small and centered on the event location (or the center of the bounding rect if the centered\n        // argument is true). Removing that transform causes the ripple to animate to its natural size.\n        var startX = centered ? (parentRect.left + parentRect.width / 2) : rippleOriginLeft;\n        var startY = centered ? (parentRect.top + parentRect.height / 2) : rippleOriginTop;\n        var offsetX = startX - parentRect.left;\n        var offsetY = startY - parentRect.top;\n        var maxRadius = radius > 0 ? radius : distanceToFurthestCorner(startX, startY, parentRect);\n        var rippleDiv = document.createElement('div');\n        this._rippleElement.appendChild(rippleDiv);\n        rippleDiv.classList.add('md-ripple-foreground');\n        rippleDiv.style.left = (offsetX - maxRadius) + \"px\";\n        rippleDiv.style.top = (offsetY - maxRadius) + \"px\";\n        rippleDiv.style.width = 2 * maxRadius + \"px\";\n        rippleDiv.style.height = rippleDiv.style.width;\n        // If color input is not set, this will default to the background color defined in CSS.\n        rippleDiv.style.backgroundColor = color;\n        // Start the ripple tiny.\n        rippleDiv.style.transform = \"scale(0.001)\";\n        var fadeInSeconds = (1 / (speedFactor || 1)) * Math.max(MIN_RIPPLE_FILL_TIME_SECONDS, Math.min(MAX_RIPPLE_FILL_TIME_SECONDS, maxRadius / RIPPLE_SPEED_PX_PER_SECOND));\n        rippleDiv.style.transitionDuration = fadeInSeconds + \"s\";\n        // https://timtaubert.de/blog/2012/09/css-transitions-for-dynamically-created-dom-elements/\n        window.getComputedStyle(rippleDiv).opacity;\n        rippleDiv.classList.add('md-ripple-fade-in');\n        // Clearing the transform property causes the ripple to animate to its full size.\n        rippleDiv.style.transform = '';\n        var ripple = new ForegroundRipple(rippleDiv);\n        ripple.state = ForegroundRippleState.EXPANDING;\n        rippleDiv.addEventListener('transitionend', function (event) { return transitionEndCallback(ripple, event); });\n    };\n    /**\n     * Fades out a foreground ripple after it has fully expanded and faded in.\n     */\n    RippleRenderer.prototype.fadeOutForegroundRipple = function (ripple) {\n        ripple.classList.remove('md-ripple-fade-in');\n        ripple.classList.add('md-ripple-fade-out');\n    };\n    /**\n     * Removes a foreground ripple from the DOM after it has faded out.\n     */\n    RippleRenderer.prototype.removeRippleFromDom = function (ripple) {\n        ripple.parentElement.removeChild(ripple);\n    };\n    /**\n     * Fades in the ripple background.\n     */\n    RippleRenderer.prototype.fadeInRippleBackground = function (color) {\n        this._backgroundDiv.classList.add('md-ripple-active');\n        // If color is not set, this will default to the background color defined in CSS.\n        this._backgroundDiv.style.backgroundColor = color;\n    };\n    /**\n     * Fades out the ripple background.\n     */\n    RippleRenderer.prototype.fadeOutRippleBackground = function () {\n        if (this._backgroundDiv) {\n            this._backgroundDiv.classList.remove('md-ripple-active');\n        }\n    };\n    return RippleRenderer;\n}());\n\nvar __decorate$3 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$3 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar MdRipple = (function () {\n    function MdRipple(_elementRef) {\n        var _this = this;\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.maxRadius = 0;\n        /**\n         * If set, the normal duration of ripple animations is divided by this value. For example,\n         * setting it to 0.5 will cause the animations to take twice as long.\n         */\n        this.speedFactor = 1;\n        // These event handlers are attached to the element that triggers the ripple animations.\n        var eventHandlers = new Map();\n        eventHandlers.set('mousedown', function (event) { return _this._mouseDown(event); });\n        eventHandlers.set('click', function (event) { return _this._click(event); });\n        eventHandlers.set('mouseleave', function (event) { return _this._mouseLeave(event); });\n        this._rippleRenderer = new RippleRenderer(_elementRef, eventHandlers);\n    }\n    /** TODO: internal */\n    MdRipple.prototype.ngOnInit = function () {\n        // If no trigger element was explicity set, use the host element\n        if (!this.trigger) {\n            this._rippleRenderer.setTriggerElementToHost();\n        }\n    };\n    /** TODO: internal */\n    MdRipple.prototype.ngOnDestroy = function () {\n        // Remove event listeners on the trigger element.\n        this._rippleRenderer.clearTriggerElement();\n    };\n    /** TODO: internal */\n    MdRipple.prototype.ngOnChanges = function (changes) {\n        // If the trigger element changed (or is being initially set), add event listeners to it.\n        var changedInputs = Object.keys(changes);\n        if (changedInputs.indexOf('trigger') !== -1) {\n            this._rippleRenderer.setTriggerElement(this.trigger);\n        }\n    };\n    /**\n     * Responds to the start of a ripple animation trigger by fading the background in.\n     */\n    MdRipple.prototype.start = function () {\n        this._rippleRenderer.fadeInRippleBackground(this.backgroundColor);\n    };\n    /**\n     * Responds to the end of a ripple animation trigger by fading the background out, and creating a\n     * foreground ripple that expands from the event location (or from the center of the element if\n     * the \"centered\" property is set or forceCenter is true).\n     */\n    MdRipple.prototype.end = function (left, top, forceCenter) {\n        var _this = this;\n        if (forceCenter === void 0) { forceCenter = true; }\n        this._rippleRenderer.createForegroundRipple(left, top, this.color, this.centered || forceCenter, this.maxRadius, this.speedFactor, function (ripple, e) { return _this._rippleTransitionEnded(ripple, e); });\n        this._rippleRenderer.fadeOutRippleBackground();\n    };\n    MdRipple.prototype._rippleTransitionEnded = function (ripple, event) {\n        if (event.propertyName === 'opacity') {\n            // If the ripple finished expanding, start fading it out. If it finished fading out,\n            // remove it from the DOM.\n            switch (ripple.state) {\n                case ForegroundRippleState.EXPANDING:\n                    this._rippleRenderer.fadeOutForegroundRipple(ripple.rippleElement);\n                    ripple.state = ForegroundRippleState.FADING_OUT;\n                    break;\n                case ForegroundRippleState.FADING_OUT:\n                    this._rippleRenderer.removeRippleFromDom(ripple.rippleElement);\n                    break;\n            }\n        }\n    };\n    /**\n     * Called when the trigger element receives a mousedown event. Starts the ripple animation by\n     * fading in the background.\n     */\n    MdRipple.prototype._mouseDown = function (event) {\n        if (!this.disabled && event.button === 0) {\n            this.start();\n        }\n    };\n    /**\n     * Called when the trigger element receives a click event. Creates a foreground ripple and\n     * runs its animation.\n     */\n    MdRipple.prototype._click = function (event) {\n        if (!this.disabled && event.button === 0) {\n            // If screen and page positions are all 0, this was probably triggered by a keypress.\n            // In that case, use the center of the bounding rect as the ripple origin.\n            // FIXME: This fails on IE11, which still sets pageX/Y and screenX/Y on keyboard clicks.\n            var isKeyEvent = (event.screenX === 0 && event.screenY === 0 && event.pageX === 0 && event.pageY === 0);\n            this.end(event.pageX, event.pageY, isKeyEvent);\n        }\n    };\n    /**\n     * Called when the trigger element receives a mouseleave event. Fades out the background.\n     */\n    MdRipple.prototype._mouseLeave = function (event) {\n        // We can always fade out the background here; It's a no-op if it was already inactive.\n        this._rippleRenderer.fadeOutRippleBackground();\n    };\n    __decorate$3([\n        _angular_core.Input('md-ripple-trigger'), \n        __metadata$3('design:type', Object)\n    ], MdRipple.prototype, \"trigger\", void 0);\n    __decorate$3([\n        _angular_core.Input('md-ripple-centered'), \n        __metadata$3('design:type', Boolean)\n    ], MdRipple.prototype, \"centered\", void 0);\n    __decorate$3([\n        _angular_core.Input('md-ripple-disabled'), \n        __metadata$3('design:type', Boolean)\n    ], MdRipple.prototype, \"disabled\", void 0);\n    __decorate$3([\n        _angular_core.Input('md-ripple-max-radius'), \n        __metadata$3('design:type', Number)\n    ], MdRipple.prototype, \"maxRadius\", void 0);\n    __decorate$3([\n        _angular_core.Input('md-ripple-speed-factor'), \n        __metadata$3('design:type', Number)\n    ], MdRipple.prototype, \"speedFactor\", void 0);\n    __decorate$3([\n        _angular_core.Input('md-ripple-color'), \n        __metadata$3('design:type', String)\n    ], MdRipple.prototype, \"color\", void 0);\n    __decorate$3([\n        _angular_core.Input('md-ripple-background-color'), \n        __metadata$3('design:type', String)\n    ], MdRipple.prototype, \"backgroundColor\", void 0);\n    __decorate$3([\n        _angular_core.HostBinding('class.md-ripple-focused'),\n        _angular_core.Input('md-ripple-focused'), \n        __metadata$3('design:type', Boolean)\n    ], MdRipple.prototype, \"focused\", void 0);\n    __decorate$3([\n        _angular_core.HostBinding('class.md-ripple-unbounded'),\n        _angular_core.Input('md-ripple-unbounded'), \n        __metadata$3('design:type', Boolean)\n    ], MdRipple.prototype, \"unbounded\", void 0);\n    MdRipple = __decorate$3([\n        _angular_core.Directive({\n            selector: '[md-ripple]',\n        }), \n        __metadata$3('design:paramtypes', [_angular_core.ElementRef])\n    ], MdRipple);\n    return MdRipple;\n}());\nvar MdRippleModule = (function () {\n    function MdRippleModule() {\n    }\n    MdRippleModule.forRoot = function () {\n        return {\n            ngModule: MdRippleModule,\n            providers: []\n        };\n    };\n    MdRippleModule = __decorate$3([\n        _angular_core.NgModule({\n            exports: [MdRipple],\n            declarations: [MdRipple],\n        }), \n        __metadata$3('design:paramtypes', [])\n    ], MdRippleModule);\n    return MdRippleModule;\n}());\n\n// TODO(kara): Revisit why error messages are not being properly set.\nvar __extends$3 = (window && window.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * Wrapper around Error that sets the error message.\n */\nvar MdError = (function (_super) {\n    __extends$3(MdError, _super);\n    function MdError(value) {\n        _super.call(this);\n        this.message = value;\n    }\n    return MdError;\n}(Error));\n\nvar __extends$2 = (window && window.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/** Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin. */\nvar MdComponentPortalAttachedToDomWithoutOriginError = (function (_super) {\n    __extends$2(MdComponentPortalAttachedToDomWithoutOriginError, _super);\n    function MdComponentPortalAttachedToDomWithoutOriginError() {\n        _super.call(this, 'A ComponentPortal must have an origin set when attached to a DomPortalHost ' +\n            'because the DOM element is not part of the Angular application context.');\n    }\n    return MdComponentPortalAttachedToDomWithoutOriginError;\n}(MdError));\n/** Exception thrown when attempting to attach a null portal to a host. */\nvar MdNullPortalError = (function (_super) {\n    __extends$2(MdNullPortalError, _super);\n    function MdNullPortalError() {\n        _super.call(this, 'Must provide a portal to attach');\n    }\n    return MdNullPortalError;\n}(MdError));\n/** Exception thrown when attempting to attach a portal to a host that is already attached. */\nvar MdPortalAlreadyAttachedError = (function (_super) {\n    __extends$2(MdPortalAlreadyAttachedError, _super);\n    function MdPortalAlreadyAttachedError() {\n        _super.call(this, 'Host already has a portal attached');\n    }\n    return MdPortalAlreadyAttachedError;\n}(MdError));\n/** Exception thrown when attempting to attach a portal to an already-disposed host. */\nvar MdPortalHostAlreadyDisposedError = (function (_super) {\n    __extends$2(MdPortalHostAlreadyDisposedError, _super);\n    function MdPortalHostAlreadyDisposedError() {\n        _super.call(this, 'This PortalHost has already been disposed');\n    }\n    return MdPortalHostAlreadyDisposedError;\n}(MdError));\n/** Exception thrown when attempting to attach an unknown portal type. */\nvar MdUnknownPortalTypeError = (function (_super) {\n    __extends$2(MdUnknownPortalTypeError, _super);\n    function MdUnknownPortalTypeError() {\n        _super.call(this, 'Attempting to attach an unknown Portal type. ' +\n            'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');\n    }\n    return MdUnknownPortalTypeError;\n}(MdError));\n/** Exception thrown when attempting to attach a portal to a null host. */\nvar MdNullPortalHostError = (function (_super) {\n    __extends$2(MdNullPortalHostError, _super);\n    function MdNullPortalHostError() {\n        _super.call(this, 'Attempting to attach a portal to a null PortalHost');\n    }\n    return MdNullPortalHostError;\n}(MdError));\n/** Exception thrown when attempting to detach a portal that is not attached. */\nvar MdNoPortalAttachedError = (function (_super) {\n    __extends$2(MdNoPortalAttachedError, _super);\n    function MdNoPortalAttachedError() {\n        _super.call(this, 'Attempting to detach a portal that is not attached to a host');\n    }\n    return MdNoPortalAttachedError;\n}(MdError));\n\nvar __extends$1 = (window && window.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n */\nvar Portal = (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    Portal.prototype.attach = function (host) {\n        if (host == null) {\n            throw new MdNullPortalHostError();\n        }\n        if (host.hasAttached()) {\n            throw new MdPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    };\n    /** Detach this portal from its host */\n    Portal.prototype.detach = function () {\n        var host = this._attachedHost;\n        if (host == null) {\n            throw new MdNoPortalAttachedError();\n        }\n        this._attachedHost = null;\n        return host.detach();\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detatch()`.\n     */\n    Portal.prototype.setAttachedHost = function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nvar ComponentPortal = (function (_super) {\n    __extends$1(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector) {\n        if (viewContainerRef === void 0) { viewContainerRef = null; }\n        if (injector === void 0) { injector = null; }\n        _super.call(this);\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nvar TemplatePortal = (function (_super) {\n    __extends$1(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef) {\n        _super.call(this);\n        /**\n         * Additional locals for the instantiated embedded view.\n         * These locals can be seen as \"exports\" for the template, such as how ngFor has\n         * index / event / odd.\n         * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n         */\n        this.locals = new Map();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TemplatePortal.prototype.attach = function (host, locals) {\n        this.locals = locals == null ? new Map() : locals;\n        return _super.prototype.attach.call(this, host);\n    };\n    TemplatePortal.prototype.detach = function () {\n        this.locals = new Map();\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n */\nvar BasePortalHost = (function () {\n    function BasePortalHost() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n    }\n    /** Whether this host has an attached portal. */\n    BasePortalHost.prototype.hasAttached = function () {\n        return this._attachedPortal != null;\n    };\n    BasePortalHost.prototype.attach = function (portal) {\n        if (portal == null) {\n            throw new MdNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throw new MdPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throw new MdPortalHostAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throw new MdUnknownPortalTypeError();\n    };\n    BasePortalHost.prototype.detach = function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n        }\n        this._attachedPortal = null;\n        if (this._disposeFn != null) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    BasePortalHost.prototype.dispose = function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._isDisposed = true;\n    };\n    BasePortalHost.prototype.setDisposeFn = function (fn) {\n        this._disposeFn = fn;\n    };\n    return BasePortalHost;\n}());\n\nvar __extends = (window && window.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate$4 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$4 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n *\n * Usage:\n * <template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </template>\n */\nvar TemplatePortalDirective = (function (_super) {\n    __extends(TemplatePortalDirective, _super);\n    function TemplatePortalDirective(templateRef, viewContainerRef) {\n        _super.call(this, templateRef, viewContainerRef);\n    }\n    TemplatePortalDirective = __decorate$4([\n        _angular_core.Directive({\n            selector: '[portal]',\n            exportAs: 'portal',\n        }), \n        __metadata$4('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])\n    ], TemplatePortalDirective);\n    return TemplatePortalDirective;\n}(TemplatePortal));\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * <template [portalHost]=\"greeting\"></template>\n */\nvar PortalHostDirective = (function (_super) {\n    __extends(PortalHostDirective, _super);\n    function PortalHostDirective(_componentFactoryResolver, _viewContainerRef) {\n        _super.call(this);\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n    }\n    Object.defineProperty(PortalHostDirective.prototype, \"portal\", {\n        get: function () {\n            return this._portal;\n        },\n        set: function (p) {\n            this._replaceAttachedPortal(p);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attach the given ComponentPortal to this PortlHost using the ComponentFactoryResolver. */\n    PortalHostDirective.prototype.attachComponentPortal = function (portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalHost.\n        var viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);\n        this.setDisposeFn(function () { return ref.destroy(); });\n        return ref;\n    };\n    /** Attach the given TemplatePortal to this PortlHost as an embedded View. */\n    PortalHostDirective.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        this._viewContainerRef.createEmbeddedView(portal.templateRef);\n        this.setDisposeFn(function () { return _this._viewContainerRef.clear(); });\n        // TODO(jelbourn): return locals from view\n        return new Map();\n    };\n    /** Detatches the currently attached Portal (if there is one) and attaches the given Portal. */\n    PortalHostDirective.prototype._replaceAttachedPortal = function (p) {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        if (p) {\n            this.attach(p);\n            this._portal = p;\n        }\n    };\n    PortalHostDirective = __decorate$4([\n        _angular_core.Directive({\n            selector: '[portalHost]',\n            inputs: ['portal: portalHost']\n        }), \n        __metadata$4('design:paramtypes', [_angular_core.ComponentFactoryResolver, _angular_core.ViewContainerRef])\n    ], PortalHostDirective);\n    return PortalHostDirective;\n}(BasePortalHost));\nvar PortalModule = (function () {\n    function PortalModule() {\n    }\n    PortalModule.forRoot = function () {\n        return {\n            ngModule: PortalModule,\n            providers: []\n        };\n    };\n    PortalModule = __decorate$4([\n        _angular_core.NgModule({\n            exports: [TemplatePortalDirective, PortalHostDirective],\n            declarations: [TemplatePortalDirective, PortalHostDirective],\n        }), \n        __metadata$4('design:paramtypes', [])\n    ], PortalModule);\n    return PortalModule;\n}());\n\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nvar OverlayState = (function () {\n    function OverlayState() {\n    }\n    return OverlayState;\n}());\n\nvar __extends$4 = (window && window.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nvar DomPortalHost = (function (_super) {\n    __extends$4(DomPortalHost, _super);\n    function DomPortalHost(_hostDomElement, _componentFactoryResolver) {\n        _super.call(this);\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n    }\n    /** Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver. */\n    DomPortalHost.prototype.attachComponentPortal = function (portal) {\n        if (portal.viewContainerRef == null) {\n            throw new MdComponentPortalAttachedToDomWithoutOriginError();\n        }\n        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var ref = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);\n        var hostView = ref.hostView;\n        this._hostDomElement.appendChild(hostView.rootNodes[0]);\n        this.setDisposeFn(function () { return ref.destroy(); });\n        return ref;\n    };\n    DomPortalHost.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        var viewContainer = portal.viewContainerRef;\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n        viewRef.rootNodes.forEach(function (rootNode) { return _this._hostDomElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            var index = viewContainer.indexOf(viewRef);\n            if (index != -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return new Map();\n    };\n    DomPortalHost.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this._hostDomElement.parentNode != null) {\n            this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n        }\n    };\n    return DomPortalHost;\n}(BasePortalHost));\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar OverlayRef = (function () {\n    function OverlayRef(_portalHost, _pane, _state) {\n        this._portalHost = _portalHost;\n        this._pane = _pane;\n        this._state = _state;\n    }\n    OverlayRef.prototype.attach = function (portal) {\n        var attachResult = this._portalHost.attach(portal);\n        this.updatePosition();\n        return attachResult;\n    };\n    OverlayRef.prototype.detach = function () {\n        return this._portalHost.detach();\n    };\n    OverlayRef.prototype.dispose = function () {\n        this._portalHost.dispose();\n    };\n    OverlayRef.prototype.hasAttached = function () {\n        return this._portalHost.hasAttached();\n    };\n    /** Gets the current state config of the overlay. */\n    OverlayRef.prototype.getState = function () {\n        return this._state;\n    };\n    /** Updates the position of the overlay based on the position strategy. */\n    OverlayRef.prototype.updatePosition = function () {\n        if (this._state.positionStrategy) {\n            this._state.positionStrategy.apply(this._pane);\n        }\n    };\n    return OverlayRef;\n}());\n\nvar __decorate$8 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$8 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * TODO: internal\n */\nvar ViewportRuler = (function () {\n    function ViewportRuler() {\n    }\n    // TODO(jelbourn): cache the document's bounding rect and only update it when the window\n    // is resized (debounced).\n    /** Gets a ClientRect for the viewport's bounds. */\n    ViewportRuler.prototype.getViewportRect = function () {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        var documentRect = document.documentElement.getBoundingClientRect();\n        var scrollPosition = this.getViewportScrollPosition(documentRect);\n        var height = window.innerHeight;\n        var width = window.innerWidth;\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height: height,\n            width: width,\n        };\n    };\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @param documentRect\n     */\n    ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {\n        if (documentRect === void 0) { documentRect = document.documentElement.getBoundingClientRect(); }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        var top = documentRect.top < 0 && document.body.scrollTop == 0 ?\n            -documentRect.top :\n            document.body.scrollTop;\n        var left = documentRect.left < 0 && document.body.scrollLeft == 0 ?\n            -documentRect.left :\n            document.body.scrollLeft;\n        return { top: top, left: left };\n    };\n    ViewportRuler = __decorate$8([\n        _angular_core.Injectable(), \n        __metadata$8('design:paramtypes', [])\n    ], ViewportRuler);\n    return ViewportRuler;\n}());\n\n/** The points of the origin element and the overlay element to connect. */\nvar ConnectionPositionPair = (function () {\n    function ConnectionPositionPair(origin, overlay) {\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implict position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar ConnectedPositionStrategy = (function () {\n    function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {\n        this._connectedTo = _connectedTo;\n        this._originPos = _originPos;\n        this._overlayPos = _overlayPos;\n        this._viewportRuler = _viewportRuler;\n        // TODO(jelbourn): set RTL to the actual value from the app.\n        /** Whether the we're dealing with an RTL context */\n        this._isRtl = false;\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        this._origin = this._connectedTo.nativeElement;\n        this.withFallbackPosition(_originPos, _overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        get: function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * TODO: internal\n     */\n    ConnectedPositionStrategy.prototype.apply = function (element) {\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        var originRect = this._origin.getBoundingClientRect();\n        var overlayRect = element.getBoundingClientRect();\n        // We use the viewport rect to determine whether a position would go off-screen.\n        var viewportRect = this._viewportRuler.getViewportRect();\n        var firstOverlayPoint = null;\n        // We want to place the overlay in the first of the preferred positions such that the\n        // overlay fits on-screen.\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            // Get the (x, y) point of connection on the origin, and then use that to get the\n            // (top, left) coordinate for the overlay at `pos`.\n            var originPoint = this._getOriginConnectionPoint(originRect, pos);\n            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            firstOverlayPoint = firstOverlayPoint || overlayPoint;\n            // If the overlay in the calculated position fits on-screen, put it there and we're done.\n            if (this._willOverlayFitWithinViewport(overlayPoint, overlayRect, viewportRect)) {\n                this._setElementPosition(element, overlayPoint);\n                return Promise.resolve(null);\n            }\n        }\n        // TODO(jelbourn): fallback behavior for when none of the preferred positions fit on-screen.\n        // For now, just stick it in the first position and let it go off-screen.\n        this._setElementPosition(element, firstOverlayPoint);\n        return Promise.resolve(null);\n    };\n    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {\n        this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n        return this;\n    };\n    /**\n     * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n     * @param rect\n     */\n    ConnectedPositionStrategy.prototype._getStartX = function (rect) {\n        return this._isRtl ? rect.right : rect.left;\n    };\n    /**\n     * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n     * @param rect\n     */\n    ConnectedPositionStrategy.prototype._getEndX = function (rect) {\n        return this._isRtl ? rect.left : rect.right;\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param originRect\n     * @param pos\n     */\n    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {\n        var originStartX = this._getStartX(originRect);\n        var originEndX = this._getEndX(originRect);\n        var x;\n        if (pos.originX == 'center') {\n            x = originStartX + (originRect.width / 2);\n        }\n        else {\n            x = pos.originX == 'start' ? originStartX : originEndX;\n        }\n        var y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param originPoint\n     * @param overlayRect\n     * @param pos\n     */\n    ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n        // relative to the origin point.\n        var overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else {\n            overlayStartX = pos.overlayX == 'start' ? 0 : -overlayRect.width;\n        }\n        var overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY\n        };\n    };\n    /**\n     * Gets whether the overlay positioned at the given point will fit on-screen.\n     * @param overlayPoint The top-left coordinate of the overlay.\n     * @param overlayRect Bounding rect of the overlay, used to get its size.\n     * @param viewportRect The bounding viewport.\n     */\n    ConnectedPositionStrategy.prototype._willOverlayFitWithinViewport = function (overlayPoint, overlayRect, viewportRect) {\n        // TODO(jelbourn): probably also want some space between overlay edge and viewport edge.\n        return overlayPoint.x >= viewportRect.left &&\n            overlayPoint.x + overlayRect.width <= viewportRect.right &&\n            overlayPoint.y >= viewportRect.top &&\n            overlayPoint.y + overlayRect.height <= viewportRect.bottom;\n    };\n    /**\n     * Physically positions the overlay element to the given coordinate.\n     * @param element\n     * @param overlayPoint\n     */\n    ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayPoint) {\n        var scrollPos = this._viewportRuler.getViewportScrollPosition();\n        var x = overlayPoint.x + scrollPos.left;\n        var y = overlayPoint.y + scrollPos.top;\n        // TODO(jelbourn): we don't want to always overwrite the transform property here,\n        // because it will need to be used for animations.\n        _angular2Material_core.applyCssTransform(element, \"translateX(\" + x + \"px) translateY(\" + y + \"px)\");\n    };\n    return ConnectedPositionStrategy;\n}());\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport.\n */\nvar GlobalPositionStrategy = (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'absolute';\n        this._top = '';\n        this._bottom = '';\n        this._left = '';\n        this._right = '';\n        /** Array of individual applications of translateX(). Currently only for centering. */\n        this._translateX = [];\n        /** Array of individual applications of translateY(). Currently only for centering. */\n        this._translateY = [];\n    }\n    /** Sets the element to usee CSS position: fixed */\n    GlobalPositionStrategy.prototype.fixed = function () {\n        this._cssPosition = 'fixed';\n        return this;\n    };\n    /** Sets the element to usee CSS position: absolute. This is the default. */\n    GlobalPositionStrategy.prototype.absolute = function () {\n        this._cssPosition = 'absolute';\n        return this;\n    };\n    /** Sets the top position of the overlay. Clears any previously set vertical position. */\n    GlobalPositionStrategy.prototype.top = function (value) {\n        this._bottom = '';\n        this._translateY = [];\n        this._top = value;\n        return this;\n    };\n    /** Sets the left position of the overlay. Clears any previously set horizontal position. */\n    GlobalPositionStrategy.prototype.left = function (value) {\n        this._right = '';\n        this._translateX = [];\n        this._left = value;\n        return this;\n    };\n    /** Sets the bottom position of the overlay. Clears any previously set vertical position. */\n    GlobalPositionStrategy.prototype.bottom = function (value) {\n        this._top = '';\n        this._translateY = [];\n        this._bottom = value;\n        return this;\n    };\n    /** Sets the right position of the overlay. Clears any previously set horizontal position. */\n    GlobalPositionStrategy.prototype.right = function (value) {\n        this._left = '';\n        this._translateX = [];\n        this._right = value;\n        return this;\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n        if (offset === void 0) { offset = '0px'; }\n        this._left = '50%';\n        this._right = '';\n        this._translateX = ['-50%', offset];\n        return this;\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     */\n    GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n        if (offset === void 0) { offset = '0px'; }\n        this._top = '50%';\n        this._bottom = '';\n        this._translateY = ['-50%', offset];\n        return this;\n    };\n    /**\n     * Apply the position to the element.\n     * TODO: internal\n     */\n    GlobalPositionStrategy.prototype.apply = function (element) {\n        element.style.position = this._cssPosition;\n        element.style.top = this._top;\n        element.style.left = this._left;\n        element.style.bottom = this._bottom;\n        element.style.right = this._right;\n        // TODO(jelbourn): we don't want to always overwrite the transform property here,\n        // because it will need to be used for animations.\n        var tranlateX = this._reduceTranslateValues('translateX', this._translateX);\n        var translateY = this._reduceTranslateValues('translateY', this._translateY);\n        _angular2Material_core.applyCssTransform(element, tranlateX + \" \" + translateY);\n        return Promise.resolve(null);\n    };\n    /** Reduce a list of translate values to a string that can be used in the transform property */\n    GlobalPositionStrategy.prototype._reduceTranslateValues = function (translateFn, values) {\n        return values.map(function (t) { return (translateFn + \"(\" + t + \")\"); }).join(' ');\n    };\n    return GlobalPositionStrategy;\n}());\n\nvar __decorate$7 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$7 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/** Builder for overlay position strategy. */\nvar OverlayPositionBuilder = (function () {\n    function OverlayPositionBuilder(_viewportRuler) {\n        this._viewportRuler = _viewportRuler;\n    }\n    /** Creates a global position strategy. */\n    OverlayPositionBuilder.prototype.global = function () {\n        return new GlobalPositionStrategy();\n    };\n    /** Creates a relative position strategy. */\n    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n    };\n    OverlayPositionBuilder = __decorate$7([\n        _angular_core.Injectable(), \n        __metadata$7('design:paramtypes', [ViewportRuler])\n    ], OverlayPositionBuilder);\n    return OverlayPositionBuilder;\n}());\n\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nvar OverlayContainer = (function () {\n    function OverlayContainer() {\n    }\n    /**\n     * This method returns the overlay container element.  It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns {HTMLElement} the container element\n     */\n    OverlayContainer.prototype.getContainerElement = function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'md-overlay-container' class on the document body.\n     */\n    OverlayContainer.prototype._createContainer = function () {\n        var container = document.createElement('div');\n        container.classList.add('md-overlay-container');\n        document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    return OverlayContainer;\n}());\n\nvar __decorate$6 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$6 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/** Next overlay unique ID. */\nvar nextUniqueId = 0;\n/** The default state for newly created overlays. */\nvar defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nvar Overlay = (function () {\n    function Overlay(_overlayContainer, _componentFactoryResolver, _positionBuilder) {\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n    }\n    /**\n     * Creates an overlay.\n     * @param state State to apply to the overlay.\n     * @returns A reference to the created overlay.\n     */\n    Overlay.prototype.create = function (state) {\n        if (state === void 0) { state = defaultState; }\n        return this._createOverlayRef(this._createPaneElement(), state);\n    };\n    /**\n     * Returns a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     */\n    Overlay.prototype.position = function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Promise resolving to the created element.\n     */\n    Overlay.prototype._createPaneElement = function () {\n        var pane = document.createElement('div');\n        pane.id = \"md-overlay-\" + nextUniqueId++;\n        pane.classList.add('md-overlay-pane');\n        this._overlayContainer.getContainerElement().appendChild(pane);\n        return pane;\n    };\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    Overlay.prototype._createPortalHost = function (pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver);\n    };\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     * @param state\n     * @returns {OverlayRef}\n     */\n    Overlay.prototype._createOverlayRef = function (pane, state) {\n        return new OverlayRef(this._createPortalHost(pane), pane, state);\n    };\n    Overlay = __decorate$6([\n        _angular_core.Injectable(), \n        __metadata$6('design:paramtypes', [OverlayContainer, _angular_core.ComponentFactoryResolver, OverlayPositionBuilder])\n    ], Overlay);\n    return Overlay;\n}());\n/** Providers for Overlay and its related injectables. */\nvar OVERLAY_PROVIDERS = [\n    ViewportRuler,\n    OverlayPositionBuilder,\n    Overlay,\n    OverlayContainer,\n];\n\nvar __decorate$5 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$5 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nvar defaultPositionList = [\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar OverlayOrigin = (function () {\n    function OverlayOrigin(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    Object.defineProperty(OverlayOrigin.prototype, \"elementRef\", {\n        get: function () {\n            return this._elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OverlayOrigin = __decorate$5([\n        _angular_core.Directive({\n            selector: '[overlay-origin]',\n            exportAs: 'overlayOrigin',\n        }), \n        __metadata$5('design:paramtypes', [_angular_core.ElementRef])\n    ], OverlayOrigin);\n    return OverlayOrigin;\n}());\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nvar ConnectedOverlayDirective = (function () {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    function ConnectedOverlayDirective(_overlay, templateRef, viewContainerRef) {\n        this._overlay = _overlay;\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"overlayRef\", {\n        get: function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** TODO: internal */\n    ConnectedOverlayDirective.prototype.ngOnInit = function () {\n        this._createOverlay();\n    };\n    /** TODO: internal */\n    ConnectedOverlayDirective.prototype.ngOnDestroy = function () {\n        this._destroyOverlay();\n    };\n    /** Creates an overlay and attaches this directive's template to it. */\n    ConnectedOverlayDirective.prototype._createOverlay = function () {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        var overlayConfig = new OverlayState();\n        overlayConfig.positionStrategy =\n            this._overlay.position().connectedTo(this.origin.elementRef, { originX: this.positions[0].overlayX, originY: this.positions[0].originY }, { overlayX: this.positions[0].overlayX, overlayY: this.positions[0].overlayY });\n        this._overlayRef = this._overlay.create(overlayConfig);\n        this._overlayRef.attach(this._templatePortal);\n    };\n    /** Destroys the overlay created by this directive. */\n    ConnectedOverlayDirective.prototype._destroyOverlay = function () {\n        this._overlayRef.dispose();\n    };\n    __decorate$5([\n        _angular_core.Input(), \n        __metadata$5('design:type', OverlayOrigin)\n    ], ConnectedOverlayDirective.prototype, \"origin\", void 0);\n    __decorate$5([\n        _angular_core.Input(), \n        __metadata$5('design:type', Array)\n    ], ConnectedOverlayDirective.prototype, \"positions\", void 0);\n    ConnectedOverlayDirective = __decorate$5([\n        _angular_core.Directive({\n            selector: '[connected-overlay]'\n        }), \n        __metadata$5('design:paramtypes', [Overlay, _angular_core.TemplateRef, _angular_core.ViewContainerRef])\n    ], ConnectedOverlayDirective);\n    return ConnectedOverlayDirective;\n}());\nvar OverlayModule = (function () {\n    function OverlayModule() {\n    }\n    OverlayModule.forRoot = function () {\n        return {\n            ngModule: OverlayModule,\n            providers: OVERLAY_PROVIDERS,\n        };\n    };\n    OverlayModule = __decorate$5([\n        _angular_core.NgModule({\n            imports: [PortalModule],\n            exports: [ConnectedOverlayDirective, OverlayOrigin],\n            declarations: [ConnectedOverlayDirective, OverlayOrigin],\n        }), \n        __metadata$5('design:paramtypes', [])\n    ], OverlayModule);\n    return OverlayModule;\n}());\n\nvar __decorate$9 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$9 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (window && window.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core.OpaqueToken('mdLiveAnnouncerElement');\nvar MdLiveAnnouncer = (function () {\n    function MdLiveAnnouncer(elementToken) {\n        // We inject the live element as `any` because the constructor signature cannot reference\n        // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n        // causes TypeScript to preserve the constructor signature types.\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * @param message Message to be announced to the screenreader\n     * @param politeness The politeness of the announcer element.\n     */\n    MdLiveAnnouncer.prototype.announce = function (message, politeness) {\n        var _this = this;\n        if (politeness === void 0) { politeness = 'polite'; }\n        this._liveElement.textContent = '';\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        setTimeout(function () { return _this._liveElement.textContent = message; }, 100);\n    };\n    MdLiveAnnouncer.prototype._createLiveElement = function () {\n        var liveEl = document.createElement('div');\n        liveEl.classList.add('md-live-announcer');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        document.body.appendChild(liveEl);\n        return liveEl;\n    };\n    MdLiveAnnouncer = __decorate$9([\n        _angular_core.Injectable(),\n        __param(0, _angular_core.Optional()),\n        __param(0, _angular_core.Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)), \n        __metadata$9('design:paramtypes', [Object])\n    ], MdLiveAnnouncer);\n    return MdLiveAnnouncer;\n}());\n\nvar __extends$5 = (window && window.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate$10 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$10 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/* Adjusts configuration of our gesture library, Hammer. */\nvar MdGestureConfig = (function (_super) {\n    __extends$5(MdGestureConfig, _super);\n    function MdGestureConfig() {\n        _super.apply(this, arguments);\n        /* List of new event names to add to the gesture support list */\n        this.events = [\n            'drag',\n            'dragstart',\n            'dragend',\n            'dragright',\n            'dragleft',\n            'longpress',\n            'slide',\n            'slidestart',\n            'slideend',\n            'slideright',\n            'slideleft'\n        ];\n    }\n    /*\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * TODO: Confirm threshold numbers with Material Design UX Team\n     * */\n    MdGestureConfig.prototype.buildHammer = function (element) {\n        var mc = new Hammer(element);\n        // Default Hammer Recognizers.\n        var pan = new Hammer.Pan();\n        var swipe = new Hammer.Swipe();\n        var press = new Hammer.Press();\n        // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n        // Otherwise the previous `recognizeWith` will be dropped.\n        var slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);\n        var drag = this._createRecognizer(slide, { event: 'drag', threshold: 6 }, swipe);\n        var longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });\n        // Overwrite the default `pan` event to use the swipe event.\n        pan.recognizeWith(swipe);\n        // Add customized gestures to Hammer manager\n        mc.add([swipe, press, pan, drag, slide, longpress]);\n        return mc;\n    };\n    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n    MdGestureConfig.prototype._createRecognizer = function (base, options) {\n        var inheritances = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            inheritances[_i - 2] = arguments[_i];\n        }\n        var recognizer = new base.constructor(options);\n        inheritances.push(base);\n        inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });\n        return recognizer;\n    };\n    MdGestureConfig = __decorate$10([\n        _angular_core.Injectable(), \n        __metadata$10('design:paramtypes', [])\n    ], MdGestureConfig);\n    return MdGestureConfig;\n}(_angular_platformBrowser.HammerGestureConfig));\n\nvar __decorate$11 = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$11 = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nvar MdUniqueSelectionDispatcher = (function () {\n    function MdUniqueSelectionDispatcher() {\n        this._listeners = [];\n    }\n    /** Notify other items that selection for the given name has been set. */\n    MdUniqueSelectionDispatcher.prototype.notify = function (id, name) {\n        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            listener(id, name);\n        }\n    };\n    /** Listen for future changes to item selection. */\n    MdUniqueSelectionDispatcher.prototype.listen = function (listener) {\n        this._listeners.push(listener);\n    };\n    MdUniqueSelectionDispatcher = __decorate$11([\n        _angular_core.Injectable(), \n        __metadata$11('design:paramtypes', [])\n    ], MdUniqueSelectionDispatcher);\n    return MdUniqueSelectionDispatcher;\n}());\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nfunction applyCssTransform$1(element, transformValue) {\n    // It's important to trim the result, because the browser will ignore the set operation\n    // if the string contains only whitespace.\n    var value = transformValue.trim();\n    element.style.transform = value;\n    element.style.webkitTransform = value;\n}\n\n/**\n * Annotation Factory that allows HTML style boolean attributes. For example,\n * a field declared like this:\n\n * @Directive({ selector: 'component' }) class MyComponent {\n *   @Input() @BooleanFieldValueFactory() myField: boolean;\n * }\n *\n * You could set it up this way:\n *   <component myField>\n * or:\n *   <component myField=\"\">\n * @deprecated\n */\nfunction booleanFieldValueFactory() {\n    return function booleanFieldValueMetadata(target, key) {\n        var defaultValue = target[key];\n        var localKey = \"__md_private_symbol_\" + key;\n        target[localKey] = defaultValue;\n        Object.defineProperty(target, key, {\n            get: function () { return this[localKey]; },\n            set: function (value) {\n                this[localKey] = value != null && \"\" + value !== 'false';\n            }\n        });\n    };\n}\n\n// Due to a bug in the ChromeDriver, Angular 2 keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\nvar UP_ARROW = 38;\nvar DOWN_ARROW = 40;\nvar RIGHT_ARROW = 39;\nvar LEFT_ARROW = 37;\nvar ENTER = 13;\nvar TAB = 9;\n\nvar __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar MdCoreModule = (function () {\n    function MdCoreModule() {\n    }\n    MdCoreModule.forRoot = function () {\n        return {\n            ngModule: MdCoreModule,\n            providers: [MdLiveAnnouncer]\n        };\n    };\n    MdCoreModule = __decorate([\n        _angular_core.NgModule({\n            imports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule],\n            exports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule],\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCoreModule);\n    return MdCoreModule;\n}());\n\nexports.MdCoreModule = MdCoreModule;\nexports.Dir = Dir;\nexports.RtlModule = RtlModule;\nexports.Portal = Portal;\nexports.BasePortalHost = BasePortalHost;\nexports.ComponentPortal = ComponentPortal;\nexports.TemplatePortal = TemplatePortal;\nexports.PortalHostDirective = PortalHostDirective;\nexports.TemplatePortalDirective = TemplatePortalDirective;\nexports.PortalModule = PortalModule;\nexports.DomPortalHost = DomPortalHost;\nexports.Overlay = Overlay;\nexports.OVERLAY_PROVIDERS = OVERLAY_PROVIDERS;\nexports.OverlayContainer = OverlayContainer;\nexports.OverlayRef = OverlayRef;\nexports.OverlayState = OverlayState;\nexports.ConnectedOverlayDirective = ConnectedOverlayDirective;\nexports.OverlayOrigin = OverlayOrigin;\nexports.OverlayModule = OverlayModule;\nexports.MdGestureConfig = MdGestureConfig;\nexports.MdRipple = MdRipple;\nexports.MdRippleModule = MdRippleModule;\nexports.MdLiveAnnouncer = MdLiveAnnouncer;\nexports.LIVE_ANNOUNCER_ELEMENT_TOKEN = LIVE_ANNOUNCER_ELEMENT_TOKEN;\nexports.MdUniqueSelectionDispatcher = MdUniqueSelectionDispatcher;\nexports.MdLineModule = MdLineModule;\nexports.MdLine = MdLine;\nexports.MdLineSetter = MdLineSetter;\nexports.applyCssTransform = applyCssTransform$1;\nexports.MdError = MdError;\nexports.BooleanFieldValue = booleanFieldValueFactory;\nexports.ConnectedPositionStrategy = ConnectedPositionStrategy;\nexports.ConnectionPositionPair = ConnectionPositionPair;\nexports.UP_ARROW = UP_ARROW;\nexports.DOWN_ARROW = DOWN_ARROW;\nexports.RIGHT_ARROW = RIGHT_ARROW;\nexports.LEFT_ARROW = LEFT_ARROW;\nexports.ENTER = ENTER;\nexports.TAB = TAB;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/core.umd.js\n ** module id = 77\n ** module chunks = 0\n **/","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :\n    (factory((global.md = global.md || {}, global.md.card = global.md.card || {}),global.ng.core));\n}(this, (function (exports,_angular_core) { 'use strict';\n\nvar __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (window && window.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/**\n * Content of a card, needed as it's used as a selector in the API.\n */\nvar MdCardContent = (function () {\n    function MdCardContent() {\n    }\n    MdCardContent = __decorate([\n        _angular_core.Directive({\n            selector: 'md-card-content'\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCardContent);\n    return MdCardContent;\n}());\n/**\n * Title of a card, needed as it's used as a selector in the API.\n */\nvar MdCardTitle = (function () {\n    function MdCardTitle() {\n    }\n    MdCardTitle = __decorate([\n        _angular_core.Directive({\n            selector: 'md-card-title'\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCardTitle);\n    return MdCardTitle;\n}());\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n */\nvar MdCardSubtitle = (function () {\n    function MdCardSubtitle() {\n    }\n    MdCardSubtitle = __decorate([\n        _angular_core.Directive({\n            selector: 'md-card-subtitle'\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCardSubtitle);\n    return MdCardSubtitle;\n}());\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n */\nvar MdCardActions = (function () {\n    function MdCardActions() {\n    }\n    MdCardActions = __decorate([\n        _angular_core.Directive({\n            selector: 'md-card-actions'\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCardActions);\n    return MdCardActions;\n}());\n/*\n\n<md-card> is a basic content container component that adds the styles of a material design card.\n\nWhile you can use this component alone,\nit also provides a number of preset styles for common card sections, including:\n - md-card-title\n - md-card-subtitle\n - md-card-content\n - md-card-actions\n - md-card-footer\n\n You can see some examples of cards here:\n http://embed.plnkr.co/s5O4YcyvbLhIApSrIhtj/\n\n TODO(kara): update link to demo site when it exists\n\n*/\nvar MdCard = (function () {\n    function MdCard() {\n    }\n    MdCard = __decorate([\n        _angular_core.Component({selector: 'md-card',\n            template: \"<ng-content></ng-content> \",\n            styles: [\"/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\\\"external-card\\\" class=\\\"md-elevation-z2\\\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ md-card { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); will-change: box-shadow; display: block; position: relative; padding: 24px; border-radius: 2px; font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif; background: white; color: black; } md-card:hover { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); } .md-card-flat { box-shadow: none; } md-card-title, md-card-subtitle, md-card-content, md-card-actions { display: block; margin-bottom: 16px; } md-card-title { font-size: 24px; font-weight: 400; } md-card-subtitle { font-size: 14px; color: rgba(0, 0, 0, 0.54); } md-card-content { font-size: 14px; } md-card-actions { margin-left: -16px; margin-right: -16px; padding: 8px 0; } md-card-actions[align='end'] { display: flex; justify-content: flex-end; } [md-card-image] { width: calc(100% + 48px); margin: 0 -24px 16px -24px; } [md-card-xl-image] { width: 240px; height: 240px; margin: -8px; } md-card-footer { position: absolute; bottom: 0; } md-card-actions [md-button], md-card-actions [md-raised-button] { margin: 0 4px; } /* HEADER STYLES */ md-card-header { display: flex; flex-direction: row; height: 40px; margin: -8px 0 16px 0; } .md-card-header-text { height: 40px; margin: 0 8px; } [md-card-avatar] { height: 40px; width: 40px; border-radius: 50%; } md-card-header md-card-title { font-size: 14px; } /* TITLE-GROUP STYLES */ [md-card-sm-image], [md-card-md-image], [md-card-lg-image] { margin: -8px 0; } md-card-title-group { display: flex; justify-content: space-between; margin: 0 -8px; } [md-card-sm-image] { width: 80px; height: 80px; } [md-card-md-image] { width: 112px; height: 112px; } [md-card-lg-image] { width: 152px; height: 152px; } /* MEDIA QUERIES */ @media (max-width: 600px) { md-card { padding: 24px 16px; } [md-card-image] { width: calc(100% + 32px); margin: 16px -16px; } md-card-title-group { margin: 0; } [md-card-xl-image] { margin-left: 0; margin-right: 0; } md-card-header { margin: -8px 0 0 0; } } /* FIRST/LAST CHILD ADJUSTMENTS */ md-card > :first-child, md-card-content > :first-child { margin-top: 0; } md-card > :last-child, md-card-content > :last-child { margin-bottom: 0; } [md-card-image]:first-child { margin-top: -24px; } md-card > md-card-actions:last-child { margin-bottom: -16px; padding-bottom: 0; } md-card-actions [md-button]:first-child, md-card-actions [md-raised-button]:first-child { margin-left: 0; margin-right: 0; } md-card-title:not(:first-child), md-card-subtitle:not(:first-child) { margin-top: -4px; } md-card-header md-card-subtitle:not(:first-child) { margin-top: -8px; } md-card > [md-card-xl-image]:first-child { margin-top: -8px; } md-card > [md-card-xl-image]:last-child { margin-bottom: -8px; } /*# sourceMappingURL=card.css.map */ \"],\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCard);\n    return MdCard;\n}());\n/*  The following components don't have any behavior.\n They simply use content projection to wrap user content\n for flex layout purposes in <md-card> (and thus allow a cleaner, boilerplate-free API).\n\n\n<md-card-header> is a component intended to be used within the <md-card> component.\nIt adds styles for a preset header section (i.e. a title, subtitle, and avatar layout).\n\nYou can see an example of a card with a header here:\nhttp://embed.plnkr.co/tvJl19z3gZTQd6WmwkIa/\n\nTODO(kara): update link to demo site when it exists\n*/\nvar MdCardHeader = (function () {\n    function MdCardHeader() {\n    }\n    MdCardHeader = __decorate([\n        _angular_core.Component({selector: 'md-card-header',\n            template: \"<ng-content select=\\\"[md-card-avatar]\\\"></ng-content> <div class=\\\"md-card-header-text\\\"> <ng-content select=\\\"md-card-title, md-card-subtitle\\\"></ng-content> </div> <ng-content></ng-content> \",\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCardHeader);\n    return MdCardHeader;\n}());\n/*\n\n<md-card-title-group> is a component intended to be used within the <md-card> component.\nIt adds styles for a preset layout that groups an image with a title section.\n\nYou can see an example of a card with a title-group section here:\nhttp://embed.plnkr.co/EDfgCF9eKcXjini1WODm/\n\nTODO(kara): update link to demo site when it exists\n*/\nvar MdCardTitleGroup = (function () {\n    function MdCardTitleGroup() {\n    }\n    MdCardTitleGroup = __decorate([\n        _angular_core.Component({selector: 'md-card-title-group',\n            template: \"<div> <ng-content select=\\\"md-card-title, md-card-subtitle\\\"></ng-content> </div> <ng-content select=\\\"img\\\"></ng-content> <ng-content></ng-content> \",\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCardTitleGroup);\n    return MdCardTitleGroup;\n}());\nvar MdCardModule = (function () {\n    function MdCardModule() {\n    }\n    MdCardModule.forRoot = function () {\n        return {\n            ngModule: MdCardModule,\n            providers: []\n        };\n    };\n    MdCardModule = __decorate([\n        _angular_core.NgModule({\n            exports: [\n                MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n                MdCardActions\n            ],\n            declarations: [\n                MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n                MdCardActions\n            ],\n        }), \n        __metadata('design:paramtypes', [])\n    ], MdCardModule);\n    return MdCardModule;\n}());\n\nexports.MdCardContent = MdCardContent;\nexports.MdCardTitle = MdCardTitle;\nexports.MdCardSubtitle = MdCardSubtitle;\nexports.MdCardActions = MdCardActions;\nexports.MdCard = MdCard;\nexports.MdCardHeader = MdCardHeader;\nexports.MdCardTitleGroup = MdCardTitleGroup;\nexports.MdCardModule = MdCardModule;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/card/card.umd.js\n ** module id = 78\n ** module chunks = 0\n **/","\"use strict\";\r\nvar router_1 = require('@angular/router');\r\nvar login_1 = require('../login/login');\r\nvar appRoutes = [\r\n    {\r\n        path: 'login',\r\n        component: login_1.LoginComponent\r\n    },\r\n    {\r\n        path: '',\r\n        component: login_1.LoginComponent\r\n    }\r\n];\r\nexports.routing = router_1.RouterModule.forRoot(appRoutes);\r\n//# sourceMappingURL=app.routing.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/app/app.routing.js\n ** module id = 79\n ** module chunks = 0\n **/","/**\n * @license Angular v2.0.0\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/toPromise'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/fromPromise')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        }\n        else {\n            globalScope = global;\n        }\n    }\n    else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var global$1 = globalScope;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n    }\n    function isBlank(obj) {\n        return obj === undefined || obj === null;\n    }\n    function isString(obj) {\n        return typeof obj === 'string';\n    }\n    function isFunction(obj) {\n        return typeof obj === 'function';\n    }\n    function isStringMap(obj) {\n        return typeof obj === 'object' && obj !== null;\n    }\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return isPresent(obj) && isFunction(obj.then);\n    }\n    function isArray(obj) {\n        return Array.isArray(obj);\n    }\n    var StringWrapper = (function () {\n        function StringWrapper() {\n        }\n        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n        StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n        StringWrapper.equals = function (s, s2) { return s === s2; };\n        StringWrapper.stripLeft = function (s, charVal) {\n            if (s && s.length) {\n                var pos = 0;\n                for (var i = 0; i < s.length; i++) {\n                    if (s[i] != charVal)\n                        break;\n                    pos++;\n                }\n                s = s.substring(pos);\n            }\n            return s;\n        };\n        StringWrapper.stripRight = function (s, charVal) {\n            if (s && s.length) {\n                var pos = s.length;\n                for (var i = s.length - 1; i >= 0; i--) {\n                    if (s[i] != charVal)\n                        break;\n                    pos--;\n                }\n                s = s.substring(0, pos);\n            }\n            return s;\n        };\n        StringWrapper.replace = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.replaceAll = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.slice = function (s, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return s.slice(from, to === null ? undefined : to);\n        };\n        StringWrapper.replaceAllMapped = function (s, from, cb) {\n            return s.replace(from, function () {\n                var matches = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    matches[_i - 0] = arguments[_i];\n                }\n                // Remove offset & string from the result array\n                matches.splice(-2, 2);\n                // The callback receives match, p1, ..., pn\n                return cb(matches);\n            });\n        };\n        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n        StringWrapper.compare = function (a, b) {\n            if (a < b) {\n                return -1;\n            }\n            else if (a > b) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        };\n        return StringWrapper;\n    }());\n    var NumberWrapper = (function () {\n        function NumberWrapper() {\n        }\n        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n        NumberWrapper.equal = function (a, b) { return a === b; };\n        NumberWrapper.parseIntAutoRadix = function (text) {\n            var result = parseInt(text);\n            if (isNaN(result)) {\n                throw new Error('Invalid integer literal when parsing ' + text);\n            }\n            return result;\n        };\n        NumberWrapper.parseInt = function (text, radix) {\n            if (radix == 10) {\n                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else if (radix == 16) {\n                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else {\n                var result = parseInt(text, radix);\n                if (!isNaN(result)) {\n                    return result;\n                }\n            }\n            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n        };\n        Object.defineProperty(NumberWrapper, \"NaN\", {\n            get: function () { return NaN; },\n            enumerable: true,\n            configurable: true\n        });\n        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n        return NumberWrapper;\n    }());\n    // JS has NaN !== NaN\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    function normalizeBool(obj) {\n        return isBlank(obj) ? false : obj;\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n    function hasConstructor(value, type) {\n        return value.constructor === type;\n    }\n\n    /**\n     * Base class for control directives.\n     *\n     * Only used internally in the forms module.\n     *\n     * @stable\n     */\n    var AbstractControlDirective = (function () {\n        function AbstractControlDirective() {\n        }\n        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n            get: function () { throw new Error('unimplemented'); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n            get: function () { return isPresent(this.control) ? this.control.value : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n            get: function () { return isPresent(this.control) ? this.control.valid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n            get: function () { return isPresent(this.control) ? this.control.invalid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n            get: function () { return isPresent(this.control) ? this.control.pending : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.errors : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n            get: function () { return isPresent(this.control) ? this.control.pristine : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n            get: function () { return isPresent(this.control) ? this.control.dirty : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n            get: function () { return isPresent(this.control) ? this.control.touched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n            get: function () { return isPresent(this.control) ? this.control.untouched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n            get: function () { return isPresent(this.control) ? this.control.disabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n            get: function () { return isPresent(this.control) ? this.control.enabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.statusChanges : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.valueChanges : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        AbstractControlDirective.prototype.reset = function (value) {\n            if (value === void 0) { value = undefined; }\n            if (isPresent(this.control))\n                this.control.reset(value);\n        };\n        return AbstractControlDirective;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * A directive that contains multiple {@link NgControl}s.\n     *\n     * Only used by the forms module.\n     *\n     * @stable\n     */\n    var ControlContainer = (function (_super) {\n        __extends$1(ControlContainer, _super);\n        function ControlContainer() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n            /**\n             * Get the form to which this container belongs.\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlContainer.prototype, \"path\", {\n            /**\n             * Get the path to this container.\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return ControlContainer;\n    }(AbstractControlDirective));\n\n    var Map$1 = global$1.Map;\n    var Set = global$1.Set;\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Map constructor.  We work around that by manually adding the items.\n    var createMapFromPairs = (function () {\n        try {\n            if (new Map$1([[1, 2]]).size === 1) {\n                return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromPairs(pairs) {\n            var map = new Map$1();\n            for (var i = 0; i < pairs.length; i++) {\n                var pair = pairs[i];\n                map.set(pair[0], pair[1]);\n            }\n            return map;\n        };\n    })();\n    var createMapFromMap = (function () {\n        try {\n            if (new Map$1(new Map$1())) {\n                return function createMapFromMap(m) { return new Map$1(m); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromMap(m) {\n            var map = new Map$1();\n            m.forEach(function (v, k) { map.set(k, v); });\n            return map;\n        };\n    })();\n    var _clearValues = (function () {\n        if ((new Map$1()).keys().next) {\n            return function _clearValues(m) {\n                var keyIterator = m.keys();\n                var k;\n                while (!((k = keyIterator.next()).done)) {\n                    m.set(k.value, null);\n                }\n            };\n        }\n        else {\n            return function _clearValuesWithForeEach(m) {\n                m.forEach(function (v, k) { m.set(k, null); });\n            };\n        }\n    })();\n    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n    var _arrayFromMap = (function () {\n        try {\n            if ((new Map$1()).values().next) {\n                return function createArrayFromMap(m, getValues) {\n                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n                };\n            }\n        }\n        catch (e) {\n        }\n        return function createArrayFromMapWithForeach(m, getValues) {\n            var res = ListWrapper.createFixedSize(m.size), i = 0;\n            m.forEach(function (v, k) {\n                res[i] = getValues ? v : k;\n                i++;\n            });\n            return res;\n        };\n    })();\n    var MapWrapper = (function () {\n        function MapWrapper() {\n        }\n        MapWrapper.clone = function (m) { return createMapFromMap(m); };\n        MapWrapper.createFromStringMap = function (stringMap) {\n            var result = new Map$1();\n            for (var prop in stringMap) {\n                result.set(prop, stringMap[prop]);\n            }\n            return result;\n        };\n        MapWrapper.toStringMap = function (m) {\n            var r = {};\n            m.forEach(function (v, k) { return r[k] = v; });\n            return r;\n        };\n        MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };\n        MapWrapper.clearValues = function (m) { _clearValues(m); };\n        MapWrapper.iterable = function (m) { return m; };\n        MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n        MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n        return MapWrapper;\n    }());\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        StringMapWrapper.create = function () {\n            // Note: We are not using Object.create(null) here due to\n            // performance!\n            // http://jsperf.com/ng2-object-create-null\n            return {};\n        };\n        StringMapWrapper.contains = function (map, key) {\n            return map.hasOwnProperty(key);\n        };\n        StringMapWrapper.get = function (map, key) {\n            return map.hasOwnProperty(key) ? map[key] : undefined;\n        };\n        StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n        StringMapWrapper.keys = function (map) { return Object.keys(map); };\n        StringMapWrapper.values = function (map) {\n            return Object.keys(map).map(function (k) { return map[k]; });\n        };\n        StringMapWrapper.isEmpty = function (map) {\n            for (var prop in map) {\n                return false;\n            }\n            return true;\n        };\n        StringMapWrapper.delete = function (map, key) { delete map[key]; };\n        StringMapWrapper.forEach = function (map, callback) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var k = _a[_i];\n                callback(map[k], k);\n            }\n        };\n        StringMapWrapper.merge = function (m1, m2) {\n            var m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        StringMapWrapper.equals = function (m1, m2) {\n            var k1 = Object.keys(m1);\n            var k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var i = 0; i < k1.length; i++) {\n                var key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        // JS has no way to express a statically fixed size list, but dart does so we\n        // keep both methods.\n        ListWrapper.createFixedSize = function (size) { return new Array(size); };\n        ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n        ListWrapper.clone = function (array) { return array.slice(0); };\n        ListWrapper.forEachWithIndex = function (array, fn) {\n            for (var i = 0; i < array.length; i++) {\n                fn(array[i], i);\n            }\n        };\n        ListWrapper.first = function (array) {\n            if (!array)\n                return null;\n            return array[0];\n        };\n        ListWrapper.last = function (array) {\n            if (!array || array.length == 0)\n                return null;\n            return array[array.length - 1];\n        };\n        ListWrapper.indexOf = function (array, value, startIndex) {\n            if (startIndex === void 0) { startIndex = 0; }\n            return array.indexOf(value, startIndex);\n        };\n        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n        ListWrapper.reversed = function (array) {\n            var a = ListWrapper.clone(array);\n            return a.reverse();\n        };\n        ListWrapper.concat = function (a, b) { return a.concat(b); };\n        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n        ListWrapper.removeAt = function (list, index) {\n            var res = list[index];\n            list.splice(index, 1);\n            return res;\n        };\n        ListWrapper.removeAll = function (list, items) {\n            for (var i = 0; i < items.length; ++i) {\n                var index = list.indexOf(items[i]);\n                list.splice(index, 1);\n            }\n        };\n        ListWrapper.remove = function (list, el) {\n            var index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        ListWrapper.clear = function (list) { list.length = 0; };\n        ListWrapper.isEmpty = function (list) { return list.length == 0; };\n        ListWrapper.fill = function (list, value, start, end) {\n            if (start === void 0) { start = 0; }\n            if (end === void 0) { end = null; }\n            list.fill(value, start, end === null ? list.length : end);\n        };\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        ListWrapper.slice = function (l, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return l.slice(from, to === null ? undefined : to);\n        };\n        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n        ListWrapper.sort = function (l, compareFn) {\n            if (isPresent(compareFn)) {\n                l.sort(compareFn);\n            }\n            else {\n                l.sort();\n            }\n        };\n        ListWrapper.toString = function (l) { return l.toString(); };\n        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n        ListWrapper.maximum = function (list, predicate) {\n            if (list.length == 0) {\n                return null;\n            }\n            var solution = null;\n            var maxValue = -Infinity;\n            for (var index = 0; index < list.length; index++) {\n                var candidate = list[index];\n                if (isBlank(candidate)) {\n                    continue;\n                }\n                var candidateValue = predicate(candidate);\n                if (candidateValue > maxValue) {\n                    solution = candidate;\n                    maxValue = candidateValue;\n                }\n            }\n            return solution;\n        };\n        ListWrapper.flatten = function (list) {\n            var target = [];\n            _flattenArray(list, target);\n            return target;\n        };\n        ListWrapper.addAll = function (list, source) {\n            for (var i = 0; i < source.length; i++) {\n                list.push(source[i]);\n            }\n        };\n        return ListWrapper;\n    }());\n    function _flattenArray(source, target) {\n        if (isPresent(source)) {\n            for (var i = 0; i < source.length; i++) {\n                var item = source[i];\n                if (isArray(item)) {\n                    _flattenArray(item, target);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n        }\n        return target;\n    }\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Set constructor.  We work around that by manually adding the items.\n    var createSetFromList = (function () {\n        var test = new Set([1, 2, 3]);\n        if (test.size === 3) {\n            return function createSetFromList(lst) { return new Set(lst); };\n        }\n        else {\n            return function createSetAndPopulateFromList(lst) {\n                var res = new Set(lst);\n                if (res.size !== lst.length) {\n                    for (var i = 0; i < lst.length; i++) {\n                        res.add(lst[i]);\n                    }\n                }\n                return res;\n            };\n        }\n    })();\n\n    /**\n     * Providers for validators to be used for {@link FormControl}s in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * ### Example\n     *\n     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n     * @stable\n     */\n    var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n    /**\n     * Providers for asynchronous validators to be used for {@link FormControl}s\n     * in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * See {@link NG_VALIDATORS} for more details.\n     *\n     * @stable\n     */\n    var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n    /**\n     * Provides a set of validators used by form controls.\n     *\n     * A validator is a function that processes a {@link FormControl} or collection of\n     * controls and returns a map of errors. A null map means that validation has passed.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * var loginControl = new FormControl(\"\", Validators.required)\n     * ```\n     *\n     * @stable\n     */\n    var Validators = (function () {\n        function Validators() {\n        }\n        /**\n         * Validator that requires controls to have a non-empty value.\n         */\n        Validators.required = function (control) {\n            return isBlank(control.value) || (isString(control.value) && control.value == '') ?\n                { 'required': true } :\n                null;\n        };\n        /**\n         * Validator that requires controls to have a value of a minimum length.\n         */\n        Validators.minLength = function (minLength) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var v = control.value;\n                return v.length < minLength ?\n                    { 'minlength': { 'requiredLength': minLength, 'actualLength': v.length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires controls to have a value of a maximum length.\n         */\n        Validators.maxLength = function (maxLength) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var v = control.value;\n                return v.length > maxLength ?\n                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': v.length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires a control to match a regex to its value.\n         */\n        Validators.pattern = function (pattern) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var regex = new RegExp(\"^\" + pattern + \"$\");\n                var v = control.value;\n                return regex.test(v) ? null :\n                    { 'pattern': { 'requiredPattern': \"^\" + pattern + \"$\", 'actualValue': v } };\n            };\n        };\n        /**\n         * No-op validator.\n         */\n        Validators.nullValidator = function (c) { return null; };\n        /**\n         * Compose multiple validators into a single function that returns the union\n         * of the individual error maps.\n         */\n        Validators.compose = function (validators) {\n            if (isBlank(validators))\n                return null;\n            var presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                return _mergeErrors(_executeValidators(control, presentValidators));\n            };\n        };\n        Validators.composeAsync = function (validators) {\n            if (isBlank(validators))\n                return null;\n            var presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n                return Promise.all(promises).then(_mergeErrors);\n            };\n        };\n        return Validators;\n    }());\n    function _convertToPromise(obj) {\n        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n    }\n    function _executeValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    function _executeAsyncValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    function _mergeErrors(arrayOfErrors) {\n        var res = arrayOfErrors.reduce(function (res, errors) {\n            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n        }, {});\n        return StringMapWrapper.isEmpty(res) ? null : res;\n    }\n\n    /**\n     * Used to provide a {@link ControlValueAccessor} for form controls.\n     *\n     * See {@link DefaultValueAccessor} for how to implement one.\n     * @stable\n     */\n    var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\n    var CHECKBOX_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a value and listening to changes on a checkbox input element.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n     *  ```\n     *\n     *  @stable\n     */\n    var CheckboxControlValueAccessor = (function () {\n        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n        };\n        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        CheckboxControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                        providers: [CHECKBOX_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return CheckboxControlValueAccessor;\n    }());\n\n    var DEFAULT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The default accessor for writing a value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n     *  ```\n     *\n     *  @stable\n     */\n    var DefaultValueAccessor = (function () {\n        function DefaultValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        DefaultValueAccessor.prototype.writeValue = function (value) {\n            var normalizedValue = isBlank(value) ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        DefaultValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                        // TODO: vsavkin replace the above selector with the one below it once\n                        // https://github.com/angular/angular/issues/3011 is implemented\n                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [DEFAULT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        DefaultValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return DefaultValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function normalizeValidator(validator) {\n        if (validator.validate !== undefined) {\n            return function (c) { return validator.validate(c); };\n        }\n        else {\n            return validator;\n        }\n    }\n    function normalizeAsyncValidator(validator) {\n        if (validator.validate !== undefined) {\n            return function (c) { return validator.validate(c); };\n        }\n        else {\n            return validator;\n        }\n    }\n\n    var NUMBER_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a number value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"number\" [(ngModel)]=\"age\">\n     *  ```\n     */\n    var NumberValueAccessor = (function () {\n        function NumberValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        NumberValueAccessor.prototype.writeValue = function (value) {\n            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n            var normalizedValue = isBlank(value) ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        NumberValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [NUMBER_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        NumberValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return NumberValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     * A base class that all control directive extend.\n     * It binds a {@link FormControl} object to a DOM element.\n     *\n     * Used internally by Angular forms.\n     *\n     * @stable\n     */\n    var NgControl = (function (_super) {\n        __extends$2(NgControl, _super);\n        function NgControl() {\n            _super.apply(this, arguments);\n            /** @internal */\n            this._parent = null;\n            this.name = null;\n            this.valueAccessor = null;\n            /** @internal */\n            this._rawValidators = [];\n            /** @internal */\n            this._rawAsyncValidators = [];\n        }\n        Object.defineProperty(NgControl.prototype, \"validator\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return NgControl;\n    }(AbstractControlDirective));\n\n    var RADIO_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * Internal class used by Angular to uncheck radio buttons with the matching name.\n     */\n    var RadioControlRegistry = (function () {\n        function RadioControlRegistry() {\n            this._accessors = [];\n        }\n        RadioControlRegistry.prototype.add = function (control, accessor) {\n            this._accessors.push([control, accessor]);\n        };\n        RadioControlRegistry.prototype.remove = function (accessor) {\n            var indexToRemove = -1;\n            for (var i = 0; i < this._accessors.length; ++i) {\n                if (this._accessors[i][1] === accessor) {\n                    indexToRemove = i;\n                }\n            }\n            ListWrapper.removeAt(this._accessors, indexToRemove);\n        };\n        RadioControlRegistry.prototype.select = function (accessor) {\n            var _this = this;\n            this._accessors.forEach(function (c) {\n                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                    c[1].fireUncheck(accessor.value);\n                }\n            });\n        };\n        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n            if (!controlPair[0].control)\n                return false;\n            return controlPair[0]._parent === accessor._control._parent &&\n                controlPair[1].name === accessor.name;\n        };\n        RadioControlRegistry.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RadioControlRegistry.ctorParameters = [];\n        return RadioControlRegistry;\n    }());\n    /**\n     * The accessor for writing a radio control value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  @Component({\n     *    template: `\n     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"chicken\">\n     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"fish\">\n     *    `\n     *  })\n     *  class FoodCmp {\n     *    food = 'chicken';\n     *  }\n     *  ```\n     */\n    var RadioControlValueAccessor = (function () {\n        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this._registry = _registry;\n            this._injector = _injector;\n            this.onChange = function () { };\n            this.onTouched = function () { };\n        }\n        RadioControlValueAccessor.prototype.ngOnInit = function () {\n            this._control = this._injector.get(NgControl);\n            this._checkName();\n            this._registry.add(this._control, this);\n        };\n        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n        RadioControlValueAccessor.prototype.writeValue = function (value) {\n            this._state = value === this.value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        };\n        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this._fn = fn;\n            this.onChange = function () {\n                fn(_this.value);\n                _this._registry.select(_this);\n            };\n        };\n        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        RadioControlValueAccessor.prototype._checkName = function () {\n            if (this.name && this.formControlName && this.name !== this.formControlName) {\n                this._throwNameError();\n            }\n            if (!this.name && this.formControlName)\n                this.name = this.formControlName;\n        };\n        RadioControlValueAccessor.prototype._throwNameError = function () {\n            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n        };\n        RadioControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                        providers: [RADIO_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RadioControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n            { type: RadioControlRegistry, },\n            { type: _angular_core.Injector, },\n        ];\n        RadioControlValueAccessor.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'formControlName': [{ type: _angular_core.Input },],\n            'value': [{ type: _angular_core.Input },],\n        };\n        return RadioControlValueAccessor;\n    }());\n\n    var SELECT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n        multi: true\n    };\n    function _buildValueString(id, value) {\n        if (isBlank(id))\n            return \"\" + value;\n        if (!isPrimitive(value))\n            value = 'Object';\n        return StringWrapper.slice(id + \": \" + value, 0, 50);\n    }\n    function _extractId(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * Note: We have to listen to the 'change' event because 'input' events aren't fired\n     * for selects in Firefox and IE:\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n     *\n     * @stable\n     */\n    var SelectControlValueAccessor = (function () {\n        function SelectControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        SelectControlValueAccessor.prototype.writeValue = function (value) {\n            this.value = value;\n            var valueString = _buildValueString(this._getOptionId(value), value);\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n        };\n        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (valueString) {\n                _this.value = valueString;\n                fn(_this._getOptionValue(valueString));\n            };\n        };\n        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /** @internal */\n        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n        /** @internal */\n        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id), value))\n                    return id;\n            }\n            return null;\n        };\n        /** @internal */\n        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var value = this._optionMap.get(_extractId(valueString));\n            return isPresent(value) ? value : valueString;\n        };\n        SelectControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return SelectControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     *\n     * @stable\n     */\n    var NgSelectOption = (function () {\n        function NgSelectOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (isPresent(this._select))\n                this.id = this._select._registerOption();\n        }\n        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._select._optionMap.set(this.id, value);\n                this._setElementValue(_buildValueString(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n            set: function (value) {\n                this._setElementValue(value);\n                if (isPresent(this._select))\n                    this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSelectOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        NgSelectOption.prototype.ngOnDestroy = function () {\n            if (isPresent(this._select)) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectOption.ctorParameters = [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ];\n        NgSelectOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectOption;\n    }());\n\n    var SELECT_MULTIPLE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n        multi: true\n    };\n    function _buildValueString$1(id, value) {\n        if (isBlank(id))\n            return \"\" + value;\n        if (isString(value))\n            value = \"'\" + value + \"'\";\n        if (!isPrimitive(value))\n            value = 'Object';\n        return StringWrapper.slice(id + \": \" + value, 0, 50);\n    }\n    function _extractId$1(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * @stable\n     */\n    var SelectMultipleControlValueAccessor = (function () {\n        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n            var _this = this;\n            this.value = value;\n            if (value == null)\n                return;\n            var values = value;\n            // convert values to ids\n            var ids = values.map(function (v) { return _this._getOptionId(v); });\n            this._optionMap.forEach(function (opt, o) { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n        };\n        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (_) {\n                var selected = [];\n                if (_.hasOwnProperty('selectedOptions')) {\n                    var options = _.selectedOptions;\n                    for (var i = 0; i < options.length; i++) {\n                        var opt = options.item(i);\n                        var val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n                else {\n                    var options = _.options;\n                    for (var i = 0; i < options.length; i++) {\n                        var opt = options.item(i);\n                        if (opt.selected) {\n                            var val = _this._getOptionValue(opt.value);\n                            selected.push(val);\n                        }\n                    }\n                }\n                fn(selected);\n            };\n        };\n        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n            var id = (this._idCounter++).toString();\n            this._optionMap.set(id, value);\n            return id;\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id)._value, value))\n                    return id;\n            }\n            return null;\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var opt = this._optionMap.get(_extractId$1(valueString));\n            return isPresent(opt) ? opt._value : valueString;\n        };\n        SelectMultipleControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectMultipleControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return SelectMultipleControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select multiple name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     */\n    var NgSelectMultipleOption = (function () {\n        function NgSelectMultipleOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (isPresent(this._select)) {\n                this.id = this._select._registerOption(this);\n            }\n        }\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n            set: function (value) {\n                if (isPresent(this._select)) {\n                    this._value = value;\n                    this._setElementValue(_buildValueString$1(this.id, value));\n                    this._select.writeValue(this._select.value);\n                }\n                else {\n                    this._setElementValue(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /** @internal */\n        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n        };\n        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n            if (isPresent(this._select)) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectMultipleOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectMultipleOption.ctorParameters = [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ];\n        NgSelectMultipleOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectMultipleOption;\n    }());\n\n    function controlPath(name, parent) {\n        var p = ListWrapper.clone(parent.path);\n        p.push(name);\n        return p;\n    }\n    function setUpControl(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        if (isBlank(dir.valueAccessor))\n            _throwError(dir, 'No value accessor for form control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n        dir.valueAccessor.writeValue(control.value);\n        // view -> model\n        dir.valueAccessor.registerOnChange(function (newValue) {\n            dir.viewToModelUpdate(newValue);\n            control.markAsDirty();\n            control.setValue(newValue, { emitModelToViewChange: false });\n        });\n        // touched\n        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n        control.registerOnChange(function (newValue, emitModelEvent) {\n            // control -> view\n            dir.valueAccessor.writeValue(newValue);\n            // control -> ngModel\n            if (emitModelEvent)\n                dir.viewToModelUpdate(newValue);\n        });\n        if (dir.valueAccessor.setDisabledState) {\n            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n        }\n        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n        dir._rawValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange)\n                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange)\n                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n    }\n    function cleanUpControl(control, dir) {\n        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n        dir._rawValidators.forEach(function (validator) { return validator.registerOnValidatorChange(null); });\n        dir._rawAsyncValidators.forEach(function (validator) { return validator.registerOnValidatorChange(null); });\n        if (control)\n            control._clearChangeFns();\n    }\n    function setUpFormContainer(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    }\n    function _noControlError(dir) {\n        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n    }\n    function _throwError(dir, message) {\n        var messageEnd;\n        if (dir.path.length > 1) {\n            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n        }\n        else if (dir.path[0]) {\n            messageEnd = \"name: '\" + dir.path + \"'\";\n        }\n        else {\n            messageEnd = 'unspecified name attribute';\n        }\n        throw new Error(message + \" \" + messageEnd);\n    }\n    function composeValidators(validators) {\n        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n    }\n    function composeAsyncValidators(validators) {\n        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n            null;\n    }\n    function isPropertyUpdated(changes, viewModel) {\n        if (!StringMapWrapper.contains(changes, 'model'))\n            return false;\n        var change = changes['model'];\n        if (change.isFirstChange())\n            return true;\n        return !looseIdentical(viewModel, change.currentValue);\n    }\n    function isBuiltInAccessor(valueAccessor) {\n        return (hasConstructor(valueAccessor, CheckboxControlValueAccessor) ||\n            hasConstructor(valueAccessor, NumberValueAccessor) ||\n            hasConstructor(valueAccessor, SelectControlValueAccessor) ||\n            hasConstructor(valueAccessor, SelectMultipleControlValueAccessor) ||\n            hasConstructor(valueAccessor, RadioControlValueAccessor));\n    }\n    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n    function selectValueAccessor(dir, valueAccessors) {\n        if (isBlank(valueAccessors))\n            return null;\n        var defaultAccessor;\n        var builtinAccessor;\n        var customAccessor;\n        valueAccessors.forEach(function (v) {\n            if (hasConstructor(v, DefaultValueAccessor)) {\n                defaultAccessor = v;\n            }\n            else if (isBuiltInAccessor(v)) {\n                if (isPresent(builtinAccessor))\n                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n                builtinAccessor = v;\n            }\n            else {\n                if (isPresent(customAccessor))\n                    _throwError(dir, 'More than one custom value accessor matches form control with');\n                customAccessor = v;\n            }\n        });\n        if (isPresent(customAccessor))\n            return customAccessor;\n        if (isPresent(builtinAccessor))\n            return builtinAccessor;\n        if (isPresent(defaultAccessor))\n            return defaultAccessor;\n        _throwError(dir, 'No valid value accessor for form control with');\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n     *\n     * @stable\n     */\n    var AbstractFormGroupDirective = (function (_super) {\n        __extends(AbstractFormGroupDirective, _super);\n        function AbstractFormGroupDirective() {\n            _super.apply(this, arguments);\n        }\n        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormGroup(this);\n        };\n        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormGroup(this);\n            }\n        };\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n            /**\n             * Get the {@link FormGroup} backing this binding.\n             */\n            get: function () { return this.formDirective.getFormGroup(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n            /**\n             * Get the path to this control group.\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * Get the {@link Form} to which this group belongs.\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n        return AbstractFormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var AbstractControlStatus = (function () {\n        function AbstractControlStatus(cd) {\n            this._cd = cd;\n        }\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.untouched : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.touched : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.pristine : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.dirty : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.valid : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.invalid : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return AbstractControlStatus;\n    }());\n    var ngControlStatusHost = {\n        '[class.ng-untouched]': 'ngClassUntouched',\n        '[class.ng-touched]': 'ngClassTouched',\n        '[class.ng-pristine]': 'ngClassPristine',\n        '[class.ng-dirty]': 'ngClassDirty',\n        '[class.ng-valid]': 'ngClassValid',\n        '[class.ng-invalid]': 'ngClassInvalid'\n    };\n    /**\n     * Directive automatically applied to Angular form controls that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * @stable\n     */\n    var NgControlStatus = (function (_super) {\n        __extends$3(NgControlStatus, _super);\n        function NgControlStatus(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatus.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n        ];\n        /** @nocollapse */\n        NgControlStatus.ctorParameters = [\n            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n        ];\n        return NgControlStatus;\n    }(AbstractControlStatus));\n    /**\n     * Directive automatically applied to Angular form groups that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * @stable\n     */\n    var NgControlStatusGroup = (function (_super) {\n        __extends$3(NgControlStatusGroup, _super);\n        function NgControlStatusGroup(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatusGroup.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                        host: ngControlStatusHost\n                    },] },\n        ];\n        /** @nocollapse */\n        NgControlStatusGroup.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n        ];\n        return NgControlStatusGroup;\n    }(AbstractControlStatus));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * @Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   @Output() open: EventEmitter<any> = new EventEmitter();\n     *   @Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * @stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$5(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var schedulerFn;\n            var errorFn = function (err) { return null; };\n            var completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n                    setTimeout(function () { return generatorOrNext(value); });\n                } : function (value /** TODO #9100 */) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n     */\n    var VALID = 'VALID';\n    /**\n     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n     */\n    var INVALID = 'INVALID';\n    /**\n     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n     * errors are not yet available for the input value.\n     */\n    var PENDING = 'PENDING';\n    /**\n     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n     * calculations of validity or value.\n     */\n    var DISABLED = 'DISABLED';\n    function _find(control, path, delimiter) {\n        if (isBlank(path))\n            return null;\n        if (!(path instanceof Array)) {\n            path = path.split(delimiter);\n        }\n        if (path instanceof Array && ListWrapper.isEmpty(path))\n            return null;\n        return path.reduce(function (v, name) {\n            if (v instanceof FormGroup) {\n                return isPresent(v.controls[name]) ? v.controls[name] : null;\n            }\n            else if (v instanceof FormArray) {\n                var index = name;\n                return isPresent(v.at(index)) ? v.at(index) : null;\n            }\n            else {\n                return null;\n            }\n        }, control);\n    }\n    function toObservable(r) {\n        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n    }\n    function coerceToValidator(validator) {\n        return Array.isArray(validator) ? composeValidators(validator) : validator;\n    }\n    function coerceToAsyncValidator(asyncValidator) {\n        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n    }\n    /**\n     * @whatItDoes This is the base class for {@link FormControl}, {@link FormGroup}, and\n     * {@link FormArray}.\n     *\n     * It provides some of the shared behavior that all controls and groups of controls have, like\n     * running validators, calculating status, and resetting state. It also defines the properties\n     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n     * instantiated directly.\n     *\n     * @stable\n     */\n    var AbstractControl = (function () {\n        function AbstractControl(validator, asyncValidator) {\n            this.validator = validator;\n            this.asyncValidator = asyncValidator;\n            /** @internal */\n            this._onCollectionChange = function () { };\n            this._pristine = true;\n            this._touched = false;\n        }\n        Object.defineProperty(AbstractControl.prototype, \"value\", {\n            /**\n             * The value of the control.\n             */\n            get: function () { return this._value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"status\", {\n            /**\n             * The validation status of the control. There are four possible\n             * validation statuses:\n             *\n             * * **VALID**:  control has passed all validation checks\n             * * **INVALID**: control has failed at least one validation check\n             * * **PENDING**: control is in the midst of conducting a validation check\n             * * **DISABLED**: control is exempt from validation checks\n             *\n             * These statuses are mutually exclusive, so a control cannot be\n             * both valid AND invalid or invalid AND disabled.\n             */\n            get: function () { return this._status; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n            /**\n             * A control is `valid` when its `status === VALID`.\n             *\n             * In order to have this status, the control must have passed all its\n             * validation checks.\n             */\n            get: function () { return this._status === VALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n            /**\n             * A control is `invalid` when its `status === INVALID`.\n             *\n             * In order to have this status, the control must have failed\n             * at least one of its validation checks.\n             */\n            get: function () { return this._status === INVALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n            /**\n             * A control is `pending` when its `status === PENDING`.\n             *\n             * In order to have this status, the control must be in the\n             * middle of conducting a validation check.\n             */\n            get: function () { return this._status == PENDING; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n            /**\n             * A control is `disabled` when its `status === DISABLED`.\n             *\n             * Disabled controls are exempt from validation checks and\n             * are not included in the aggregate value of their ancestor\n             * controls.\n             */\n            get: function () { return this._status === DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n            /**\n             * A control is `enabled` as long as its `status !== DISABLED`.\n             *\n             * In other words, it has a status of `VALID`, `INVALID`, or\n             * `PENDING`.\n             */\n            get: function () { return this._status !== DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n            /**\n             * Returns any errors generated by failing validation. If there\n             * are no errors, it will return null.\n             */\n            get: function () { return this._errors; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n            /**\n             * A control is `pristine` if the user has not yet changed\n             * the value in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             */\n            get: function () { return this._pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n            /**\n             * A control is `dirty` if the user has changed the value\n             * in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             */\n            get: function () { return !this.pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n            /**\n            * A control is marked `touched` once the user has triggered\n            * a `blur` event on it.\n            */\n            get: function () { return this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n            /**\n             * A control is `untouched` if the user has not yet triggered\n             * a `blur` event on it.\n             */\n            get: function () { return !this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n            /**\n             * Emits an event every time the value of the control changes, in\n             * the UI or programmatically.\n             */\n            get: function () { return this._valueChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n            /**\n             * Emits an event every time the validation status of the control\n             * is re-calculated.\n             */\n            get: function () { return this._statusChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the synchronous validators that are active on this control.  Calling\n         * this will overwrite any existing sync validators.\n         */\n        AbstractControl.prototype.setValidators = function (newValidator) {\n            this.validator = coerceToValidator(newValidator);\n        };\n        /**\n         * Sets the async validators that are active on this control. Calling this\n         * will overwrite any existing async validators.\n         */\n        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n            this.asyncValidator = coerceToAsyncValidator(newValidator);\n        };\n        /**\n         * Empties out the sync validator list.\n         */\n        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n        /**\n         * Empties out the async validator list.\n         */\n        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n        /**\n         * Marks the control as `touched`.\n         *\n         * This will also mark all direct ancestors as `touched` to maintain\n         * the model.\n         */\n        AbstractControl.prototype.markAsTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._touched = true;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `untouched`.\n         *\n         * If the control has any children, it will also mark all children as `untouched`\n         * to maintain the model, and re-calculate the `touched` status of all parent\n         * controls.\n         */\n        AbstractControl.prototype.markAsUntouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = false;\n            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `dirty`.\n         *\n         * This will also mark all direct ancestors as `dirty` to maintain\n         * the model.\n         */\n        AbstractControl.prototype.markAsDirty = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._pristine = false;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsDirty({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pristine`.\n         *\n         * If the control has any children, it will also mark all children as `pristine`\n         * to maintain the model, and re-calculate the `pristine` status of all parent\n         * controls.\n         */\n        AbstractControl.prototype.markAsPristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = true;\n            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pending`.\n         */\n        AbstractControl.prototype.markAsPending = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._status = PENDING;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsPending({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Disables the control. This means the control will be exempt from validation checks and\n         * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n         *\n         * If the control has children, all children will be disabled to maintain the model.\n         */\n        AbstractControl.prototype.disable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._status = DISABLED;\n            this._errors = null;\n            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n            this._updateValue();\n            if (emitEvent) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange(true);\n        };\n        /**\n         * Enables the control. This means the control will be included in validation checks and\n         * the aggregate value of its parent. Its status is re-calculated based on its value and\n         * its validators.\n         *\n         * If the control has children, all children will be enabled.\n         */\n        AbstractControl.prototype.enable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = VALID;\n            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange(false);\n        };\n        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.updateValueAndValidity();\n                this._parent._updatePristine();\n                this._parent._updateTouched();\n            }\n        };\n        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n        /**\n         * Re-calculates the value and validation status of the control.\n         *\n         * By default, it will also update the value and validity of its ancestors.\n         */\n        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            onlySelf = normalizeBool(onlySelf);\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._setInitialStatus();\n            this._updateValue();\n            if (this.enabled) {\n                this._errors = this._runValidator();\n                this._status = this._calculateStatus();\n                if (this._status === VALID || this._status === PENDING) {\n                    this._runAsyncValidator(emitEvent);\n                }\n            }\n            if (emitEvent) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._updateTreeValidity = function (_a) {\n            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        };\n        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n        AbstractControl.prototype._runValidator = function () {\n            return isPresent(this.validator) ? this.validator(this) : null;\n        };\n        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n            var _this = this;\n            if (isPresent(this.asyncValidator)) {\n                this._status = PENDING;\n                this._cancelExistingSubscription();\n                var obs = toObservable(this.asyncValidator(this));\n                this._asyncValidationSubscription = obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n            }\n        };\n        AbstractControl.prototype._cancelExistingSubscription = function () {\n            if (isPresent(this._asyncValidationSubscription)) {\n                this._asyncValidationSubscription.unsubscribe();\n            }\n        };\n        /**\n         * Sets errors on a form control.\n         *\n         * This is used when validations are run manually by the user, rather than automatically.\n         *\n         * Calling `setErrors` will also update the validity of the parent control.\n         *\n         * ### Example\n         *\n         * ```\n         * const login = new FormControl(\"someLogin\");\n         * login.setErrors({\n         *   \"notUnique\": true\n         * });\n         *\n         * expect(login.valid).toEqual(false);\n         * expect(login.errors).toEqual({\"notUnique\": true});\n         *\n         * login.setValue(\"someOtherLogin\");\n         *\n         * expect(login.valid).toEqual(true);\n         * ```\n         */\n        AbstractControl.prototype.setErrors = function (errors, _a) {\n            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._errors = errors;\n            this._updateControlsErrors(emitEvent);\n        };\n        /**\n         * Retrieves a child control given the control's name or path.\n         *\n         * Paths can be passed in as an array or a string delimited by a dot.\n         *\n         * To get a control nested within a `person` sub-group:\n         *\n         * * `this.form.get('person.name');`\n         *\n         * -OR-\n         *\n         * * `this.form.get(['person', 'name']);`\n         */\n        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns null or undefined.\n         *\n         * If no path is given, it checks for the error on the present control.\n         */\n        AbstractControl.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.get(path) : this;\n            if (isPresent(control) && isPresent(control._errors)) {\n                return StringMapWrapper.get(control._errors, errorCode);\n            }\n            else {\n                return null;\n            }\n        };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns false.\n         *\n         * If no path is given, it checks for the error on the present control.\n         */\n        AbstractControl.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return isPresent(this.getError(errorCode, path));\n        };\n        Object.defineProperty(AbstractControl.prototype, \"root\", {\n            /**\n             * Retrieves the top-level ancestor of this control.\n             */\n            get: function () {\n                var x = this;\n                while (isPresent(x._parent)) {\n                    x = x._parent;\n                }\n                return x;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n            this._status = this._calculateStatus();\n            if (emitEvent) {\n                this._statusChanges.emit(this._status);\n            }\n            if (isPresent(this._parent)) {\n                this._parent._updateControlsErrors(emitEvent);\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._initObservables = function () {\n            this._valueChanges = new EventEmitter();\n            this._statusChanges = new EventEmitter();\n        };\n        AbstractControl.prototype._calculateStatus = function () {\n            if (this._allControlsDisabled())\n                return DISABLED;\n            if (isPresent(this._errors))\n                return INVALID;\n            if (this._anyControlsHaveStatus(PENDING))\n                return PENDING;\n            if (this._anyControlsHaveStatus(INVALID))\n                return INVALID;\n            return VALID;\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n            return this._anyControls(function (control) { return control.status == status; });\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsDirty = function () {\n            return this._anyControls(function (control) { return control.dirty; });\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsTouched = function () {\n            return this._anyControls(function (control) { return control.touched; });\n        };\n        /** @internal */\n        AbstractControl.prototype._updatePristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = !this._anyControlsDirty();\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._updateTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = this._anyControlsTouched();\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._onDisabledChange = function (isDisabled) { };\n        /** @internal */\n        AbstractControl.prototype._isBoxedValue = function (formState) {\n            return isStringMap(formState) && Object.keys(formState).length === 2 && 'value' in formState &&\n                'disabled' in formState;\n        };\n        /** @internal */\n        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n        return AbstractControl;\n    }());\n    /**\n     * @whatItDoes Tracks the value and validation status of an individual form control.\n     *\n     * It is one of the three fundamental building blocks of Angular forms, along with\n     * {@link FormGroup} and {@link FormArray}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormControl}, you can pass in an initial value as the\n     * first argument. Example:\n     *\n     * ```ts\n     * const ctrl = new FormControl('some value');\n     * console.log(ctrl.value);     // 'some value'\n     *```\n     *\n     * You can also initialize the control with a form state object on instantiation,\n     * which includes both the value and whether or not the control is disabled.\n     *\n     * ```ts\n     * const ctrl = new FormControl({value: 'n/a', disabled: true});\n     * console.log(ctrl.value);     // 'n/a'\n     * console.log(ctrl.status);   // 'DISABLED'\n     * ```\n     *\n     * To include a sync validator (or an array of sync validators) with the control,\n     * pass it in as the second argument. Async validators are also supported, but\n     * have to be passed in separately as the third arg.\n     *\n     * ```ts\n     * const ctrl = new FormControl('', Validators.required);\n     * console.log(ctrl.value);     // ''\n     * console.log(ctrl.status);   // 'INVALID'\n     * ```\n     *\n     * See its superclass, {@link AbstractControl}, for more properties and methods.\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormControl = (function (_super) {\n        __extends$6(FormControl, _super);\n        function FormControl(formState, validator, asyncValidator) {\n            if (formState === void 0) { formState = null; }\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n            /** @internal */\n            this._onChange = [];\n            this._applyFormState(formState);\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n            this._initObservables();\n        }\n        /**\n         * Set the value of the form control to `value`.\n         *\n         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n         * and not its parent component. This defaults to false.\n         *\n         * If `emitEvent` is `true`, this\n         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n         * to true (as it falls through to `updateValueAndValidity`).\n         *\n         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n         * specified.\n         *\n         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n         */\n        FormControl.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n            emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n            emitViewToModelChange = isPresent(emitViewToModelChange) ? emitViewToModelChange : true;\n            this._value = value;\n            if (this._onChange.length && emitModelToViewChange) {\n                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange); });\n            }\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Patches the value of a control.\n         *\n         * This function is functionally the same as {@link FormControl.setValue} at this level.\n         * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n         * where it does behave differently.\n         */\n        FormControl.prototype.patchValue = function (value, options) {\n            if (options === void 0) { options = {}; }\n            this.setValue(value, options);\n        };\n        /**\n         * Resets the form control. This means by default:\n         *\n         * * it is marked as `pristine`\n         * * it is marked as `untouched`\n         * * value is set to null\n         *\n         * You can also reset to a specific form state by passing through a standalone\n         * value or a form state object that contains both a value and a disabled state\n         * (these are the only two properties that cannot be calculated).\n         *\n         * Ex:\n         *\n         * ```ts\n         * this.control.reset('Nancy');\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * ```\n         *\n         * OR\n         *\n         * ```\n         * this.control.reset({value: 'Nancy', disabled: true});\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * console.log(this.control.status);  // 'DISABLED'\n         * ```\n         */\n        FormControl.prototype.reset = function (formState, _a) {\n            if (formState === void 0) { formState = null; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._applyFormState(formState);\n            this.markAsPristine({ onlySelf: onlySelf });\n            this.markAsUntouched({ onlySelf: onlySelf });\n            this.setValue(this._value, { onlySelf: onlySelf });\n        };\n        /**\n         * @internal\n         */\n        FormControl.prototype._updateValue = function () { };\n        /**\n         * @internal\n         */\n        FormControl.prototype._anyControls = function (condition) { return false; };\n        /**\n         * @internal\n         */\n        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n        /**\n         * Register a listener for change events.\n         */\n        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n        /**\n         * @internal\n         */\n        FormControl.prototype._clearChangeFns = function () {\n            this._onChange = [];\n            this._onDisabledChange = null;\n            this._onCollectionChange = function () { };\n        };\n        /**\n         * Register a listener for disabled events.\n         */\n        FormControl.prototype.registerOnDisabledChange = function (fn) { this._onDisabledChange = fn; };\n        /**\n         * @internal\n         */\n        FormControl.prototype._forEachChild = function (cb) { };\n        FormControl.prototype._applyFormState = function (formState) {\n            if (this._isBoxedValue(formState)) {\n                this._value = formState.value;\n                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                    this.enable({ onlySelf: true, emitEvent: false });\n            }\n            else {\n                this._value = formState;\n            }\n        };\n        return FormControl;\n    }(AbstractControl));\n    /**\n     * @whatItDoes Tracks the value and validity state of a group of {@link FormControl}\n     * instances.\n     *\n     * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n     * with each control name as the key.  It calculates its status by reducing the statuses\n     * of its children. For example, if one of the controls in a group is invalid, the entire\n     * group becomes invalid.\n     *\n     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {@link FormControl} and {@link FormArray}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n     * argument. The key for each child will be the name under which it is registered.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('Nancy', Validators.minLength(2)),\n     *   last: new FormControl('Drew'),\n     * });\n     *\n     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n     * console.log(form.status);  // 'VALID'\n     * ```\n     *\n     * You can also include group-level validators as the second arg, or group-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   password: new FormControl('', Validators.minLength(2)),\n     *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n     * }, passwordMatchValidator);\n     *\n     *\n     * function passwordMatchValidator(g: FormGroup) {\n     *    return g.get('password').value === g.get('passwordConfirm').value\n     *       ? null : {'mismatch': true};\n     * }\n     * ```\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormGroup = (function (_super) {\n        __extends$6(FormGroup, _super);\n        function FormGroup(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Registers a control with the group's list of controls.\n         *\n         * This method does not update value or validity of the control, so for\n         * most cases you'll want to use {@link FormGroup.addControl} instead.\n         */\n        FormGroup.prototype.registerControl = function (name, control) {\n            if (this.controls[name])\n                return this.controls[name];\n            this.controls[name] = control;\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n            return control;\n        };\n        /**\n         * Add a control to this group.\n         */\n        FormGroup.prototype.addControl = function (name, control) {\n            this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove a control from this group.\n         */\n        FormGroup.prototype.removeControl = function (name) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            StringMapWrapper.delete(this.controls, name);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         */\n        FormGroup.prototype.setControl = function (name, control) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            StringMapWrapper.delete(this.controls, name);\n            if (control)\n                this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Check whether there is an enabled control with the given name in the group.\n         *\n         * It will return false for disabled controls. If you'd like to check for\n         * existence in the group only, use {@link AbstractControl.get} instead.\n         */\n        FormGroup.prototype.contains = function (controlName) {\n            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n        };\n        /**\n         *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n         *  the structure of the group, with control names as keys.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.setValue({first: 'Nancy', last: 'Drew'});\n         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n         *\n         *  ```\n         */\n        FormGroup.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._checkAllValuesPresent(value);\n            StringMapWrapper.forEach(value, function (newValue, name) {\n                _this._throwIfControlMissing(name);\n                _this.controls[name].setValue(newValue, { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         *  Patches the value of the {@link FormGroup}. It accepts an object with control\n         *  names as keys, and will do its best to match the values to the correct controls\n         *  in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the group without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.patchValue({first: 'Nancy'});\n         *  console.log(form.value);   // {first: 'Nancy', last: null}\n         *\n         *  ```\n         */\n        FormGroup.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            StringMapWrapper.forEach(value, function (newValue, name) {\n                if (_this.controls[name]) {\n                    _this.controls[name].patchValue(newValue, { onlySelf: true });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         * Resets the {@link FormGroup}. This means by default:\n         *\n         * * The group and all descendants are marked `pristine`\n         * * The group and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in a map of states\n         * that matches the structure of your form, with control names as keys. The state\n         * can be a standalone value or a form state object with both a value and a disabled\n         * status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.form.reset({first: 'name', last; 'last name'});\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.form.reset({\n         *   first: {value: 'name', disabled: true},\n         *   last: 'last'\n         * });\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * console.log(this.form.get('first').status);  // 'DISABLED'\n         * ```\n         */\n        FormGroup.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = {}; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._forEachChild(function (control, name) {\n                control.reset(value[name], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the {@link FormGroup}, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the group.\n         */\n        FormGroup.prototype.getRawValue = function () {\n            return this._reduceChildren({}, function (acc, control, name) {\n                acc[name] = control.value;\n                return acc;\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._throwIfControlMissing = function (name) {\n            if (!Object.keys(this.controls).length) {\n                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.controls[name]) {\n                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n            }\n        };\n        /** @internal */\n        FormGroup.prototype._forEachChild = function (cb) {\n            StringMapWrapper.forEach(this.controls, cb);\n        };\n        /** @internal */\n        FormGroup.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) {\n                control.setParent(_this);\n                control._registerOnCollectionChange(_this._onCollectionChange);\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n        /** @internal */\n        FormGroup.prototype._anyControls = function (condition) {\n            var _this = this;\n            var res = false;\n            this._forEachChild(function (control, name) {\n                res = res || (_this.contains(name) && condition(control));\n            });\n            return res;\n        };\n        /** @internal */\n        FormGroup.prototype._reduceValue = function () {\n            var _this = this;\n            return this._reduceChildren({}, function (acc, control, name) {\n                if (control.enabled || _this.disabled) {\n                    acc[name] = control.value;\n                }\n                return acc;\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n            var res = initValue;\n            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n            return res;\n        };\n        /** @internal */\n        FormGroup.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n                var controlName = _a[_i];\n                if (this.controls[controlName].enabled) {\n                    return false;\n                }\n            }\n            return Object.keys(this.controls).length > 0 || this.disabled;\n        };\n        /** @internal */\n        FormGroup.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, name) {\n                if (value[name] === undefined) {\n                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n                }\n            });\n        };\n        return FormGroup;\n    }(AbstractControl));\n    /**\n     * @whatItDoes Tracks the value and validity state of an array of {@link FormControl}\n     * instances.\n     *\n     * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n     * It calculates its status by reducing the statuses of its children. For example, if one of\n     * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n     *\n     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {@link FormControl} and {@link FormGroup}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n     * argument.\n     *\n     * ### Example\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl('Nancy', Validators.minLength(2)),\n     *   new FormControl('Drew'),\n     * ]);\n     *\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * console.log(arr.status);  // 'VALID'\n     * ```\n     *\n     * You can also include array-level validators as the second arg, or array-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Adding or removing controls\n     *\n     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n     * as broken change detection.\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormArray = (function (_super) {\n        __extends$6(FormArray, _super);\n        function FormArray(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Get the {@link AbstractControl} at the given `index` in the array.\n         */\n        FormArray.prototype.at = function (index) { return this.controls[index]; };\n        /**\n         * Insert a new {@link AbstractControl} at the end of the array.\n         */\n        FormArray.prototype.push = function (control) {\n            this.controls.push(control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Insert a new {@link AbstractControl} at the given `index` in the array.\n         */\n        FormArray.prototype.insert = function (index, control) {\n            ListWrapper.insert(this.controls, index, control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove the control at the given `index` in the array.\n         */\n        FormArray.prototype.removeAt = function (index) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            ListWrapper.removeAt(this.controls, index);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         */\n        FormArray.prototype.setControl = function (index, control) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            ListWrapper.removeAt(this.controls, index);\n            if (control) {\n                ListWrapper.insert(this.controls, index, control);\n                this._registerControl(control);\n            }\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        Object.defineProperty(FormArray.prototype, \"length\", {\n            /**\n             * Length of the control array.\n             */\n            get: function () { return this.controls.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the value of the {@link FormArray}. It accepts an array that matches\n         *  the structure of the control.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.setValue(['Nancy', 'Drew']);\n         *  console.log(arr.value);   // ['Nancy', 'Drew']\n         *  ```\n         */\n        FormArray.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._checkAllValuesPresent(value);\n            value.forEach(function (newValue, index) {\n                _this._throwIfControlMissing(index);\n                _this.at(index).setValue(newValue, { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n         *  structure of the control, and will do its best to match the values to the correct\n         *  controls in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the array without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.patchValue(['Nancy']);\n         *  console.log(arr.value);   // ['Nancy', null]\n         *  ```\n         */\n        FormArray.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            value.forEach(function (newValue, index) {\n                if (_this.at(index)) {\n                    _this.at(index).patchValue(newValue, { onlySelf: true });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         * Resets the {@link FormArray}. This means by default:\n         *\n         * * The array and all descendants are marked `pristine`\n         * * The array and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in an array of states\n         * that matches the structure of the control. The state can be a standalone value\n         * or a form state object with both a value and a disabled status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.arr.reset(['name', 'last name']);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.arr.reset([\n         *   {value: 'name', disabled: true},\n         *   'last'\n         * ]);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * console.log(this.arr.get(0).status);  // 'DISABLED'\n         * ```\n         */\n        FormArray.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = []; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._forEachChild(function (control, index) {\n                control.reset(value[index], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the array, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the array.\n         */\n        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n        /** @internal */\n        FormArray.prototype._throwIfControlMissing = function (index) {\n            if (!this.controls.length) {\n                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.at(index)) {\n                throw new Error(\"Cannot find form control at index \" + index);\n            }\n        };\n        /** @internal */\n        FormArray.prototype._forEachChild = function (cb) {\n            this.controls.forEach(function (control, index) { cb(control, index); });\n        };\n        /** @internal */\n        FormArray.prototype._updateValue = function () {\n            var _this = this;\n            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n        };\n        /** @internal */\n        FormArray.prototype._anyControls = function (condition) {\n            return this.controls.some(function (control) { return control.enabled && condition(control); });\n        };\n        /** @internal */\n        FormArray.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) { return _this._registerControl(control); });\n        };\n        /** @internal */\n        FormArray.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, i) {\n                if (value[i] === undefined) {\n                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n                }\n            });\n        };\n        /** @internal */\n        FormArray.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n                var control = _a[_i];\n                if (control.enabled)\n                    return false;\n            }\n            return this.controls.length > 0 || this.disabled;\n        };\n        FormArray.prototype._registerControl = function (control) {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        };\n        return FormArray;\n    }(AbstractControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formDirectiveProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n    };\n    var resolvedPromise = Promise.resolve(null);\n    /**\n     * @whatItDoes Creates a top-level {@link FormGroup} instance and binds it to a form\n     * to track aggregate form value and validation status.\n     *\n     * @howToUse\n     *\n     * As soon as you import the `FormsModule`, this directive becomes active by default on\n     * all `<form>` tags.  You don't need to add a special selector.\n     *\n     * You can export the directive into a local template variable using `ngForm` as the key\n     * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n     * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n     * will give you access to the aggregate value and validity status of the form, as well as\n     * user interaction properties like `dirty` and `touched`.\n     *\n     * To register child controls with the form, you'll want to use {@link NgModel} with a\n     * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n     * sub-groups within the form.\n     *\n     * You can listen to the directive's `ngSubmit` event to be notified when the user has\n     * triggered a form submission.\n     *\n     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     *  @stable\n     */\n    var NgForm = (function (_super) {\n        __extends$4(NgForm, _super);\n        function NgForm(validators, asyncValidators) {\n            _super.call(this);\n            this._submitted = false;\n            this.ngSubmit = new EventEmitter();\n            this.form =\n                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        }\n        Object.defineProperty(NgForm.prototype, \"submitted\", {\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"controls\", {\n            get: function () { return this.form.controls; },\n            enumerable: true,\n            configurable: true\n        });\n        NgForm.prototype.addControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                dir._control = container.registerControl(dir.name, dir.control);\n                setUpControl(dir.control, dir);\n                dir.control.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        NgForm.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n        NgForm.prototype.removeControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                if (isPresent(container)) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        NgForm.prototype.addFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                var group = new FormGroup({});\n                setUpFormContainer(group, dir);\n                container.registerControl(dir.name, group);\n                group.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        NgForm.prototype.removeFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                if (isPresent(container)) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        NgForm.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n        NgForm.prototype.updateModel = function (dir, value) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var ctrl = _this.form.get(dir.path);\n                ctrl.setValue(value);\n            });\n        };\n        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n        NgForm.prototype.onSubmit = function () {\n            this._submitted = true;\n            this.ngSubmit.emit(null);\n            return false;\n        };\n        NgForm.prototype.onReset = function () { this.resetForm(); };\n        NgForm.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /** @internal */\n        NgForm.prototype._findContainer = function (path) {\n            path.pop();\n            return ListWrapper.isEmpty(path) ? this.form : this.form.get(path);\n        };\n        NgForm.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                        providers: [formDirectiveProvider],\n                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n                        outputs: ['ngSubmit'],\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgForm.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        return NgForm;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Examples = {\n        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n    };\n\n    var TemplateDrivenErrors = (function () {\n        function TemplateDrivenErrors() {\n        }\n        TemplateDrivenErrors.modelParentException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n        };\n        TemplateDrivenErrors.formGroupNameException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        TemplateDrivenErrors.missingNameException = function () {\n            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n        };\n        TemplateDrivenErrors.modelGroupParentException = function () {\n            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        return TemplateDrivenErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var modelGroupProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n    };\n    /**\n     * @whatItDoes Creates and binds a {@link FormGroup} instance to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive can only be used as a child of {@link NgForm} (or in other words,\n     * within `<form>` tags).\n     *\n     * Use this directive if you'd like to create a sub-group within a form. This can\n     * come in handy if you want to validate a sub-group of your form separately from\n     * the rest of your form, or if some values in your domain model make more sense to\n     * consume together in a nested object.\n     *\n     * Pass in the name you'd like this sub-group to have and it will become the key\n     * for the sub-group in the form's full value. You can also export the directive into\n     * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n     *\n     * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     * @stable\n     */\n    var NgModelGroup = (function (_super) {\n        __extends$8(NgModelGroup, _super);\n        function NgModelGroup(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /** @internal */\n        NgModelGroup.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelGroupParentException();\n            }\n        };\n        NgModelGroup.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n        ];\n        /** @nocollapse */\n        NgModelGroup.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        NgModelGroup.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n        };\n        return NgModelGroup;\n    }(AbstractFormGroupDirective));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formControlBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n    };\n    var resolvedPromise$1 = Promise.resolve(null);\n    /**\n     * @whatItDoes Creates a {@link FormControl} instance from a domain model and binds it\n     * to a form control element.\n     *\n     * The {@link FormControl} instance will track the value, user interaction, and\n     * validation status of the control and keep the view synced with the model. If used\n     * within a parent form, the directive will also register itself with the form as a child\n     * control.\n     *\n     * @howToUse\n     *\n     * This directive can be used by itself or as part of a larger form. All you need is the\n     * `ngModel` selector to activate it.\n     *\n     * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n     * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n     * the domain model in your class as well.\n     *\n     * If you wish to inspect the properties of the associated {@link FormControl} (like\n     * validity state), you can also export the directive into a local template variable using\n     * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n     * will fall through to the control anyway, so you can access them directly. You can see a\n     * full list of properties directly available in {@link AbstractControlDirective}.\n     *\n     * The following is an example of a simple standalone control using `ngModel`:\n     *\n     * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n     *\n     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n     * so that the control can be registered with the parent form under that name.\n     *\n     * It's worth noting that in the context of a parent form, you often can skip one-way or\n     * two-way binding because the parent form will sync the value for you. You can access\n     * its properties by exporting it into a local template variable using `ngForm` (ex:\n     * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n     *\n     * If you do need to populate initial values into your form, using a one-way binding for\n     * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n     * than the domain model's value on submit.\n     *\n     * Take a look at an example of using `ngModel` within a form:\n     *\n     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * **npm package**: `@angular/forms`\n     *\n     * **NgModule**: `FormsModule`\n     *\n     *  @stable\n     */\n    var NgModel = (function (_super) {\n        __extends$7(NgModel, _super);\n        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            /** @internal */\n            this._control = new FormControl();\n            /** @internal */\n            this._registered = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        NgModel.prototype.ngOnChanges = function (changes) {\n            this._checkForErrors();\n            if (!this._registered)\n                this._setUpControl();\n            if ('isDisabled' in changes) {\n                this._updateDisabled(changes);\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this._updateValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n        Object.defineProperty(NgModel.prototype, \"control\", {\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"path\", {\n            get: function () {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgModel.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        NgModel.prototype._setUpControl = function () {\n            this._isStandalone() ? this._setUpStandalone() :\n                this.formDirective.addControl(this);\n            this._registered = true;\n        };\n        NgModel.prototype._isStandalone = function () {\n            return !this._parent || (this.options && this.options.standalone);\n        };\n        NgModel.prototype._setUpStandalone = function () {\n            setUpControl(this._control, this);\n            this._control.updateValueAndValidity({ emitEvent: false });\n        };\n        NgModel.prototype._checkForErrors = function () {\n            if (!this._isStandalone()) {\n                this._checkParentType();\n            }\n            this._checkName();\n        };\n        NgModel.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        };\n        NgModel.prototype._checkName = function () {\n            if (this.options && this.options.name)\n                this.name = this.options.name;\n            if (!this._isStandalone() && !this.name) {\n                TemplateDrivenErrors.missingNameException();\n            }\n        };\n        NgModel.prototype._updateValue = function (value) {\n            var _this = this;\n            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n        };\n        NgModel.prototype._updateDisabled = function (changes) {\n            var _this = this;\n            var disabledValue = changes['isDisabled'].currentValue;\n            var isDisabled = disabledValue != null && disabledValue != false;\n            resolvedPromise$1.then(function () {\n                if (isDisabled && !_this.control.disabled) {\n                    _this.control.disable();\n                }\n                else if (!isDisabled && _this.control.disabled) {\n                    _this.control.enable();\n                }\n            });\n        };\n        NgModel.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n                        providers: [formControlBinding],\n                        exportAs: 'ngModel'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgModel.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        NgModel.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n        };\n        return NgModel;\n    }(NgControl));\n\n    var ReactiveErrors = (function () {\n        function ReactiveErrors() {\n        }\n        ReactiveErrors.controlParentException = function () {\n            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n        };\n        ReactiveErrors.ngModelGroupException = function () {\n            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n        };\n        ReactiveErrors.missingFormException = function () {\n            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n        };\n        ReactiveErrors.groupParentException = function () {\n            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n        };\n        ReactiveErrors.arrayParentException = function () {\n            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n        };\n        ReactiveErrors.disabledAttrWarning = function () {\n            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n        };\n        return ReactiveErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formControlBinding$1 = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n    };\n    /**\n     * @whatItDoes Syncs a standalone {@link FormControl} instance to a form control element.\n     *\n     * In other words, this directive ensures that any values written to the {@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {@link FormControl} instance (view -> model).\n     *\n     * @howToUse\n     *\n     * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n     * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n     * {@link FormControlDirective}.\n     *\n     * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n     * it does not require that your {@link FormControl} instance be part of any parent\n     * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n     * exists above it.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormControl} instance. See a full list of available properties in\n     * {@link AbstractControl}.\n     *\n     * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n     * or you can set it programmatically later using {@link AbstractControl.setValue} or\n     * {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     *  @stable\n     */\n    var FormControlDirective = (function (_super) {\n        __extends$9(FormControlDirective, _super);\n        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this.update = new EventEmitter();\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlDirective.prototype.ngOnChanges = function (changes) {\n            if (this._isControlChanged(changes)) {\n                setUpControl(this.form, this);\n                if (this.control.disabled)\n                    this.valueAccessor.setDisabledState(true);\n                this.form.updateValueAndValidity({ emitEvent: false });\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.form.setValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        FormControlDirective.prototype._isControlChanged = function (changes) {\n            return StringMapWrapper.contains(changes, 'form');\n        };\n        FormControlDirective.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n        ];\n        /** @nocollapse */\n        FormControlDirective.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        FormControlDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlDirective;\n    }(NgControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formDirectiveProvider$1 = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n    };\n    /**\n     * @whatItDoes Binds an existing {@link FormGroup} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive accepts an existing {@link FormGroup} instance. It will then use this\n     * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n     * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n     * and {@link FormArrayName} directives.\n     *\n     * **Set value**: You can set the form's initial value when instantiating the\n     * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n     * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n     * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     * **npm package**: `@angular/forms`\n     *\n     * **NgModule**: {@link ReactiveFormsModule}\n     *\n     *  @stable\n     */\n    var FormGroupDirective = (function (_super) {\n        __extends$11(FormGroupDirective, _super);\n        function FormGroupDirective(_validators, _asyncValidators) {\n            _super.call(this);\n            this._validators = _validators;\n            this._asyncValidators = _asyncValidators;\n            this._submitted = false;\n            this.directives = [];\n            this.form = null;\n            this.ngSubmit = new EventEmitter();\n        }\n        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n            this._checkFormPresent();\n            if (StringMapWrapper.contains(changes, 'form')) {\n                this._updateValidators();\n                this._updateDomValue();\n                this._updateRegistrations();\n            }\n        };\n        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        FormGroupDirective.prototype.addControl = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpControl(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n            this.directives.push(dir);\n            return ctrl;\n        };\n        FormGroupDirective.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n        FormGroupDirective.prototype.addFormGroup = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n        FormGroupDirective.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.addFormArray = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n        FormGroupDirective.prototype.getFormArray = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.updateModel = function (dir, value) {\n            var ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        };\n        FormGroupDirective.prototype.onSubmit = function () {\n            this._submitted = true;\n            this.ngSubmit.emit(null);\n            return false;\n        };\n        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n        FormGroupDirective.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /** @internal */\n        FormGroupDirective.prototype._updateDomValue = function () {\n            var _this = this;\n            this.directives.forEach(function (dir) {\n                var newCtrl = _this.form.get(dir.path);\n                if (dir._control !== newCtrl) {\n                    cleanUpControl(dir._control, dir);\n                    if (newCtrl)\n                        setUpControl(newCtrl, dir);\n                    dir._control = newCtrl;\n                }\n            });\n            this.form._updateTreeValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype._updateRegistrations = function () {\n            var _this = this;\n            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n            if (this._oldForm)\n                this._oldForm._registerOnCollectionChange(function () { });\n            this._oldForm = this.form;\n        };\n        FormGroupDirective.prototype._updateValidators = function () {\n            var sync = composeValidators(this._validators);\n            this.form.validator = Validators.compose([this.form.validator, sync]);\n            var async = composeAsyncValidators(this._asyncValidators);\n            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n        };\n        FormGroupDirective.prototype._checkFormPresent = function () {\n            if (isBlank(this.form)) {\n                ReactiveErrors.missingFormException();\n            }\n        };\n        FormGroupDirective.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroup]',\n                        providers: [formDirectiveProvider$1],\n                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        FormGroupDirective.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormGroupDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n            'ngSubmit': [{ type: _angular_core.Output },],\n        };\n        return FormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formGroupNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n    };\n    /**\n     * @whatItDoes Syncs a nested {@link FormGroup} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {@link FormGroup} you want to link, and\n     * will look for a {@link FormGroup} registered with that name in the parent\n     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n     *\n     * Nested form groups can come in handy when you want to validate a sub-group of a\n     * form separately from the rest or when you'd like to group the values of certain\n     * controls into their own nested object.\n     *\n     * **Access the group**: You can access the associated {@link FormGroup} using the\n     * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n     *\n     * You can also access individual controls within the group using dot syntax.\n     * Ex: `this.form.get('name.first')`\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {@link FormGroup}, or you can set it programmatically later using\n     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the group, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * @stable\n     */\n    var FormGroupName = (function (_super) {\n        __extends$12(FormGroupName, _super);\n        function FormGroupName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /** @internal */\n        FormGroupName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.groupParentException();\n            }\n        };\n        FormGroupName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormGroupName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormGroupName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n        };\n        return FormGroupName;\n    }(AbstractFormGroupDirective));\n    var formArrayNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n    };\n    /**\n     * @whatItDoes Syncs a nested {@link FormArray} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {@link FormArray} you want to link, and\n     * will look for a {@link FormArray} registered with that name in the parent\n     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n     *\n     * Nested form arrays can come in handy when you have a group of form controls but\n     * you're not sure how many there will be. Form arrays allow you to create new\n     * form controls dynamically.\n     *\n     * **Access the array**: You can access the associated {@link FormArray} using the\n     * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n     * Ex: `this.form.get('cities')`.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {@link FormArray}, or you can set the value programmatically later using the\n     * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n     * methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the array, you can\n     * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n     * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n     * status is re-calculated.\n     *\n     * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n     * calling its {@link FormArray.push} method.\n     *  Ex: `this.form.get('cities').push(new FormControl());`\n     *\n     * ### Example\n     *\n     * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * @stable\n     */\n    var FormArrayName = (function (_super) {\n        __extends$12(FormArrayName, _super);\n        function FormArrayName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        FormArrayName.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormArray(this);\n        };\n        FormArrayName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormArray(this);\n            }\n        };\n        Object.defineProperty(FormArrayName.prototype, \"control\", {\n            get: function () { return this.formDirective.getFormArray(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n            get: function () {\n                return this._parent ? this._parent.formDirective : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"path\", {\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        FormArrayName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.arrayParentException();\n            }\n        };\n        FormArrayName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormArrayName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormArrayName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n        };\n        return FormArrayName;\n    }(ControlContainer));\n    function _hasInvalidParent(parent) {\n        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n            !(parent instanceof FormArrayName);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var controlNameBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n    };\n    /**\n     * @whatItDoes  Syncs a {@link FormControl} in an existing {@link FormGroup} to a form control\n     * element by name.\n     *\n     * In other words, this directive ensures that any values written to the {@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {@link FormControl} instance (view -> model).\n     *\n     * @howToUse\n     *\n     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the {@link FormControl} instance you want to\n     * link, and will look for a {@link FormControl} registered with that name in the\n     * closest {@link FormGroup} or {@link FormArray} above it.\n     *\n     * **Access the control**: You can access the {@link FormControl} associated with\n     * this directive by using the {@link AbstractControl.get} method.\n     * Ex: `this.form.get('first');`\n     *\n     * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n     * See a full list of available properties in {@link AbstractControl}.\n     *\n     *  **Set value**: You can set an initial value for the control when instantiating the\n     *  {@link FormControl}, or you can set it programmatically later using\n     *  {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     *  * **npm package**: `@angular/forms`\n     *\n     *  * **NgModule**: {@link ReactiveFormsModule}\n     *\n     *  @stable\n     */\n    var FormControlName = (function (_super) {\n        __extends$10(FormControlName, _super);\n        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this._added = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlName.prototype.ngOnChanges = function (changes) {\n            if (!this._added)\n                this._setUpControl();\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.viewModel = this.model;\n                this.formDirective.updateModel(this, this.model);\n            }\n        };\n        FormControlName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeControl(this);\n            }\n        };\n        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        Object.defineProperty(FormControlName.prototype, \"path\", {\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"control\", {\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlName.prototype._checkParentType = function () {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        };\n        FormControlName.prototype._setUpControl = function () {\n            this._checkParentType();\n            this._control = this.formDirective.addControl(this);\n            if (this.control.disabled)\n                this.valueAccessor.setDisabledState(true);\n            this._added = true;\n        };\n        FormControlName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n        ];\n        /** @nocollapse */\n        FormControlName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        FormControlName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlName;\n    }(NgControl));\n\n    var REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `required` validator to any controls marked with the\n     * `required` attribute, via the {@link NG_VALIDATORS} binding.\n     *\n     * ### Example\n     *\n     * ```\n     * <input name=\"fullName\" ngModel required>\n     * ```\n     *\n     * @stable\n     */\n    var RequiredValidator = (function () {\n        function RequiredValidator() {\n        }\n        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = isPresent(value) && \"\" + value !== 'false';\n                if (this._onChange)\n                    this._onChange();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        RequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.required(c) : null;\n        };\n        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        RequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n                        providers: [REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        RequiredValidator.ctorParameters = [];\n        RequiredValidator.propDecorators = {\n            'required': [{ type: _angular_core.Input },],\n        };\n        return RequiredValidator;\n    }());\n    /**\n     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='min'}\n     */\n    var MIN_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n     *\n     * @stable\n     */\n    var MinLengthValidator = (function () {\n        function MinLengthValidator() {\n        }\n        MinLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n        };\n        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['minlength']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        MinLengthValidator.prototype.validate = function (c) {\n            return isPresent(this.minlength) ? this._validator(c) : null;\n        };\n        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        MinLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                        providers: [MIN_LENGTH_VALIDATOR],\n                        host: { '[attr.minlength]': 'minlength? minlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MinLengthValidator.ctorParameters = [];\n        MinLengthValidator.propDecorators = {\n            'minlength': [{ type: _angular_core.Input },],\n        };\n        return MinLengthValidator;\n    }());\n    /**\n     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='max'}\n     */\n    var MAX_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n     * `formControl`,\n     * or control with `ngModel` that also has a `maxlength` attribute.\n     *\n     * @stable\n     */\n    var MaxLengthValidator = (function () {\n        function MaxLengthValidator() {\n        }\n        MaxLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n        };\n        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['maxlength']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        MaxLengthValidator.prototype.validate = function (c) {\n            return isPresent(this.maxlength) ? this._validator(c) : null;\n        };\n        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        MaxLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                        providers: [MAX_LENGTH_VALIDATOR],\n                        host: { '[attr.maxlength]': 'maxlength? maxlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MaxLengthValidator.ctorParameters = [];\n        MaxLengthValidator.propDecorators = {\n            'maxlength': [{ type: _angular_core.Input },],\n        };\n        return MaxLengthValidator;\n    }());\n    var PATTERN_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `pattern` validator to any controls marked with the\n     * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n     * as the regex to validate Control value against.  Follows pattern attribute\n     * semantics; i.e. regex must match entire Control value.\n     *\n     * ### Example\n     *\n     * ```\n     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n     * ```\n     * @stable\n     */\n    var PatternValidator = (function () {\n        function PatternValidator() {\n        }\n        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n        PatternValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['pattern']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        PatternValidator.prototype.validate = function (c) {\n            return isPresent(this.pattern) ? this._validator(c) : null;\n        };\n        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        PatternValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                        providers: [PATTERN_VALIDATOR],\n                        host: { '[attr.pattern]': 'pattern? pattern : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        PatternValidator.ctorParameters = [];\n        PatternValidator.propDecorators = {\n            'pattern': [{ type: _angular_core.Input },],\n        };\n        return PatternValidator;\n    }());\n\n    /**\n     * @whatItDoes Creates an {@link AbstractControl} from a user-specified configuration.\n     *\n     * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n     * forms.\n     *\n     * @howToUse\n     *\n     * To use, inject `FormBuilder` into your component class. You can then call its methods\n     * directly.\n     *\n     * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n     *\n     *  * **npm package**: `@angular/forms`\n     *\n     *  * **NgModule**: {@link ReactiveFormsModule}\n     *\n     * @stable\n     */\n    var FormBuilder = (function () {\n        function FormBuilder() {\n        }\n        /**\n         * Construct a new {@link FormGroup} with the given map of configuration.\n         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n         *\n         * See the {@link FormGroup} constructor for more details.\n         */\n        FormBuilder.prototype.group = function (controlsConfig, extra) {\n            if (extra === void 0) { extra = null; }\n            var controls = this._reduceControls(controlsConfig);\n            var validator = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;\n            var asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;\n            return new FormGroup(controls, validator, asyncValidator);\n        };\n        /**\n         * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n         * `asyncValidator`.\n         *\n         * `formState` can either be a standalone value for the form control or an object\n         * that contains both a value and a disabled status.\n         *\n         */\n        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            return new FormControl(formState, validator, asyncValidator);\n        };\n        /**\n         * Construct a {@link FormArray} from the given `controlsConfig` array of\n         * configuration, with the given optional `validator` and `asyncValidator`.\n         */\n        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n            var _this = this;\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            var controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n            return new FormArray(controls, validator, asyncValidator);\n        };\n        /** @internal */\n        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n            var _this = this;\n            var controls = {};\n            StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {\n                controls[controlName] = _this._createControl(controlConfig);\n            });\n            return controls;\n        };\n        /** @internal */\n        FormBuilder.prototype._createControl = function (controlConfig) {\n            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n                controlConfig instanceof FormArray) {\n                return controlConfig;\n            }\n            else if (isArray(controlConfig)) {\n                var value = controlConfig[0];\n                var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n                return this.control(value, validator, asyncValidator);\n            }\n            else {\n                return this.control(controlConfig);\n            }\n        };\n        FormBuilder.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        FormBuilder.ctorParameters = [];\n        return FormBuilder;\n    }());\n\n    var SHARED_FORM_DIRECTIVES = [\n        NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor,\n        CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator,\n        MinLengthValidator, MaxLengthValidator, PatternValidator\n    ];\n    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n    var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n    /**\n     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n     */\n    var InternalFormsSharedModule = (function () {\n        function InternalFormsSharedModule() {\n        }\n        InternalFormsSharedModule.decorators = [\n            { type: _angular_core.NgModule, args: [{ declarations: SHARED_FORM_DIRECTIVES, exports: SHARED_FORM_DIRECTIVES },] },\n        ];\n        /** @nocollapse */\n        InternalFormsSharedModule.ctorParameters = [];\n        return InternalFormsSharedModule;\n    }());\n\n    /**\n     * The ng module for forms.\n     * @stable\n     */\n    var FormsModule = (function () {\n        function FormsModule() {\n        }\n        FormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                        providers: [RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        FormsModule.ctorParameters = [];\n        return FormsModule;\n    }());\n    /**\n     * The ng module for reactive forms.\n     * @stable\n     */\n    var ReactiveFormsModule = (function () {\n        function ReactiveFormsModule() {\n        }\n        ReactiveFormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                        providers: [FormBuilder, RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        ReactiveFormsModule.ctorParameters = [];\n        return ReactiveFormsModule;\n    }());\n\n    exports.AbstractControlDirective = AbstractControlDirective;\n    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n    exports.ControlContainer = ControlContainer;\n    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n    exports.DefaultValueAccessor = DefaultValueAccessor;\n    exports.NgControl = NgControl;\n    exports.NgControlStatus = NgControlStatus;\n    exports.NgControlStatusGroup = NgControlStatusGroup;\n    exports.NgForm = NgForm;\n    exports.NgModel = NgModel;\n    exports.NgModelGroup = NgModelGroup;\n    exports.FormControlDirective = FormControlDirective;\n    exports.FormControlName = FormControlName;\n    exports.FormGroupDirective = FormGroupDirective;\n    exports.FormArrayName = FormArrayName;\n    exports.FormGroupName = FormGroupName;\n    exports.NgSelectOption = NgSelectOption;\n    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n    exports.MaxLengthValidator = MaxLengthValidator;\n    exports.MinLengthValidator = MinLengthValidator;\n    exports.PatternValidator = PatternValidator;\n    exports.RequiredValidator = RequiredValidator;\n    exports.FormBuilder = FormBuilder;\n    exports.AbstractControl = AbstractControl;\n    exports.FormArray = FormArray;\n    exports.FormControl = FormControl;\n    exports.FormGroup = FormGroup;\n    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n    exports.NG_VALIDATORS = NG_VALIDATORS;\n    exports.Validators = Validators;\n    exports.FormsModule = FormsModule;\n    exports.ReactiveFormsModule = ReactiveFormsModule;\n\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular/forms/bundles/forms.umd.js\n ** module id = 80\n ** module chunks = 0\n **/"],"sourceRoot":""}